```
[focus_component]
Focuses a component specified by its key.

Key Concepts:
• **Key:** A unique identifier for each component.

API:
focus_component(key: str) -> None
  Focuses the component with the given key.

Code Example:
```python
import mesop as me

@me.page(path="/focus_component")
def page():
  me.select(
    options=[
      me.SelectOption(label="Autocomplete", value="autocomplete"),
      # ... other options
    ],
    on_selection_change=on_selection_change,
  )

  # ... other components

def on_selection_change(e: me.SelectSelectionChangeEvent):
  me.focus_component(key=e.value)
```

Usage Notes:
- The key should be globally unique to prevent unexpected behavior.
- If multiple components share the same key, the first component instance found in the component tree will be focused.

Warnings:
! If the specified component cannot be found, the function will have no effect.
```

```
[MESOP NAVIGATION]
Mesop provides a simple way to navigate between pages in a multi-page application.

Key Concepts:
• `me.navigate`: Navigates to a specified URL.

API:
me.navigate(url: str, query_params: dict[str, str | Sequence[str]] | me.QueryParams | None = None)
  Navigates to the given URL.

Code Example:
```python
import mesop as me

def navigate(event: me.ClickEvent):
  me.navigate("/about")

@me.page(path="/")
def home():
  me.text("This is the home page")
  me.button("navigate to about page", on_click=navigate)
```

Usage Notes:
- Use `me.navigate` within event handlers, such as `on_click` for buttons.
- Pass the desired URL as the `url` argument.
- Optionally provide `query_params` to include query parameters in the URL.

Warnings:
! `me.navigate` should only be used within the context of a Mesop application.
```


```
[SCROLL_INTO_VIEW]
Scrolls a component into view based on its key.

Key Concepts:
• **Component Key:** Each component in a Mesop application has a unique identifier called a key, which is used to reference and interact with the component.
• **Viewport:** The visible area of the application window.

API:
me.scroll_into_view(key: str)
  Scrolls the component with the specified key into the viewport.

Code Example:
```python
import mesop as me

@me.page(path="/scroll_into_view")
def app():
  me.text("Top line")
  me.text("Middle line", key="middle_line")
  me.text("Bottom line", key="bottom_line")
  me.button("Scroll to middle", on_click=lambda e: me.scroll_into_view(key="middle_line"))

```

Usage Notes:
- The key should be globally unique to prevent conflicts.
- If multiple components share the same key, the first component instance found in the component tree will be scrolled to.

Warnings:
! If no component with the specified key is found, no action will be taken.
```

```
[mesop.page]
A decorator for defining pages in a Mesop application. It registers a Python function as a page within the application.

Key Concepts:
• **Page:** A single, self-contained view in a multi-page Mesop application.
• **Route:** The URL path associated with a page.

API:
page(path: str = '/', title: str | None = None, stylesheets: list[str] | None = None, security_policy: SecurityPolicy | None = None, on_load: OnLoadHandler | None = None) -> Callable[[Callable[[], None]], Callable[[], None]]
  Registers a function as a page with the specified path and optional attributes.

Code Example:
```python
import mesop as me

@me.page(path="/")
def foo():
    me.text("bar")
```

Usage Notes:
- The default path for a page is "/".
- The `title` argument allows specifying a custom title for the page.
- `stylesheets` can be used to load external stylesheets.
- `security_policy` provides control over the page's security settings.
- `on_load` defines an event handler to be executed when the page loads.

Warnings:
! If `path` is not provided, the page will be registered at the root path ("/").
```

```
QUERY_PARAMS
Query params (also known as query strings) are used to manage state in URLs, enabling deep-linking within Mesop applications.

Key Concepts:
• Query params are key-value pairs stored in the URL.
• `me.query_params` is a dictionary-like object to access and manipulate query params.

API:
me.query_params: Dict[str, Any]
  Provides access to query parameters in the current URL.

Code Example:
```python
@me.page(path="/examples/query_params/page_2")
def page_2():
  me.text(f"query_params={me.query_params}")
  me.button("Add query param", on_click=add_query_param)
  me.button("Navigate", on_click=navigate)

def add_query_param(e: me.ClickEvent):
  me.query_params["key"] = "value"

def navigate(e: me.ClickEvent):
  me.navigate("/examples/query_params", query_params=me.query_params)
```

Usage Notes:
- Get a query param value: `value = me.query_params['param_name']`
- Check if a key exists: `if 'key' in me.query_params:`
- Get all values for a key: `all_values = me.query_params.get_all('param_name')`
- Iterate over query params: `for key in query_params: value = query_params[key]`
- Set a query param: `query_params['new_param'] = 'value'`
- Set repeated query params: `query_params['repeated_param'] = ['value1', 'value2']`
- Delete a query param: `del query_params['param_to_delete']`

Warnings:
! If a query param key is repeated, only the first value is accessible through `me.query_params`. Use `me.query_params.get_all` for all values.
```

Mesop Style API Documentation

This document provides a comprehensive overview of the Mesop Python API for styling UI components. The API wraps the browser's native CSS style API, allowing you to define and apply styles to your UI components using a Pythonic interface.

Style Dataclass

The Style dataclass represents the style configuration for a UI component. It contains a variety of attributes corresponding to CSS properties, enabling you to control various visual aspects of your components.

Attributes:

Attribute	Description	Type
align_content	Aligns the flexible container's items on the cross-axis. See MDN for details.	`ContentAlignmentValues
align_items	Specifies the default alignment for items inside a flexible container. See MDN for details.	`ItemAlignmentValues
align_self	Overrides a grid or flex item's align-items value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis. See MDN for details.	`ItemAlignmentValues
aspect_ratio	Specifies the desired width-to-height ratio of a component. See MDN for details.	`str
background	Sets the background color or image of the component. See MDN for details.	`str
border	Defines the border properties for each side of the component. See MDN for details.	`Border
border_radius	Defines the border radius. See MDN for details.	`int
bottom	Helps set vertical position of a positioned element. See MDN for details.	`int
box_shadow	Defines the box shadow. See MDN for details.	`str
box_sizing	Defines the box sizing. See MDN for details.	`str
color	Sets the color of the text inside the component. See MDN for details.	`str
column_gap	Sets the gap between columns. See MDN for details.	`int
columns	Specifies the number of columns in a multi-column element. See MDN for details.	`int
cursor	Sets the mouse cursor. See MDN for details.	`str
display	Defines the display type of the component. See MDN for details.	`Literal['block', 'inline', 'inline-block', 'flex', 'inline-flex', 'grid', 'inline-grid', 'none', 'contents']
flex_basis	Specifies the initial length of a flexible item. See MDN for details.	`str
flex_direction	Establishes the main-axis, thus defining the direction flex items are placed in the flex container. See MDN for details.	`Literal['row', 'row-reverse', 'column', 'column-reverse']
flex_grow	Defines the ability for a flex item to grow if necessary. See MDN for details.	`int
flex_shrink	Defines the ability for a flex item to shrink if necessary. See MDN for details.	`int
flex_wrap	Allows flex items to wrap onto multiple lines. See MDN for details.	`Literal['nowrap', 'wrap', 'wrap-reverse']
font_family	Specifies the font family. See MDN for details.	`str
font_size	Sets the size of the font. See MDN for details.	`int
font_style	Specifies the font style for text. See MDN for details.	`Literal['italic', 'normal']
font_weight	Sets the weight (or boldness) of the font. See MDN for details.	`Literal['bold', 'normal', 100, 200, 300, 400, 500, 600, 700, 800, 900]
gap	Sets the gap. See MDN for details.	`int
grid_area	Sets the grid area. See MDN for details.	`str
grid_auto_columns	CSS property specifies the size of an implicitly-created grid column track or pattern of tracks. See MDN for details.	`str
grid_auto_flow	CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid. See MDN for details.	`str
grid_auto_rows	CSS property specifies the size of an implicitly-created grid row track or pattern of tracks. See MDN for details.	`str
grid_column	CSS shorthand property specifies a grid item's size and location within a grid column. See MDN for details.	`str
grid_column_start	Sets the grid column start. See MDN for details.	`int
grid_column_end	Sets the grid column end. See MDN for details.	`int
grid_row	CSS shorthand property specifies a grid item's size and location within a grid row. See MDN for details.	`str
grid_row_start	Sets the grid row start. See MDN for details.	`int
grid_row_end	Sets the grid row end. See MDN for details.	`int
grid_template_areas	Sets the grid template areas; each element is a row. See MDN for details.	`list[str]
grid_template_columns	Sets the grid template columns. See MDN for details.	`str
grid_template_rows	Sets the grid template rows. See MDN for details.	`str
height	Sets the height of the component. See MDN for details.	`int
justify_content	Aligns the flexible container's items on the main-axis. See MDN for details.	`ContentAlignmentValues
justify_items	Defines the default justify-self for all items of the box, giving them all a default way of justifying each box along the appropriate axis. See MDN for details.	`ItemJustifyValues
justify_self	Sets the way a box is justified inside its alignment container along the appropriate axis. See MDN for details.	`ItemJustifyValues
left	Helps set horizontal position of a positioned element. See MDN for details.	`int
letter_spacing	Increases or decreases the space between characters in text. See MDN for details.	`int
line	Set the line height (relative to the font size). See MDN for details.	height
margin	Sets the margin space required on each side of an element. See MDN for details.	`Margin
max_height	Sets the maximum height of an element. See MDN for details.	`int
max_width	Sets the maximum width of an element. See MDN for details.	`int
min_height	Sets the minimum height of an element. See MDN for details.	`int
min_width	Sets the minimum width of an element. See MDN for details.	`int
opacity	Sets the opacity property. See MDN for details.	`float
outline	Sets the outline property. Note: input component has default browser stylings. See MDN for details.	`str
overflow_wrap	Specifies how long text can be broken up by new lines to prevent overflowing. See MDN for details.	`OverflowWrapValues
overflow_x	Specifies the handling of overflow in the horizontal direction. See MDN for details.	`OverflowValues
overflow_y	Specifies the handling of overflow in the vertical direction. See MDN for details.	`OverflowValues
padding	Sets the padding space required on each side of an element. See MDN for details.	`Padding
place_items	The CSS place-items shorthand property allows you to align items along both the block and inline directions at once. See MDN for details.	`str
pointer_events	Sets under what circumstances (if any) a particular graphic element can become the target of pointer events. See MDN for details.	`PointerEventsValues
position	Specifies the type of positioning method used for an element (static, relative, absolute, fixed, or sticky). See MDN for details.	`Literal['static', 'relative', 'absolute', 'fixed', 'sticky']
right	Helps set horizontal position of a positioned element. See MDN for details.	`int
rotate	Allows you to specify rotation transforms individually and independently of the transform property. See MDN for details.	`str
row_gap	Sets the gap between rows. See MDN for details.	`int
text_align	Specifies the horizontal alignment of text in an element. See MDN for details.	`Literal['start', 'end', 'left', 'right', 'center']
text_decoration	Specifies the decoration added to text. See MDN for details.	`Literal['underline', 'none']
text_overflow	Specifies how overflowed content that is not displayed should be signaled to the user. See MDN for details.	`Literal['ellipsis', 'clip']
top	Helps set vertical position of a positioned element. See MDN for details.	`int
transform	Lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model. See MDN for details.	`str
visibility	Sets the visibility property. See MDN for details.	`Literal['visible', 'hidden', 'collapse', 'inherit', 'initial', 'revert', 'revert-layer', 'unset']
white_space	Specifies how white space inside an element is handled. See MDN for details.	`Literal['normal', 'nowrap', 'pre', 'pre-wrap', 'pre-line', 'break-spaces']
width	Sets the width of the component. See MDN for details.	`int
z_index	Sets the z-index of the component. See MDN for details.	`int
Border Dataclass

The Border dataclass defines the border styles for each side of a UI component. It allows you to customize the appearance of borders by specifying their width, color, and style.

Attributes:

Attribute	Description	Type
top	Style for the top border.	`BorderSide
right	Style for the right border.	`BorderSide
bottom	Style for the bottom border.	`BorderSide
left	Style for the left border.	`BorderSide

Methods:

all(value: BorderSide): Creates a Border instance with all sides having the same style.

symmetric(vertical: BorderSide | None = None, horizontal: BorderSide | None = None): Creates a Border instance with symmetric styles for vertical and horizontal sides.

BorderSide Dataclass

The BorderSide dataclass represents the style of a single side of a border in a UI component. It allows you to define the width, color, and style of a border side.

Attributes:

Attribute	Description	Type
width	The width of the border. Can be specified as an integer value representing pixels, a string with a unit (e.g., '2em'), or None for no width.	`int
color	The color of the border, represented as a string. This can be any valid CSS color value, or None for no color.	`str
style	The style of the border. See MDN for details.	`Literal['none', 'solid', 'dashed', 'dotted', 'double', 'groove', 'ridge', 'inset', 'outset', 'hidden']
Margin Dataclass

The Margin dataclass defines the margin space around a UI component. It allows you to control the spacing between a component and its neighboring elements.

Attributes:

Attribute	Description	Type
top	Top margin (note: 2 is the same as 2px).	`int
right	Right margin.	`int
bottom	Bottom margin.	`int
left	Left margin.	`int

Methods:

all(value: int | str): Creates a Margin instance with the same value for all sides.

symmetric(vertical: int | str | None = None, horizontal: int | str | None = None): Creates a Margin instance with symmetric values for vertical and horizontal sides.

Padding Dataclass

The Padding dataclass defines the padding space around a UI component. It controls the spacing between a component's content and its border.

Attributes:

Attribute	Description	Type
top	Top padding (note: 2 is the same as 2px).	`int
right	Right padding.	`int
bottom	Bottom padding.	`int
left	Left padding.	`int

Methods:

all(value: int | str): Creates a Padding instance with the same value for all sides.

symmetric(vertical: int | str | None = None, horizontal: int | str | None = None): Creates a Padding instance with symmetric values for vertical and horizontal sides.

This documentation provides a comprehensive overview of the Mesop Python API for styling UI components. By utilizing this API, developers can create visually appealing and customized UIs with ease.

```
Viewport Size
The viewport size API allows you to access the current viewport size for responsive and adaptive designs.

Key Concepts:
• Responsive Design: Single fluid layout adapting to all screen sizes.
• Adaptive Design: Multiple fixed layouts for specific device categories at breakpoints.

API:
viewport_size() -> Size
  Returns the current viewport size.

Code Example:
```python
import mesop as me

@me.page()
def page():
    if me.viewport_size().width > 640:
        width = me.viewport_size().width / 2
    else:
        width = me.viewport_size().width
    for i in range(8):
      me.box(style=me.Style(width=width))
```

Usage Notes:
- Responsive design is typically a good starting point for simpler adaptations.
- Adaptive design is suitable for optimizing complex mobile and desktop experiences.


Audio
Audio component equivalent to the `<audio>` HTML element. Displays the browser's native audio controls.

Key Concepts:
• Audio autoplay:  Modern browsers enforce restrictions to prevent automatic audio playback without user interaction to improve user experience.

API:
audio(src: str | None, autoplay: bool = False, key: str | None = None) -> None
  Creates an audio component.

Code Example:
```python
@me.page(
  security_policy=me.SecurityPolicy(
    allowed_iframe_parents=["https://google.github.io"]
  ),
  path="/audio",
)
def app():
  me.audio(
    src="https://interactive-examples.mdn.mozilla.net/media/cc0-audio/t-rex-roar.mp3",
    # autoplay=True
  )
```

Usage Notes:
- To enable autoplay, set the `autoplay` attribute to `True`.
- Refer to [https://developer.mozilla.org/en-US/docs/Web/Media/Autoplay_guide#autoplay_availability](https://developer.mozilla.org/en-US/docs/Web/Media/Autoplay_guide#autoplay_availability) to check autoplay capabilities for your application.

Warnings:
! Autoplay restrictions exist in modern browsers to prevent unwanted interruptions.
```

```
[Autocomplete]
Autocomplete allows users to enter free text or select from a dynamic list of values. It's built on the Angular Material autocomplete component, displaying only text labels and values.

Key Concepts:
• AutocompleteOption: Represents a single selectable option.
• AutocompleteOptionGroup: Groups multiple options together.
• AutocompleteEnterEvent: Triggered when the user presses Enter.
• AutocompleteSelectionChangeEvent: Emitted when a selection changes.

API:
autocomplete(options: Iterable[AutocompleteOption | AutocompleteOptionGroup] | None, label: str = '', on_selection_change: Callable[[AutocompleteSelectionChangeEvent], Any] | None = None, on_input: Callable[[InputEvent], Any] | None = None, on_enter: Callable[[AutocompleteEnterEvent], Any] | None = None, appearance: Literal['fill', 'outline'] = 'fill', disabled: bool = False, placeholder: str = '', value: str = '', readonly: bool = False, hide_required_marker: bool = False, color: Literal['primary', 'accent', 'warn'] = 'primary', float_label: Literal['always', 'auto'] = 'auto', subscript_sizing: Literal['fixed', 'dynamic'] = 'fixed', hint_label: str = '', style: Style | None = None, key: str | None = None) -> None
  Creates an autocomplete component.

Code Example:
```python
import mesop as me

@me.stateclass
class State:
  raw_value: str
  selected_value: str

@me.page(path="/autocomplete")
def app():
  state = me.state(State)

  with me.box(style=me.Style(margin=me.Margin.all(15))):
    me.autocomplete(
      label="Select state",
      options=_make_autocomplete_options(),
      on_selection_change=on_value_change,
      on_enter=on_value_change,
      on_input=on_input,
    )

    if state.selected_value:
      me.text("Selected: " + state.selected_value)

def on_value_change(e: me.AutocompleteEnterEvent | me.AutocompleteSelectionChangeEvent):
  state = me.state(State)
  state.selected_value = e.value

def on_input(e: me.InputEvent):
  state = me.state(State)
  state.raw_value = e.value

def _make_autocomplete_options() -> list[me.AutocompleteOptionGroup]:
  states_options_list = []
  sub_group = None
  for state in _STATES:
    if not sub_group or sub_group.label != state[0]:
      if sub_group:
        states_options_list.append(sub_group)
      sub_group = me.AutocompleteOptionGroup(label=state[0], options=[])
    sub_group.options.append(me.AutocompleteOption(label=state, value=state))
  if sub_group:
    states_options_list.append(sub_group)
  return states_options_list

_STATES = [
  "Alabama",
  "Alaska",
  "Arizona",
  # ...
  "Wyoming",
]
```

Usage Notes:
- The `options` parameter accepts an iterable of `AutocompleteOption` or `AutocompleteOptionGroup` objects.
- The `on_selection_change` event is triggered when the user selects an option.
- The `on_input` event fires whenever the input value changes.

Warnings:
! The autocomplete component currently lacks a blur event, so the selected value might not be available immediately on blur.
```

```
[Badge]
A composite component that decorates a UI element, often used for displaying unread message counts. It's based on the Angular Material badge component.

Key Concepts:
• Badge: A visual indicator that overlays another component.
• Overlap: Whether the badge should overlap the content it decorates.
• Position: The relative placement of the badge.

API:
badge(color: Literal['primary', 'accent', 'warn'] = 'primary', overlap: bool = False, disabled: bool = False, position: Literal['above after', 'above before', 'below before', 'below after', 'before', 'after', 'above', 'below'] = 'above after', content: str = '', description: str = '', size: Literal['small', 'medium', 'large'] = 'small', hidden: bool = False, key: str | None = None)
  Creates a Badge component.

Code Example:
```python
import mesop as me

@me.page(
  security_policy=me.SecurityPolicy(
    allowed_iframe_parents=["https://google.github.io"]
  ),
  path="/badge",
)
def app():
  with me.box(
    style=me.Style(
      display="block",
      padding=me.Padding(top=16, right=16, bottom=16, left=16),
      height=50,
      width=30,
    )
  ):
    with me.badge(content="1", size="medium"):
      me.text(text="text with badge")
```

Usage Notes:
- The `color` parameter determines the badge's color: 'primary', 'accent', or 'warn'.
- The `position` parameter allows controlling the badge's relative placement using combinations of 'above', 'below', 'before', and 'after'.

Warnings:
! The `badge` component relies on the underlying Angular Material implementation. Be aware of any limitations or changes in that library.
```

```
[Box]
A container component used to group and style other components. Provides styling options for background, padding, margins, borders, and more.

Key Concepts:
• **Style:** An object that defines visual properties like background color, padding, margins, and borders.
• **Border:** A property to style borders around the box. It accepts `me.Border` objects for configuring different border styles.
• **Margin:** A property to define spacing around the box. It accepts `me.Margin` objects for configuring different margin types.
• **ClickEvent:** An event triggered when the user clicks on the box.

API:
box(style: Style | None = None, on_click: Callable[[ClickEvent], Any] | None = None, key: str | None = None) -> Any
  Creates a box component with specified style, click handler, and key.

Code Example:
```python
with me.box(style=me.Style(background="red", padding=me.Padding.all(16))):
  # ... child components ...
```

Usage Notes:
- Use the `style` parameter to apply CSS-like styles to the box.
- The `on_click` parameter allows you to define a callback function triggered when the box is clicked.

Warnings:
! Nested box components inherit styles from parent boxes.
```


```
[BUTTON]
Button is a component for creating interactive elements in Mesop applications, based on the Angular Material button component.

Key Concepts:
• **Button Types:** 'raised', 'flat', 'stroked'
• **Button Colors:** 'primary', 'accent', 'warn'

API:
button(label: str | None = None, on_click: Callable[[ClickEvent], Any] | None = None, type: Literal['raised', 'flat', 'stroked'] | None = None, color: Literal['primary', 'accent', 'warn'] | None = None, disable_ripple: bool = False, disabled: bool = False, style: Style | None = None, key: str | None = None) -> None
  Creates a simple text button component.

Code Example:
```python
me.button("Default")
me.button("Raised", type="raised")
```

Usage Notes:
- Use `type` to specify the button style (raised, flat, stroked).
- Use `color` to set the button's theme color (primary, accent, warn).

Warnings:
! The `content_button` component is intended for advanced use cases, as it requires a child component for its content.
```

```
CHAT
A simple chat UI component for Mesop Labs that allows users to interact with a bot or assistant.

Key Concepts:
• ChatMessage: Represents a single message in the chat history.
• transform: A function that processes user input and generates a response.

API:
mel.chat(transform: Callable[[str, list[mel.ChatMessage]], Generator[str, None, None] | str], title: str | None = None, bot_user: str = _BOT_USER_DEFAULT)
  Creates a chat UI with the specified parameters.

Code Example:
```python
import mesop as me
import mesop.labs as mel

def transform(input: str, history: list[mel.ChatMessage]):
  # Process the input and generate a response
  return "Hello, you said: " + input

@me.page(path="/chat")
def page():
  mel.chat(transform, title="My Chat")
```

Usage Notes:
- The `transform` function should return a string or a generator of strings to display the response.
- The `title` parameter sets the headline of the chat UI.
- The `bot_user` parameter specifies the name of the bot or assistant.

Warnings:
! The `transform` function should be carefully designed to handle potential security risks and user input validation.
```

```
[Checkbox]
Checkbox is a multi-selection form control based on Angular Material checkbox component. It allows users to select multiple options from a list.

Key Concepts:
• CheckboxChangeEvent: Represents a checkbox state change event.
• CheckboxIndeterminateChangeEvent: Represents a checkbox indeterminate state change event.

API:
checkbox(label: str | None = None, on_change: Callable[[CheckboxChangeEvent], Any] | None = None, on_indeterminate_change: Callable[[CheckboxIndeterminateChangeEvent], Any] | None = None, label_position: Literal['before', 'after'] = 'after', disable_ripple: bool = False, tab_index: int = 0, color: Literal['primary', 'accent', 'warn'] | None = None, checked: bool = False, disabled: bool = False, indeterminate: bool = False, style: Style | None = None, key: str | None = None) -> None
  Creates a simple Checkbox component with a text label.

Code Example:
```python
import mesop as me

@me.stateclass
class State:
  checked: bool

def on_update(event: me.CheckboxChangeEvent):
  state = me.state(State)
  state.checked = event.checked

@me.page(
  security_policy=me.SecurityPolicy(
    allowed_iframe_parents=["https://google.github.io"]
  ),
  path="/checkbox",
)
def app():
  state = me.state(State)
  me.checkbox(
    "Simple checkbox",
    on_change=on_update,
  )

  if state.checked:
    me.text(text="is checked")
  else:
    me.text(text="is not checked")
```

Usage Notes:
- Use `on_change` to handle checkbox state changes.
- Use `on_indeterminate_change` to handle changes in the indeterminate state.

Warnings:
! Clicking a checkbox manually will automatically set `indeterminate` to `False`.
```

```
[code]
Displays code with syntax highlighting.

Key Concepts:
• Language: Specifies the language of the code block (defaults to Python).

API:
me.code(code: str, language: str = "python")
  Creates a code component.

Code Example:
```python
me.code("a = 123")
```

Usage Notes:
- Use `language` parameter to specify the code language.
- Indentation is preserved for readability.

Warnings:
! Only a limited number of languages are currently supported.
```


```
[Divider]
A visual separator component based on Angular Material's divider.

Key Concepts:
• Divider: A visual element used to separate content.
• Inset Divider: A divider that is indented from the edges of its container.

API:
divider(key: str | None = None, inset: bool = False)
  Creates a Divider component.

Code Example:
```python
@me.page(
  security_policy=me.SecurityPolicy(
    allowed_iframe_parents=["https://google.github.io"]
  ),
  path="/divider",
)
def app():
  me.text(text="before")
  me.divider()
  me.text(text="after")
```

Usage Notes:
- The `key` parameter is used to identify the component.

Warnings:
! The divider component requires the Angular Material library to be installed.
```

```
[Embed]
Embed allows you to display content from another website within your Mesop application using an iframe.

Key Concepts:
• Security Policy: Defines which websites are allowed to be embedded.
• Style: Configures the appearance of the embed, including width and height.

API:
embed(src: str, style: Style | None = None, key: str | None = None) -> None
  Creates an embed component.

Code Example:
```python
import mesop as me

@me.page(
  security_policy=me.SecurityPolicy(
    allowed_iframe_parents=["https://google.github.io"]
  ),
  path="/embed",
)
def app():
  src = "https://google.github.io/mesop/"
  me.text("Embedding: " + src)
  me.embed(
    src=src,
    style=me.Style(width="100%", height="100%"),
  )
```

Usage Notes:
- Ensure the target website allows embedding.
- Set the `allowed_iframe_parents` in the security policy to control which sites can be embedded.

Warnings:
! Embedding external content can pose security risks if not properly configured.
```

```
[HTML]
The HTML component allows you to add custom HTML to your Mesop app. It supports two rendering modes: sanitized (default) for secure rendering and sandboxed for rendering <script> and <style> content within an iframe.

Key Concepts:
• Sanitized Mode: Removes potentially unsafe HTML tags like <script> and <style>.
• Sandboxed Mode: Allows rendering of all HTML content, including <script> and <style>, but isolates it within an iframe.

API:
html(html: str, mode: Literal['sanitized', 'sandboxed'] | None = None, style: Style | None = None, key: str | None = None)
  Renders custom HTML content securely.

Code Example:
```python
import mesop as me

@me.page(path="/html_demo")
def app():
  me.text("Sanitized HTML")
  me.html(
    """
Custom HTML
<a href="https://google.github.io/mesop/" target="_blank">mesop</a>
""",
    mode="sanitized",
  )
  with me.box(style=me.Style(margin=me.Margin.symmetric(vertical=24))):
    me.divider()
  me.text("Sandboxed HTML")
  me.html(
    "hi<script>document.body.innerHTML = 'iamsandboxed'; </script>",
    mode="sandboxed",
  )
```

Usage Notes:
- Use "sanitized" mode for default HTML rendering, ensuring security.
- Use "sandboxed" mode for rendering HTML with <script> and <style> tags, but isolate the content within an iframe.

Warnings:
! Use "sandboxed" mode with caution as it allows execution of JavaScript code within an iframe. Ensure the HTML content is from a trusted source.
```

```
[Icon]
Displays a Material icon/symbol using the Angular Material icon component.

Key Concepts:
• Material Symbols: A library of icons available for use.

API:
icon(key: str | None = None, icon: str | None = None, style: Style | None = None) -> None
  Creates a Icon component.

Code Example:
```python
@me.page(
  security_policy=me.SecurityPolicy(
    allowed_iframe_parents=["https://google.github.io"]
  ),
  path="/icon",
)
def app():
  me.text("home icon")
  me.icon(icon="home")
```

Usage Notes:
- Use the `icon` parameter to specify the desired Material Symbol icon.

Warnings:
! Ensure the `icon` parameter value corresponds to a valid Material Symbol name.
```


```
[IMAGE]
The `image` component renders an image within a Mesop page, similar to an `<img>` HTML element.

Key Concepts:
• **Image:** Represents a visual element displayed on the page.

API:
image(src: str | None, alt: str | None, style: Style | None, key: str | None) -> Component
  Creates an image component.

Code Example:
```python
import mesop as me

@me.page(path="/image")
def app():
  me.image(
    src="https://interactive-examples.mdn.mozilla.net/media/cc0-images/grapefruit-slice-332-332.jpg",
    alt="Grapefruit",
    style=me.Style(width="100%"),
  )
```

Usage Notes:
- Use the `src` parameter to specify the URL of the image.
- Provide descriptive `alt` text for accessibility.

Warnings:
! Ensure the `src` URL points to a valid image file.
```

```
[Components]
Provides an overview of different component types in Mesop, including native, user-defined, web, and content components.

Key Concepts:
• Native components: Implemented using Angular/Javascript and wrap Angular Material components or DOM elements.
• User-defined components: Python functions that call other components, including native and user-defined ones.
• Web components: Custom HTML elements created using JavaScript and CSS, enabling custom JavaScript execution and bi-directional communication between browser and server.
• Content components: Allow flexible component composition by accepting child components.

API:
@me.content_component
def scaffold(url: str):
  ...

Code Example:
```python
@me.content_component
def scaffold(url: str):
  with me.box(style=me.Style(background="white")):
    menu(url=url)
    with me.box(style=me.Style(padding=me.Padding(left=MENU_WIDTH))):
      me.slot()

def page1():
  with scaffold(url="/page1"):
    some_content(...)
```

Usage Notes:
- Use `me.slot()` in content components to define where child components are inserted.
- Define custom content components for better reusability.

Warnings:
! Consider using component keys for reusable event handlers to avoid issues with closure variables.
```

```
Input
A component for user input based on the Angular Material input component.

Key Concepts:
• InputBlurEvent: Represents an event when a user loses focus of an input.
• InputEnterEvent: Represents an "Enter" keyboard event on an input component.
• InputEvent: Represents a user input event.

API:
input(label: str = '', on_blur: Callable[[InputBlurEvent], Any] | None = None, on_input: Callable[[InputEvent], Any] | None = None, on_enter: Callable[[InputEnterEvent], Any] | None = None, type: Literal['color', 'date', 'datetime-local', 'email', 'month', 'number', 'password', 'search', 'tel', 'text', 'time', 'url', 'week'] | None = None, appearance: Literal['fill', 'outline'] = 'fill', style: Style | None = None, disabled: bool = False, placeholder: str = '', required: bool = False, value: str = '', readonly: bool = False, hide_required_marker: bool = False, color: Literal['primary', 'accent', 'warn'] = 'primary', float_label: Literal['always', 'auto'] = 'auto', subscript_sizing: Literal['fixed', 'dynamic'] = 'fixed', hint_label: str = '', key: str | None = None) -> Input

  Creates an Input component.

Code Example:
```python
from mesop import me, InputBlurEvent

@me.stateclass
class State:
  input: str = ""

def on_blur(e: InputBlurEvent):
  state = me.state(State)
  state.input = e.value

@me.page(path="/input")
def app():
  s = me.state(State)
  me.input(label="Basic input", on_blur=on_blur)
  me.text(text=s.input)
```

Usage Notes:
- Use `on_blur` instead of `on_input` for performance reasons.
- For longer text inputs, use `me.Textarea(...)` instead of `me.input(...)`.

Warnings:
! `on_input` can cause performance issues due to frequent updates.
```

```
[LINK]
The `link` function creates an HTML anchor element (<a>) that links to another page. It allows for customization of text, opening behavior, and styling.

Key Concepts:
• HTML Anchor Element (<a>)

API:
link(text: str, url: str, open_in_new_tab: bool = False, style: Style | None = None, key: str | None = None) -> None
  Creates a link with the specified text, URL, opening behavior, and style.

Code Example:
```python
me.link(text="Open in same tab", url="https://google.github.io/mesop/")
me.link(text="Open in new tab", open_in_new_tab=True, url="https://google.github.io/mesop/")
me.link(text="Styled link", url="https://google.github.io/mesop/", style=me.Style(color="black", text_decoration="none"))
```

Usage Notes:
- The `open_in_new_tab` parameter controls whether the link opens in a new tab or the current tab.
- The `style` parameter allows customization of the link's appearance using the `Style` object.

Warnings:
! Ensure the provided URL is valid and accessible.
```

```
Markdown
Converts markdown text into HTML.

Key Concepts:
• Markdown: A lightweight markup language for formatting plain text.
• HTML: HyperText Markup Language, used to structure web pages.

API:
markdown(text: str | None, style: Style | None) -> None
  Renders markdown text.

Code Example:
```python
import mesop as me

SAMPLE_MARKDOWN = """
# Sample Markdown Document

## Table of Contents
1. [Headers](#headers)
2. [Emphasis](#emphasis)
3. [Lists](#lists)
4. [Links](#links)
5. [Code](#code)
6. [Blockquotes](#blockquotes)
7. [Tables](#tables)
8. [Horizontal Rules](#horizontal-rules)
"""

@me.page(
  path="/markdown_demo",
)
def app():
  me.markdown(SAMPLE_MARKDOWN)
```

Usage Notes:
- Markdown syntax is supported by most text editors and online services.

Warnings:
! Markdown support may vary depending on the platform or application.
```

```
[Plot]
Renders Matplotlib figures as images within a Mesop application.

Key Concepts:
• **Figure:** A Matplotlib object representing a plot.
• **Style:**  A Mesop object controlling the visual appearance of the plot.

API:
plot(figure: Figure, style: Style | None = None)
  Creates a plot component from a Matplotlib figure.

Code Example:
```python
from matplotlib.figure import Figure
import mesop as me

@me.page(path="/plot")
def app():
  fig = Figure()
  ax = fig.subplots()
  ax.plot([1, 2])

  me.text("Example using matplotlib:")
  me.plot(fig, style=me.Style(width="100%"))
```

Usage Notes:
- Use the `me.plot()` function to display a Matplotlib figure within a Mesop application.
-  Optionally provide a `Style` object to customize the plot's appearance.

Warnings:
! Ensure the Matplotlib figure is created without using `pyplot`.
```

```
[PROGRESS_BAR]
A component used to indicate progress. Based on the Angular Material progress bar component.

Key Concepts:
• **Progress Bar:** A visual representation of the progress of a task or process.
• **Modes:**
    - **Determinate:** Displays a specific progress value.
    - **Indeterminate:** Displays an animation indicating an ongoing process.
    - **Buffer:**  Shows a progress range with a buffer value.
    - **Query:**  Similar to indeterminate but displays a specific value.

API:
progress_bar(key: str | None = None, color: Literal['primary', 'accent', 'warn'] | None = None, value: float = 0, buffer_value: float = 0, mode: Literal['determinate', 'indeterminate', 'buffer', 'query'] = 'indeterminate', on_animation_end: Callable[[ProgressBarAnimationEndEvent], Any] | None = None)

Code Example:
```python
import mesop as me

@me.page(
  security_policy=me.SecurityPolicy(
    allowed_iframe_parents=["https://google.github.io"]
  ),
  path="/progress_bar",
)
def app():
  me.text("Default progress bar")
  me.progress_bar()
```

Usage Notes:
- **Determinate Mode:** Use `value` to set the current progress.
- **Indeterminate Mode:** Use for ongoing processes with unknown progress.
- **Buffer Mode:** Use `value` for the current progress and `buffer_value` for the maximum progress.

Warnings:
! `on_animation_end` event is not emitted when animations are disabled or for indeterminate and query modes.
```

```
[PROGRESS_SPINNER]
The Progress Spinner component displays a circular loading indicator to signify ongoing activity. It leverages the Angular Material progress spinner component for visual presentation.

Key Concepts:
• **Progress Spinner:** A visual cue indicating an in-progress operation.
• **Angular Material:** The underlying UI framework used for the Progress Spinner component.

API:
progress_spinner(key: str | None = None, color: Literal['primary', 'accent', 'warn'] | None = None, diameter: float = 48, stroke_width: float = 4)
  Creates a Progress Spinner component.

Code Example:
```python
@me.page(
  security_policy=me.SecurityPolicy(
    allowed_iframe_parents=["https://google.github.io"]
  ),
  path="/progress_spinner",
)
def app():
  me.progress_spinner()
```

Usage Notes:
- Customize the progress spinner's appearance with the `color`, `diameter`, and `stroke_width` parameters.
- Consider using a `key` for improved performance if you're dynamically creating multiple progress spinners.

Warnings:
! Ensure the `allowed_iframe_parents` list in the `security_policy` accurately reflects the domains where the Progress Spinner component can be embedded.
```

```
Radio
A single selection form control based on the Angular Material radio component.

Key Concepts:
• RadioOption: Represents a single option within a radio group.
• RadioChangeEvent: Event emitted when the radio group's value changes.

API:
radio(options: Iterable[RadioOption], on_change: Callable[[RadioChangeEvent], Any] | None = None, color: Literal['primary', 'accent', 'warn'] | None = None, label_position: Literal['before', 'after'] = 'after', value: str = '', disabled: bool = False, style: Style | None = None, key: str | None = None) -> Radio
  Creates a Radio component.

Code Example:
```python
import mesop as me

@me.stateclass
class State:
  radio_value: str = "2"

def on_change(event: me.RadioChangeEvent):
  s = me.state(State)
  s.radio_value = event.value

@me.page(
  security_policy=me.SecurityPolicy(
    allowed_iframe_parents=["https://google.github.io"]
  ),
  path="/radio",
)
def app():
  s = me.state(State)
  me.text("Horizontal radio options")
  me.radio(
    on_change=on_change,
    options=[
      me.RadioOption(label="Option 1", value="1"),
      me.RadioOption(label="Option 2", value="2"),
    ],
    value=s.radio_value,
  )
  me.text(text="Selected radio value: " + s.radio_value)
```

Usage Notes:
- The `on_change` event is only emitted when the value changes due to user interaction.
- The `value` attribute of the radio component should match the `value` of the selected radio option.

Warnings:
! The `on_change` event is not emitted when the `value` attribute is programmatically updated.
```

```
[Select]
The `Select` component allows users to choose one or multiple values from a list. It is built upon the Angular Material select component.

Key Concepts:
• SelectOption
• SelectSelectionChangeEvent
• SelectOpenedChangeEvent

API:
select(options: Iterable[SelectOption] = (), on_selection_change: Callable[[SelectSelectionChangeEvent], Any] | None = None, on_opened_change: Callable[[SelectOpenedChangeEvent], Any] | None = None, disabled: bool = False, disable_ripple: bool = False, multiple: bool = False, tab_index: int = 0, placeholder: str = '', value: str = '', style: Style | None = None, key: str | None = None) -> Select
  Creates a Select component.

Code Example:
```python
import mesop as me

@me.stateclass
class State:
  selected_values: list[str]

def on_selection_change(e: me.SelectSelectionChangeEvent):
  s = me.state(State)
  s.selected_values = e.values

@me.page(
  security_policy=me.SecurityPolicy(
    allowed_iframe_parents=["https://google.github.io"]
  ),
  path="/select_demo",
)
def app():
  me.text(text="Select")
  me.select(
    label="Select",
    options=[
      me.SelectOption(label="label 1", value="value1"),
      me.SelectOption(label="label 2", value="value2"),
      me.SelectOption(label="label 3", value="value3"),
    ],
    on_selection_change=on_selection_change,
    style=me.Style(width=500),
    multiple=True,
  )
  s = me.state(State)
  me.text(text="Selected values: " + ", ".join(s.selected_values))
```

Usage Notes:
- The `options` parameter takes a list of `SelectOption` objects.
- The `on_selection_change` event is triggered when the selected value(s) change.

Warnings:
! The `Select` component is based on the Angular Material select component and may have limitations related to its underlying implementation.
```

```
SIDENAV
A sidenav component based on Angular Material for navigation. It is a sidebar that can be opened or closed.

Key Concepts:
• State: Represents the open/closed state of the sidenav.
• ClickEvent: Event triggered when a button is clicked.
• Style: Used to apply custom styles to the sidenav.

API:
sidenav(opened: bool = True, style: Style | None = None, key: str | None = None) -> Component
  Creates a sidenav component.

Code Example:
```python
@me.page(
  path="/sidenav",
)
def app():
  state = me.state(State)
  with me.sidenav(
    opened=state.sidenav_open, style=me.Style(width=SIDENAV_WIDTH)
  ):
    me.text("Inside sidenav")

  with me.box(
    style=me.Style(
      margin=me.Margin(left=SIDENAV_WIDTH if state.sidenav_open else 0),
    ),
  ):
    with me.content_button(on_click=on_click):
      me.icon("menu")
    me.markdown("Main content")
```

Usage Notes:
- The sidenav's open/closed state is managed by a state object.
- The `Style` object can be used to apply custom styles to the sidenav.

Warnings:
! Ensure the `SecurityPolicy` is correctly configured for iframe parent domains if embedding the sidenav within another website.
```

```
[Slide Toggle]
A Mesop component that allows users to toggle a state on or off, based on the Angular Material slide toggle component.

Key Concepts:
• Slide Toggle: A UI element that represents a boolean state, allowing users to switch between "on" and "off".
• `SlideToggleChangeEvent`: An event dispatched whenever the slide toggle's state changes.

API:
slide_toggle(label: str | None = None, on_change: Callable[[SlideToggleChangeEvent], Any] | None = None, label_position: Literal['before', 'after'] = 'after', required: bool = False, color: Literal['primary', 'accent', 'warn'] | None = None, disabled: bool = False, disable_ripple: bool = False, tab_index: int = 0, checked: bool = False, hide_icon: bool = False, key: str | None = None) -> None
  Creates a simple Slide toggle component with a text label.

Code Example:
```python
@me.page(path="/slide_toggle")
def app():
  me.slide_toggle(label="Slide toggle", on_change=on_change)
  s = me.state(State)
  me.text(text=f"Toggled: {s.toggled}")
```

Usage Notes:
- The `on_change` parameter accepts a callable that will be executed when the slide toggle's state changes.
- The `label_position` parameter controls the position of the label relative to the slide toggle.

Warnings:
! This component relies on the Angular Material slide toggle, so ensure the necessary dependencies are installed and configured.
```

```
## Slider

A component that allows the user to select from a range of values. Based on the Angular Material slider component.

**Key Concepts:**
• **SliderValueChangeEvent:** Event triggered when the slider value changes.

**API:**

**slider(on_value_change: Callable[[SliderValueChangeEvent], Any] | None = None, value: float | None = None, min: float = 0, max: float = 100, step: float = 1, disabled: bool = False, discrete: bool = False, show_tick_marks: bool = False, color: Literal['primary', 'accent', 'warn'] = 'primary', disable_ripple: bool = False, style: Style | None = None, key: str | None = None) -> Slider**

Creates a Slider component.

**Code Example:**

```python
import mesop as me

@me.stateclass
class State:
  initial_slider_value: float = 50.0
  slider_value: float = 50.0

@me.page(path="/slider")
def app():
  state = me.state(State)
  with me.box(style=me.Style(display="flex", flex_direction="column")):
    me.slider(on_value_change=on_value_change, value=state.initial_slider_value)
    me.text(text=f"Value: {me.state(State).slider_value}")

def on_value_change(event: me.SliderValueChangeEvent):
  state = me.state(State)
  state.slider_value = event.value
```

**Usage Notes:**
- The `on_value_change` parameter takes a callback function that receives a `SliderValueChangeEvent` object containing the new value.
- The `value` parameter sets the initial value of the slider.

**Warnings:**
! The `on_value_change` parameter is required. If not provided, the slider will not update its value.
```

```
[Table]
Renders an Angular Material table component from a Pandas data frame.

Key Concepts:
• **TableClickEvent:** Event triggered when a table cell is clicked, containing information about the clicked cell.

API:
table(data_frame: Any, on_click: Callable[[TableClickEvent], Any] | None = None, header: TableHeader | None = None, columns: dict[str, TableColumn] | None = None) -> None
  Creates a table from the provided Pandas data frame.

Code Example:
```python
import pandas as pd
import mesop as me

df = pd.DataFrame({"col1": [1, 2, 3], "col2": [4, 5, 6]})

@me.page(path="/table")
def app():
  me.table(df)
```

Usage Notes:
- The `on_click` parameter accepts a callable that takes a `TableClickEvent` object as input.
- The `header` and `columns` parameters allow for configuring specific columns or the entire header to be sticky.

Warnings:
! The `data_frame` parameter must be a valid Pandas data frame.
```

```
Text To Image
A simple component for creating a text-to-image interface within Mesop Labs.

Key Concepts:
• Text input: User provides a text prompt.
• Image output: The component displays an image generated from the input text.
• Transform function: A user-defined function that converts text into an image URL or base64 encoding.

API:
text_to_image(transform: Callable[[str], str], title: str | None = None)
  Creates a text-to-image interface using the provided transform function.

Code Example:
```python
import mesop as me
import mesop.labs as mel

@me.page(
  security_policy=me.SecurityPolicy(
    allowed_iframe_parents=["https://google.github.io"]
  ),
  path="/text_to_image",
  title="Text to Image Example",
)
def app():
  mel.text_to_image(
    generate_image,
    title="Text to Image Example",
  )

def generate_image(prompt: str):
  return "https://www.google.com/logos/doodles/2024/earth-day-2024-6753651837110453-2xa.gif"
```

Usage Notes:
- The `transform` function is responsible for processing the text input and generating an image URL or base64 encoded image.

Warnings:
! The `transform` function must return a valid image URL or base64 encoded image string.
```

```
[TEXT_TO_TEXT]
A component that takes user inputted text and returns transformed text using a provided transform function.

Key Concepts:
• Transform Function: A function that takes a string input and returns or yields a string output.
• Text Input: The user-provided text for transformation.
• Text Output: The transformed text output.
• Transform Mode: Specifies how the output should be updated when yielding an output using a generator ("append" or "replace").

API:
text_to_text(transform: Callable[[str], Generator[str, None, None] | str], title: str | None = None, transform_mode: Literal['append', 'replace'] = 'append')
  Creates a simple UI with text input and output fields, processing input with the provided transform function.

Code Example:
```python
import mesop as me
import mesop.labs as mel

@me.page(
  security_policy=me.SecurityPolicy(
    allowed_iframe_parents=["https://google.github.io"]
  ),
  path="/text_to_text",
  title="Text to Text Example",
)
def app():
  mel.text_to_text(
    upper_case_stream,
    title="Text to Text Example",
  )

def upper_case_stream(s: str):
  return "Echo: " + s
```

Usage Notes:
- The transform function can return a string or yield a sequence of strings.
- The transform mode determines how the output is updated: "append" concatenates to the output, "replace" overwrites it.

Warnings:
! The `text_io` function is deprecated, use `text_to_text` instead.
```

```
Text
Displays text as-is. Use Markdown component for Markdown text.

Key Concepts:
• text component
• typography levels

API:
me.text(text: str | None, type: Literal['headline-1', 'headline-2', 'headline-3', 'headline-4', 'headline-5', 'headline-6', 'subtitle-1', 'subtitle-2', 'body-1', 'body-2', 'caption', 'button'] | None, style: Style | None, key: str | None) -> None
  Creates a text component.

Code Example:
```python
me.text(text="Hello, world!", type="headline-1")
```

Usage Notes:
- Use `type` parameter to specify typography level.
- Use `style` parameter to apply inline styles.

Warnings:
! For Markdown text, use the Markdown component.
```

```
## Textarea

Textarea component for long text inputs, based on Angular Material's input component for `<textarea>`.

**Key Concepts:**

• `InputBlurEvent`: Represents a blur event when the user loses focus of an input.
• `InputEvent`: Represents a user input event.

**API:**

**`textarea`**

```python
textarea(
  label: str = '',
  on_blur: Callable[[InputBlurEvent], Any] | None = None,
  on_input: Callable[[InputEvent], Any] | None = None,
  autosize: bool = False,
  min_rows: int | None = None,
  max_rows: int | None = None,
  rows: int = 5,
  appearance: Literal['fill', 'outline'] = 'fill',
  style: Style | None = None,
  disabled: bool = False,
  placeholder: str = '',
  required: bool = False,
  value: str = '',
  readonly: bool = False,
  hide_required_marker: bool = False,
  color: Literal['primary', 'accent', 'warn'] = 'primary',
  float_label: Literal['always', 'auto'] = 'auto',
  subscript_sizing: Literal['fixed', 'dynamic'] = 'fixed',
  hint_label: str = '',
  key: str | None = None
) -> Textarea
```

Creates a Textarea component.

**`native_textarea`**

```python
native_textarea(
  on_blur: Callable[[InputBlurEvent], Any] | None = None,
  on_input: Callable[[InputEvent], Any] | None = None,
  autosize: bool = False,
  min_rows: int | None = None,
  max_rows: int | None = None,
  style: Style | None = None,
  disabled: bool = False,
  placeholder: str = '',
  value: str = '',
  readonly: bool = False,
  key: str | None = None
) -> Textarea
```

Creates a native browser Textarea component.

**Code Example:**

```python
@me.page(path="/textarea")
def app():
  s = me.state(State)
  me.textarea(label="Basic input", on_blur=on_blur)
  me.text(text=s.input)
```

**Usage Notes:**

- Use `on_blur` instead of `on_input` for performance reasons.
- `autosize` will adjust the height up to `max_rows`.

**Warnings:**

! `on_input` can cause performance issues. Use `on_blur` instead.
```

```
[Tooltip]
A composite component that displays a tooltip message on hover or focus.

Key Concepts:
• Tooltip positioning: Control tooltip location relative to the target element.
• Visibility control: Configure delays for tooltip appearance and disappearance.

API:
tooltip(key: str | None = None, position: Literal['left', 'right', 'above', 'below', 'before', 'after'] = 'left', position_at_origin: bool = False, disabled: bool = False, show_delay_ms: int = 0, hide_delay_ms: int = 0, message: str = '') -> Tooltip
  Creates a Tooltip component.

Code Example:
```python
import mesop as me

@me.page(
  security_policy=me.SecurityPolicy(
    allowed_iframe_parents=["https://google.github.io"]
  ),
  path="/tooltip",
)
def app():
  with me.tooltip(message="Tooltip message"):
    me.text(text="Hello, World")
```

Usage Notes:
- Use the `position` parameter to adjust the tooltip's location.
- Control the `show_delay_ms` and `hide_delay_ms` for customized tooltip appearance timing.

Warnings:
! The `position_at_origin` parameter is experimental and may change in future versions.
```

```
[Uploader]
The `uploader` component creates an input element that allows users to upload files, providing a custom UI that integrates well with Angular Material Components.

Key Concepts:
• `me.UploadedFile`: Represents an uploaded file, containing its contents and metadata.
• `me.UploadEvent`: An event triggered when a file is successfully uploaded.

API:
me.uploader(label: str, accepted_file_types: Sequence[str] | None = None, key: str | None = None, on_upload: Callable[[UploadEvent], Any] | None = None, type: Literal['raised', 'flat', 'stroked'] | None = None, color: Literal['primary', 'accent', 'warn'] | None = None, disable_ripple: bool = False, disabled: bool = False, style: Style | None = None) -> None
  Creates an uploader component.

Code Example:
```python
import mesop as me

@me.page(path="/uploader")
def app():
  with me.box(style=me.Style(padding=me.Padding.all(15))):
    me.uploader(
      label="Upload Image",
      accepted_file_types=["image/jpeg", "image/png"],
      on_upload=handle_upload,
    )

def handle_upload(event: me.UploadEvent):
  print(f"File name: {event.file.name}")
  print(f"File size: {event.file.size}")
  print(f"File type: {event.file.mime_type}")

```

Usage Notes:
- Use `accepted_file_types` to restrict the types of files that can be uploaded.
- The `on_upload` handler receives an `UploadEvent` object, which provides access to the uploaded file through `event.file`.

Warnings:
! Ensure the `base64` module is imported before using the `_convert_contents_data_url` function.
```

```
[Video]
Displays a browser's native video element.

Key Concepts:
• Video Element
• Native Video Controls

API:
video(src: str, style: Style | None = None) -> Video
  Creates a video.

Code Example:
```python
@me.page(
  security_policy=me.SecurityPolicy(
    allowed_iframe_parents=["https://google.github.io"]
  ),
  path="/video",
)
def app():
  me.video(
    src="https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm",
    style=me.Style(height=300, width=300),
  )
```

Usage Notes:
- The `src` parameter specifies the URL of the video source.
- The `style` parameter can be used to adjust the video's height and width.

Warnings:
! Ensure that the video source is accessible and compatible with the browser.
```

```
## Mesop

Mesop is a framework for building web applications with Python. It allows for creating interactive user interfaces by defining components, managing state, and handling events.

**Key Concepts:**

* **Components:** Building blocks of a Mesop application, representing elements displayed on the web page.
* **State:** Represents the application's data and is unique to each browser session.
* **Event Handlers:** Functions triggered by user interactions with components, used to update state.

**API:**

* **`mesop.page(path)`:** Decorator to mark a function as a root component for a specific path.
* **`mesop.stateclass`:** Decorator to define a class representing the application state.
* **`mesop.state(StateClass)`:** Retrieves the instance of the state class for the current session.
* **`mesop.text(content)`:** Creates a text component.
* **`mesop.button(label, on_click)`:** Creates a button component with an optional event handler.
* **`mesop.ClickEvent`:** Event type representing a click event.

**Code Example:**

```python
import mesop as me

@me.stateclass
class State:
  clicks: int = 0

def button_click(event: me.ClickEvent):
  state = me.state(State)
  state.clicks += 1

@me.page(path="/counter")
def main():
  state = me.state(State)
  me.text(f"Clicks: {state.clicks}")
  me.button("Increment", on_click=button_click)
```

**Usage Notes:**

* Import Mesop using `import mesop as me`.
* Components are Python functions.
* State mutations should only be done within event handlers.
* Use f-strings for dynamic rendering in components.

**Warnings:**

* State classes must be serializable.
* It's unsafe to mutate state directly inside a component function.
```

```
Mesop
Mesop is a Python library for building interactive web applications. It uses declarative programming and a component-based architecture to simplify front-end development.

Key Concepts:
• State: A Python class that holds the application's data.
• Page: A function that defines the UI of a specific page in the application.
• Component: A function that renders a reusable UI element.
• Style: A dictionary that defines the visual appearance of a component.

API:
me.stateclass(cls) -> Class
  Decorates a Python class to make it a Mesop state class.
me.page(path: str) -> Callable
  Decorates a function to define a page in the application.
me.box(style: me.Style, key: str = None, on_click: Callable = None) -> ContextManager
  Creates a container element.
me.text(content: str, style: me.Style = None) -> None
  Renders text content.
me.viewport_size() -> Dict[str, int]
  Returns the current viewport size.

Code Example:
```python
import mesop as me

@me.stateclass
class State:
  input: str = ""

@me.page(path="/")
def page():
  with me.box():
    me.text("Hello, Mesop!")

me.run(State, page)
```

Usage Notes:
- Use `me.state(State)` to access the application state within a component.
- Use `yield` in event handlers to allow Mesop to update the UI after asynchronous operations.

Warnings:
! `me.run()` must be called at the end of the application to start the Mesop server.
```

```
Event Handlers
Event handlers allow you to respond to user interactions by writing Python functions called by Mesop when specific events occur.

Key Concepts:
• Event Handler: A Python function that executes when a user interacts with a component.
• Event: An action that triggers an event handler, such as a button click or input change.
• State: A data structure used to store and manage application state.

API:
on_click(event: me.ClickEvent)
  Handles a button click event.

Code Example:
```python
def counter():
    me.button("Increment", on_click=on_click)

def on_click(event: me.ClickEvent):
    state = me.state(State)
    state.count += 1

@me.stateclass
class State:
    count: int = 0
```

Usage Notes:
- Event handlers are serialized and sent to the client for efficient handling.
- Mesop utilizes a stateless architecture, requiring event handlers to be stable across different servers.

Warnings:
! Avoid using closure variables in event handlers to prevent potential conflicts.
```

```
Mesop Interactivity
Explains advanced interactivity patterns for dealing with common use cases such as slow API calls and streaming.

Key Concepts:
• State Management:  Leverages Mesop's state management system for UI updates and responsiveness.
• Generator Functions: Used to control rendering flow and update UI incrementally.
• Asynchronous Operations: Supports concurrent execution of long-running tasks for better performance.

API:
mesop.state(StateClass) -> StateObject
  Returns an object representing the current state of the application.

Code Example:
```python
import mesop as me

@me.stateclass
class State:
  data: str
  is_loading: bool

def button_click(event: me.ClickEvent):
  state = me.state(State)
  state.is_loading = True
  yield
  # ...perform API call...
  state.data = ...
  state.is_loading = False
  yield
```

Usage Notes:
- Use `yield` statements within event handlers to control rendering and update the UI incrementally.
- For asynchronous operations, utilize Python's `async` and `await` keywords.

Warnings:
!  Avoid unnecessary setting of input values to prevent race conditions with user input.
```

```
Mesop Layouts
Mesop offers a flexible layout system based on the Box component and the Style API, providing wrappers around CSS layout models for creating custom layouts. Common layouts include rows, columns, and grids.

Key Concepts:
• Box: A fundamental component for creating layouts.
• Style API: Provides Pythonic access to CSS styling attributes.
• Rows and Columns: Arrange components horizontally or vertically using the `flex` display.
• Grids: Create more complex layouts using a grid system.

API:
me.box(style=me.Style(display="flex", flex_direction="row")):
  Creates a horizontal row layout.

Code Example:
```python
def row():
  with me.box(style=me.Style(display="flex", flex_direction="row")):
    me.text("Left")
    me.text("Right")
```

Usage Notes:
- Use `justify_content` to control horizontal alignment within rows.
- Use `align_items` to control vertical alignment within rows.
- Use `grid_template_columns` and `grid_template_rows` to define grid layouts.

Warnings:
! For responsive layouts, adjust layout configurations based on viewport size.
```

```
Mesop Multi-Page Applications

A Mesop application can be split into multiple pages for better organization and user experience.

Key Concepts:
• **Page:** A distinct section of a Mesop application with its own unique content and functionality.
• **Navigation:** The process of transitioning between pages in a multi-page application.

API:
@me.page(path: str)
  Decorator to define a page within the application.
  `path` (str): Unique path for the page.

Code Example:
```python
import mesop as me

@me.page(path="/1")
def page1():
    me.text("page 1")

@me.page(path="/2")
def page2():
    me.text("page 2")
```

Usage Notes:
- Pages are defined using the `@me.page` decorator.
- Each page should have a unique path for navigation.

API:
me.navigate(path: str)
  Function to navigate to another page within the application.
  `path` (str): Path of the page to navigate to.

Code Example:
```python
import mesop as me

def on_click(e: me.ClickEvent):
  me.navigate("/multi_page_nav/page_2")

@me.page(path="/multi_page_nav")
def main_page():
  me.button("Navigate to Page 2", on_click=on_click)
```

Usage Notes:
- Use `me.navigate` to trigger navigation from one page to another.
- The `path` argument should match the path defined for the target page.

Warnings:
! State objects can be shared across pages, allowing data persistence between them.
```


```
State Management
Manages user session state using a minimalist dependency injection system.

Key Concepts:
• **State Class:** A dataclass decorated with `@me.stateclass` that holds session state.
• **State Instance:** Retrieved using `me.state(StateClass)` within component functions.
• **Immutable Default Values:** Required for state classes to prevent state leakage across sessions.
• **Default Factories:** Use `field(default_factory=lambda: ...)` for mutable default values.

API:
`me.stateclass`
  Decorates a class to make it a state class.

`me.state(StateClass)`
  Returns an instance of the state class for the current session.

Code Example:
```python
from dataclasses import field
import mesop as me

@me.stateclass
class State:
  val: str = "Initial Value"
  items: list[str] = field(default_factory=list)

@me.page()
def page():
  state = me.state(State)
  me.text(state.val)
  me.button(onclick=lambda e: state.items.append("Item"))
```

Usage Notes:
- State classes must be serializable.
- Multiple state classes can be used for different pages or components.
- Nested state classes are supported.

Warnings:
! Avoid mutable default values in state classes.
! Ensure all nested classes are serializable.
```

```
[THEMING]
Mesop supports theming, allowing applications to switch between light and dark theme modes.

Key Concepts:
• Theme Mode: "system", "light", or "dark".
• Theme Density: Controls visual density of Material components. Ranges from 0 (least dense) to -4 (most dense).

API:
me.set_theme_density(density: Literal[0, -1, -2, -3, -4])
  Sets the theme density for the application.

me.set_theme_mode(theme_mode: Literal["system", "light", "dark"])
  Sets the theme mode for the application.

me.theme_brightness() -> Literal["light", "dark"]
  Returns the current theme brightness.

me.theme_var(var: ThemeVar) -> str
  Returns the CSS variable for a given theme variable.

Code Example:
```python
# Toggle theme based on click event
def toggle_theme(e: me.ClickEvent):
    if me.theme_brightness() == "light":
        me.set_theme_mode("dark")
    else:
        me.set_theme_mode("light")

# Set theme mode to "system" on page load
def on_load(e: me.LoadEvent):
  me.set_theme_mode("system")

# Use theme variable for background color
def container():
  me.box(style=me.Style(background=me.theme_var("background")))
```

Usage Notes:
- The `me.theme_var()` function provides access to Material Design color variables for consistent styling.
- Use the `on_load` event handler to set the initial theme mode.

Warnings:
! Mesop currently defaults to light theme mode but will eventually default to system theme mode.
```
