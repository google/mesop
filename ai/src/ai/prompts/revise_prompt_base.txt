Your task is to modify a Mesop app given the code and a description.

Make sure to remember these rules when making modifications:
1. For the @me.page decorator, keep it the same as the original *unless* you need to modify on_load.
2. Event handler functions cannot use lambdas. You must use functions.
3. Event handler functions only pass in the event type. They do not accept extra parameters.
4. For padding, make sure to use the the `me.Padding` object rather than a string or int.
5. For margin, make sure to use the the `me.Margin` object rather than a string or int.
6. For border, make sure to use the the `me.Border` and `me.BorderSide` objects rather than a string.
7. For buttons, prefer using type="flat", especially if it is the primary button.
8. If you use any symbol outside of Mesop, do *NOT* forget to import it.

When you are defining a state class (i.e. any class with @me.stateclass), I want you to follow these rules:
- Do NOT define a default value for any of properties. Mesop will automatically define a default value for you.

- Make the apps beautiful and visually pleasing:
1. Use rounded corners (border_radius) for components to create a modern look
2. Apply consistent spacing using Padding and Margin
3. Utilize theme variables (me.theme_var) for colors to ensure a cohesive design
4. Implement a clear visual hierarchy with appropriate typography styles
5. Use the Box component to create structured layouts
6. Include subtle animations or transitions for improved user experience
7. Ensure the design is responsive and adapts well to different screen sizes
8. Incorporate appropriate icons to enhance visual communication
9. Use contrasting colors for important elements to draw attention
10. Implement proper alignment and grouping of related elements
Remember to follow Mesop best practices and use only the components and styles explicitly mentioned in the documentation.

I want the output to be Python code using the following diff format with separate chunks for original and updated code.
Existing app code:
```
[APP_CODE]
```

User instructions:
[USER_INSTRUCTIONS]

Diff output:
<<<<<<< ORIGINAL
[ORIGINAL_CODE]
=======
[UPDATED_CODE]
>>>>>>> UPDATED

Here's an example:

Existing app code:
```
import mesop as me
import mesop.labs as mel

@me.stateclass
class State:
    count: int = 0

def increment(e: me.ClickEvent):
    state = me.state(State)
    state.count += 1

@me.page()
def counter_page():
    state = me.state(State)
    me.text(f"Count: {state.count}")
    me.button("Increment", on_click=increment, type="flat")
```

User instructions:
Add a decrement button

Diff output:
<<<<<<< ORIGINAL
@me.page()
def counter_page():
    state = me.state(State)
    me.text(f"Count: {state.count}")
    me.button("Increment", on_click=increment, type="flat")
=======
def decrement(e: me.ClickEvent):
    state = me.state(State)
    state.count -= 1

@me.page()
def counter_page():
    state = me.state(State)
    me.text(f"Count: {state.count}")
    me.button("Increment", on_click=increment, type="flat")
    me.button("Decrement", on_click=decrement, type="flat")
>>>>>>> UPDATED

Here's another example when the original app code is empty:

Existing app code:
```
```

User instructions:
Create a counter page with increment and decrement

Diff output:
<<<<<<< ORIGINAL
=======
def decrement(e: me.ClickEvent):
    state = me.state(State)
    state.count -= 1

@me.page()
def counter_page():
    state = me.state(State)
    me.text(f"Count: {state.count}")
    me.button("Increment", on_click=increment, type="flat")
    me.button("Decrement", on_click=decrement, type="flat")
>>>>>>> UPDATED

IF you see "# <--- EDIT HERE" in the code, this means you should focus your edits in that section.


Here's an example:

Existing app code:
```
import mesop as me

@me.page()
def page():
    me.text(f"Hello") # <--- EDIT HERE
    me.button("Increment")
```

User instructions:
change the color

Diff output:
<<<<<<< ORIGINAL
@me.page()
def page():
    me.text(f"Hello")
    me.button("Increment")
=======
@me.page()
def page():
    me.text(f"Hello", style=me.Style(color="blue"))
    me.button("Increment")
>>>>>>> UPDATED

OK, now that I've shown you an example, let's do this for real.
