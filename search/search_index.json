{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Rapidly build AI apps in Python      Create web apps without the complexity of frontend development.     Used at Google for rapid AI app development.    Get started View showcase        Create your AI chat app in minutes                     Open in new tab            Python-native      Write your UI in idiomatic Python         With Mesop, you can leverage your existing Python expertise to build UIs effortlessly. No new languages to learn - just write clean, idiomatic Python using familiar constructs like functions, loops, and conditionals.    State managementControl flowStreaming UIComposable <pre><code>@me.stateclass\nclass State:\n  val: str\n\n@me.page()\ndef page():\n    state = me.state(State)\n    me.text(state.val)\n</code></pre> <pre><code>@me.stateclass\nclass State:\n  is_loaded: bool\n\n@me.page()\ndef page():\n    if me.state(State).is_loaded:\n      me.text(\"Loaded\")\n    else:\n      me.progress_spinner()\n</code></pre> <pre><code>from time import sleep\n\nimport mesop as me\n\n\ndef generate_str():\n  yield \"foo\"\n  sleep(1)\n  yield \"bar\"\n\n\n@me.stateclass\nclass State:\n  string: str = \"\"\n\n\ndef button_click(action: me.ClickEvent):\n  state = me.state(State)\n  for val in generate_str():\n    state.string += val\n    yield\n\n\n@me.page(path=\"/streaming\")\ndef main():\n  state = me.state(State)\n  me.button(\"click\", on_click=button_click)\n  me.text(text=f\"{state.string}\")\n</code></pre> <pre><code>@me.content_component\ndef scaffold(url: str):\n  with me.box():\n    menu(url=url)\n    me.slot()\n\n@me.component\ndef menu(url: str):\n  ...\n\ndef page1():\n  with scaffold(url=\"/page1\"):\n    some_content(...)\n</code></pre> Modern UI principles      Declarative UI that's easy to understand         Mesop streamlines UI development with a declarative approach. Build expressive, maintainable interfaces using battle-tested patterns in Python. Say goodbye to complex imperative logic and hello to intuitive, clean code.    <pre><code>@me.stateclass\nclass State:\n    image_data: str\n    detections: list[Detection]\n\n\n@me.page()\ndef object_detector():\n    state = me.state(State)\n\n    me.text(\"Real-time Object Detection\", type=\"headline-4\")\n    me.uploader(label=\"Upload an image\", on_upload=on_image_upload)\n\n    if state.image_data:\n        me.image(src=f\"data:image/jpeg;base64,{state.image_data}\")\n\n    if state.detections:\n        me.text(\"Detected Objects:\", type=\"headline-5\")\n        for detection in state.detections:\n            detection_component(detection)\n\ndef detection_component(detection):\n    me.text(f\"{detection.obj}: {detection.confidence:.2f}\")\n\ndef on_image_upload(e: me.UploadEvent):\n    state = me.state(State)\n    state.image_data = base64.b64encode(e.file.read()).decode()\n    state.detections = detect_objects(e.file)\n</code></pre> Building blocks      Jumpstart with ready-to-use components         Mesop provides a versatile range of 30 components, from low-level building blocks to high-level, AI-focused components. This flexibility lets you rapidly prototype ML apps or build custom UIs, all within a single framework that adapts to your project's use case.             AI components       e.g. chat, text to image        Form components       e,g. input, checkbox, radio        Data display components       e,g. table, plot Build anything      Build any user interface you can imagine     With Mesop, you can build virtually any web-based user interface or application you can imagine. From quick prototypes to enterprise tools, Mesop provides the customizability to bring your ideas to life.    Extensible    Seamlessly integrate JS with web components         Get the best of both worlds with Mesop web components. Leverage Python's simplicity for core logic, while accessing the vast ecosystem of JS libraries    counter_component.pycounter_component.js <pre><code>from typing import Any, Callable\n\nimport mesop as me\n\n\n@me.web_component(path=\"./counter_component.js\")\ndef counter_component(\n  *,\n  value: int,\n  on_decrement: Callable[[me.WebEvent], Any],\n  key: str | None = None,\n):\n  return me.insert_web_component(\n    name=\"quickstart-counter-component\",\n    key=key,\n    events={\n      \"decrementEvent\": on_decrement,\n    },\n    properties={\n      \"value\": value,\n    },\n  )\n</code></pre> <pre><code>import {\n  LitElement,\n  html,\n} from 'https://cdn.jsdelivr.net/gh/lit/dist@3/core/lit-core.min.js';\n\nclass CounterComponent extends LitElement {\n  static properties = {\n    value: {type: Number},\n    decrementEvent: {type: String},\n  };\n\n  constructor() {\n    super();\n    this.value = 0;\n    this.decrementEvent = '';\n  }\n\n  render() {\n    return html`\n      &lt;div class=\"container\"&gt;\n        &lt;span&gt;Value: ${this.value}&lt;/span&gt;\n        &lt;button id=\"decrement-btn\" @click=\"${this._onDecrement}\"&gt;\n          Decrement\n        &lt;/button&gt;\n      &lt;/div&gt;\n    `;\n  }\n\n  _onDecrement() {\n    this.dispatchEvent(\n      new MesopEvent(this.decrementEvent, {\n        value: this.value - 1,\n      }),\n    );\n  }\n}\n\ncustomElements.define('quickstart-counter-component', CounterComponent);\n</code></pre> Simple deployment      Deploy your app and share in minutes     Mesop streamlines cloud deployment, enabling you to share your AI application with the world in minutes. With step-by-step guides for deploying to Google Cloud Run or any cloud service that takes a container, you can go from local development to production-ready deployment without wrestling with complex server setups.         Google Cloud Run       Free for small apps Developer experience      Delightful developer experience     Mesop streamlines app development with features like hot reload and strong IDE support with static types, eliminating friction and boosting productivity.         Instant hot reload             IDE support with static types      Community      See what others are saying      Join developers around the world who are building AI apps in Mesop.    <p>           is this the thing that will finally save me from ever learning front           end?https://t.co/eDgY0AfG6U </p>         \u2014 xlr8harder (@xlr8harder)         June 6, 2024 <p>           i hate writing frontend code, but can\u2019t resist a sleek UI. just           tried Google\u2019s quietly released Mesop\u2014what a find! no frontend fuss,           just python. if you value your sanity and good design,           you should def try it. gives a balance between streamlit and           gradiomesop docs :\u2026           pic.twitter.com/SmBAH5Leri </p>         \u2014 Sanchay Thalnerkar (@7anchay)         June 23, 2024 <p>           New Python-based UI framework in town - have you tried Mesop from           Google?I gave it a spin, here's what I found out:\ud83d\udccc           Provides a unique approach to building web hashtag#UIs in           hashtag#Python with component-based architecture for customized UIs           by taking inspiration from\u2026         </p>         \u2014 Harshit Tyagi (@dswharshit)         June 11, 2024"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This is not an officially supported Google product.</p>"},{"location":"comparison/","title":"Comparison with Other Python UI Frameworks","text":"<p>This page aims to provide an objective comparison between Mesop and other popular Python-based web application frameworks, specifically Streamlit and Gradio. This is a difficult doc to write but we feel that it's important to explain the differences as this is frequently asked.</p> <p>While we believe Mesop offers a unique philosophy for building UIs, we strive to be fair and accurate in highlighting the strengths of each framework.</p> <p>Because this is a fast-moving space, some of the information may be out of date. Please file an issue and let us know what we should fix.</p>"},{"location":"comparison/#streamlit","title":"Streamlit","text":"<p>Streamlit and Mesop share similar goals in terms of enabling Python developers to rapidly build web apps, particularly for AI use cases.</p> <p>However, there are some key differences:</p>"},{"location":"comparison/#execution-model","title":"Execution Model","text":"<p>Streamlit executes apps in a script-like manner where the entire app reruns on each user interaction. This enables a boilerplate-free UI development model that's easy to get started with, but requires mechanisms like caching and fragments to optimize the performance with this model.</p> <p>Mesop uses a function-based model commonly found in web frameworks where the program is executed once on server initialization and then the page and component functions are executed in each render loop. This provides regular Python execution semantics because top-level initialization code is executed exactly once.</p>"},{"location":"comparison/#styling-and-customization","title":"Styling and Customization","text":"<p>Streamlit offers pre-styled components with customization primarily through themes, prioritizing consistency and ease of use over flexibility.</p> <p>In addition to providing Material-themed components, Mesop offers a low-level Style API to configure CSS properties. Mesop provides limited theming support with dark theming and doesn't support theming to other colors.</p>"},{"location":"comparison/#components","title":"Components","text":"<p>Both Streamlit and Mesop offer a range of standard components (e.g., forms, tables, chat interfaces), with Streamlit providing a larger set of built-in components, especially for data science use cases like data visualization.</p> <p>Streamlit supports custom components rendered in iframes for isolation. It offers first-class support for React components and can accommodate other frameworks through a framework-agnostic template.</p> <p>Mesop enables creating custom web components based on open web standards, facilitating interoperability with components from different frameworks like Lit. Mesop web components are rendered in the same frame as the rest of the Mesop app which provides more flexibility but less isolation.</p> <p>Streamlit has a more established ecosystem of community-developed components, while Mesop's community and component ecosystem are still developing.</p>"},{"location":"comparison/#gradio","title":"Gradio","text":"<p>Gradio and Mesop both enable rapid ML/AI app development but with different approaches.</p> <p>Gradio has a strong focus on creating demos and interfaces for machine learning models and makes it easy to build a UI for a model. Gradio also offers a lower-level abstraction known as Blocks for more general web applications.</p> <p>Mesop, while well-suited for ML/AI use cases, is a more general-purpose framework that can be used for a wide range of web applications.</p>"},{"location":"comparison/#components_1","title":"Components","text":"<p>Gradio provides a set of pre-built components optimized for common ML inputs and outputs (e.g. image classification, text generation). This makes it fast to set up standard model interfaces. In addition to built-in components, you can create custom components in Python and JavaScript (Svelte).</p> <p>Mesop provides general-purpose UI components, which can be used for a variety of layout and UI designs. Higher-level components like the chat component are built on top of these low-level UI components. This makes it better suited for building custom interfaces, such as the demo gallery. Mesop also supports creating custom web components based on open web standards, facilitating interoperability with components from different frameworks.</p>"},{"location":"comparison/#styling-and-customization_1","title":"Styling and Customization","text":"<p>Gradio features a robust theming system with prebuilt options and extensive UI customization. It also supports custom CSS via direct string construction.</p> <p>Mesop offers a statically typed Style API for CSS properties. While it includes dark theme support, Mesop's theming capabilities are currently limited and does not allow custom color schemes.</p>"},{"location":"comparison/#state-management","title":"State management","text":"<p>Gradio uses an imperative approach to state management, coupling state with component updates. State is typically managed through function parameters and return values, which can be straightforward for simple interfaces but may become complex as applications grow.</p> <p>Mesop adopts a declarative state management approach, separating state updates from UI rendering. It uses dataclasses for state, providing type-safety and structure for complex states. This separation allows for more granular control over UI updates but may have a steeper learning curve for beginners.</p>"},{"location":"comparison/#deployment","title":"Deployment","text":"<p>Gradio makes it easy to share demos via Hugging Face Spaces. Mesop apps can also be deployed on Hugging Face Spaces, but requires a few more steps.</p>"},{"location":"comparison/#conclusion","title":"Conclusion","text":"<p>Both Streamlit and Gradio offer gentle learning curves, making it easy for Python developers to quickly build standard AI applications.</p> <p>Mesop embraces a declarative UI paradigm, which introduces additional concepts but can provide more flexibility for custom applications.</p> <p>Ultimately, the best choice depends on your specific use case, desired level of customization, and development preferences. We encourage you to explore each framework to determine which best fits your needs.</p>"},{"location":"demo/","title":"Demo \ud83c\udf10","text":"<p>hide:   - navigation   - toc</p> <p></p>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#general","title":"General","text":""},{"location":"faq/#what-kinds-of-apps-is-mesop-suited-for","title":"What kinds of apps is Mesop suited for?","text":"<p>Mesop is well-suited for ML/AI demos and internal tools because it enables developers without frontend experience to quickly build web apps. For use cases that prioritize developer experience and velocity, Mesop can be a good choice.</p> <p>Demanding consumer-facing apps, which have strict requirements in terms of performance, custom UI components, and i18n/localization would not be a good fit for Mesop and other UI frameworks may be more suitable.</p>"},{"location":"faq/#how-does-mesop-compare-to-other-python-ui-frameworks","title":"How does Mesop compare to other Python UI frameworks?","text":"<p>We have written a comparison doc to answer this question in-depth.</p>"},{"location":"faq/#is-mesop-production-ready","title":"Is Mesop production-ready?","text":"<p>Dozens of teams at Google have used Mesop to build demos and internal apps.</p> <p>Although Mesop is pre-v1, we take backwards-compatibilty seriously and avoid backwards incompatible change. This is critical to us because many teams within Google rely on Mesop and we need to not break them.</p> <p>Occasionally, we will do minor clean-up for our APIs, but we will provide warnings/deprecation notices and provide at least 1 release to migrate to the newer APIs.</p>"},{"location":"faq/#which-modules-should-i-import-from-mesop","title":"Which modules should I import from Mesop?","text":"<p>Only import from these two modules:</p> <pre><code>import mesop as me\nimport mesop.labs as mel\n</code></pre> <p>All other modules are considered internal implementation details and may change without notice in future releases.</p>"},{"location":"faq/#is-mesop-an-official-google-product","title":"Is Mesop an official Google product?","text":"<p>No, Mesop is not an official Google product and Mesop is a 20% project maintained by a small core team of Google engineers with contributions from the broader community.</p>"},{"location":"faq/#deployment","title":"Deployment","text":""},{"location":"faq/#how-do-i-share-or-deploy-my-mesop-app","title":"How do I share or deploy my Mesop app?","text":"<p>The best way to share your Mesop app is to deploy it to a cloud service. You can follow our deployment guide for step-by-step instructions to deploy to Google Cloud Run.</p> <p>Note: you should be able to deploy Mesop on any cloud service that takes a container. Please read the above deployment guide as it should be similar steps.</p>"},{"location":"goals/","title":"Goals","text":"<p>I think it's helpful to explicitly state the goals of a project because it provides clarity for not only the development team, but also developers who are evaluating Mesop amongst other options:</p> <ol> <li>Prioritize Python developer experience - Provide the best possible developer experience for Python engineers with minimal frontend experience. Traditional web UI frameworks (e.g. React) prioritize developer experience, but they are focused on web developers who are familiar with the web ecosystem (e.g. HTML, node.js, etc.).</li> <li>Rich user interactions - You should be able to build reasonably sophisticated web applications and demos (e.g. LLM chat) without building custom native components.</li> <li>Simple deployment - Make deployment simple by packaging Mesop into a container which can be deployed as a standalone server.</li> </ol>"},{"location":"goals/#examples-of-applying-these-goals","title":"Examples of applying these goals","text":"<ul> <li> <p>Web performance: This doesn't mean other goals like web performance have no weight, but we will consistently rank these goals as higher priorities. For example, we could improve performance by serving static assets via CDN, but this would complicate our deployment. For instance, we'd need to ensure that pushing a new Python server binary and JS static assets happened at the same time, or you can get version skews which can cause cryptic errors.</p> </li> <li> <p>Template vs. code: Mesop adopts the pattern of UI-as-code instead of using a separate templating language. Our belief is that writing Python code is a significantly better learning curve for our target developers. Rather than making them learn a new templating language (DSL) that they are unfamiliar with, they can write Python code which allows them idiomatic ways of expressing conditional logic and looping.</p> </li> </ul>"},{"location":"showcase/","title":"Showcase \ud83c\udf10","text":"<p>hide:   - navigation   - toc</p> <p></p>"},{"location":"api/config/","title":"Config","text":""},{"location":"api/config/#overview","title":"Overview","text":"<p>Mesop is configured at the application level using environment variables.</p>"},{"location":"api/config/#configuration-values","title":"Configuration values","text":""},{"location":"api/config/#mesop_static_folder","title":"MESOP_STATIC_FOLDER","text":"<p>NOTE: This feature will be enabled by default in the next Mesop release and set to use <code>static</code> as the default static folder. You can still set it to another directory or <code>\"\"</code> to disable the feature.</p> <p>Allows access to static files from the Mesop server.</p> <p>It is important to know that the specified folder path is relative to the current working directory where the Mesop command is run. Absolute paths are not allowed.</p> <p>Example:</p> <p>In this case, the current working directory is <code>/srv</code>, which means Mesop will make <code>/srv/static</code> the static folder.</p> <pre><code>cd /srv\nMESOP_STATIC_FOLDER=static mesop app/main.py\n</code></pre> <p>Here are some examples of valid paths. Let's assume the current working directory is <code>/srv/</code></p> <ul> <li><code>static</code> becomes <code>/srv/static</code></li> <li><code>static/</code> becomes <code>/srv/static</code></li> <li><code>static/assets</code> becomes <code>/srv/static/assets</code></li> <li><code>./static</code> becomes <code>/srv/static</code></li> <li><code>./static/</code> becomes <code>/srv/static</code></li> <li><code>./static/assets</code> becomes <code>/srv/static/assets</code></li> </ul> <p>Invalid paths will raise <code>MesopDeveloperException</code>. Here are some examples:</p> <ul> <li>Absolute paths (e.g. <code>/absolute/path</code>)</li> <li><code>.</code></li> <li><code>./</code></li> <li><code>..</code></li> <li><code>../</code></li> </ul>"},{"location":"api/config/#mesop_static_url_path","title":"MESOP_STATIC_URL_PATH","text":"<p>This is the base URL path from which files for your specified static folder will be made viewable.</p> <p>The static URL path is only recognized if <code>MESOP_STATIC_FOLDER</code> is set.</p> <p>For example, given <code>MESOP_STATIC_FOLDER=static</code> and <code>MESOP_STATIC_URL_PATH=/assets</code>, the file <code>static/js/script.js</code> can be viewable from the URL path <code>/assets/js/script.js</code>.</p> <p>Default: <code>/static</code></p>"},{"location":"api/config/#mesop_state_session_backend","title":"MESOP_STATE_SESSION_BACKEND","text":"<p>Sets the backend to use for caching state data server-side. This makes it so state does not have to be sent to the server on every request, reducing bandwidth, especially if you have large state objects.</p> <p>The backend options available at the moment are <code>memory</code>, <code>file</code>, <code>sql</code>, and <code>firestore</code>.</p>"},{"location":"api/config/#memory","title":"memory","text":"<p>Users should be careful when using the <code>memory</code> backend. Each Mesop process has their own RAM, which means cache misses will be common if each server has multiple processes and there is no session affinity. In addition, the amount of RAM must be carefully specified per instance in accordance with the expected user traffic and state size.</p> <p>The safest option for using the <code>memory</code> backend is to use a single process with a good amount of RAM. Python is not the most memory efficient, especially when saving data structures such as dicts.</p> <p>The drawback of being limited to a single process is that requests will take longer to process since only one request can be handled at a time. This is especially problematic if your application contains long running API calls.</p> <p>If session affinity is available, you can scale up multiple instances, each running single processes.</p>"},{"location":"api/config/#file","title":"file","text":"<p>Users should be careful when using the <code>file</code> backend. Each Mesop instance has their own disk, which can be shared among multiple processes. This means cache misses will be common if there are multiple instances and no session affinity.</p> <p>If session affinity is available, you can scale up multiple instances, each running multiple Mesop processes. If no session affinity is available, then you can only vertically scale a single instance.</p> <p>The bottleneck with this backend is the disk read/write performance. The amount of disk space must also be carefully specified per instance in accordance with the expected user traffic and state size.</p> <p>You will also need to specify a directory to write the state data using <code>MESOP_STATE_SESSION_BACKEND_FILE_BASE_DIR</code>.</p>"},{"location":"api/config/#sql","title":"SQL","text":"<p>NOTE: Setting up and configuring databases is out of scope of this document.</p> <p>This option uses SqlAlchemy to store Mesop state sessions in supported SQL databases, such as SQLite3 and PostgreSQL. You can also connect to hosted options, such as GCP CloudSQL.</p> <p>If you use SQLite3, you cannot use an in-memory database. It has to be a file. This option has similar pros/cons as the <code>file</code> backend. Mesop uses the default configuration for SQLite3, so the performance will not be optimized for Mesop's usage patterns. SQLite3 is OK for development purposes.</p> <p>Using a database like PostgreSQL will allow for better scalability, both vertically and horizontally, since the database is decoupled from the Mesop server.</p> <p>The drawback here is that this requires knowledge of the database you're using. At minimum, you will need to create a database and a database user with the right privileges. You will also need to create the database table, which you can create with this script. You will need to update the CONNECTION_URI and TABLE_NAME to match your database and settings. Also the database user for this script will need privileges to create tables on the target database.</p> <pre><code>from sqlalchemy import (\n  Column,\n  DateTime,\n  LargeBinary,\n  MetaData,\n  String,\n  Table,\n  create_engine,\n)\n\nCONNECTION_URI = \"your-database-connection-uri\"\n# Update to \"your-table-name\" if you've overridden `MESOP_STATE_SESSION_BACKEND_SQL_TABLE`.\nTABLE_NAME = \"mesop_state_session\"\n\ndb = create_engine(CONNECTION_URI)\nmetadata = MetaData()\ntable = Table(\n  TABLE_NAME,\n  metadata,\n  Column(\"token\", String(23), primary_key=True),\n  Column(\"states\", LargeBinary, nullable=False),\n  Column(\"created_at\", DateTime, nullable=False, index=True),\n)\n\nmetadata.create_all(db)\n</code></pre> <p>The Mesop server will raise a <code>sqlalchemy.exc.ProgrammingError</code> if there is a database configuration issue.</p> <p>By default, Mesop will use the table name <code>mesop_state_session</code>, but this can be overridden using <code>MESOP_STATE_SESSION_BACKEND_SQL_TABLE</code>.</p>"},{"location":"api/config/#gcp-firestore","title":"GCP Firestore","text":"<p>This options uses GCP Firestore to store Mesop state sessions. The <code>(default)</code> database has a free tier that can be used for for small demo applications with low traffic and moderate amounts of state data.</p> <p>Since Firestore is decoupled from your Mesop server, it allows you to scale vertically and horizontally without the considerations you'd need to make for the <code>memory</code> and <code>file</code> backends.</p> <p>In order to use Firestore, you will need a Google Cloud account with Firestore enabled. Follow the instructions for creating a Firestore in Native mode database.</p> <p>Mesop is configured to use the <code>(default)</code> Firestore only. The GCP project is determined using the Application Default Credentials (ADC) which is automatically configured for you on GCP services, such as Cloud Run.</p> <p>For local development, you can run this command:</p> <pre><code>gcloud auth application-default login\n</code></pre> <p>If you have multiple GCP projects, you may need to update the project associated with the ADC:</p> <pre><code>GCP_PROJECT=gcp-project\ngcloud config set project $GCP_PROJECT\ngcloud auth application-default set-quota-project $GCP_PROJECT\n</code></pre> <p>Mesop leverages Firestore's TTL policies to delete stale state sessions. This needs to be set up using the following command, otherwise old data will accumulate unnecessarily.</p> <pre><code>COLLECTION_NAME=collection_name\ngcloud firestore fields ttls update expiresAt \\\n  --collection-group=$COLLECTION_NAME\n</code></pre> <p>By default, Mesop will use the collection name <code>mesop_state_sessions</code>, but this can be overridden using <code>MESOP_STATE_SESSION_BACKEND_FIRESTORE_COLLECTION</code>.</p> <p>Default: <code>none</code></p>"},{"location":"api/config/#mesop_state_session_backend_file_base_dir","title":"MESOP_STATE_SESSION_BACKEND_FILE_BASE_DIR","text":"<p>This is only used when the <code>MESOP_STATE_SESSION_BACKEND</code> is set to <code>file</code>. This parameter specifies where Mesop will read/write the session state. This means the directory must be readable and writeable by the Mesop server processes.</p>"},{"location":"api/config/#mesop_state_session_backend_firestore_collection","title":"MESOP_STATE_SESSION_BACKEND_FIRESTORE_COLLECTION","text":"<p>This is only used when the <code>MESOP_STATE_SESSION_BACKEND</code> is set to <code>firestore</code>. This parameter specifies which Firestore collection that Mesop will write state sessions to.</p> <p>Default: <code>mesop_state_sessions</code></p>"},{"location":"api/config/#mesop_state_session_backend_sql_connection_uri","title":"MESOP_STATE_SESSION_BACKEND_SQL_CONNECTION_URI","text":"<p>This is only used when the <code>MESOP_STATE_SESSION_BACKEND</code> is set to <code>sql</code>. This parameter specifies the database connection string. See the SqlAlchemy docs for more details.</p> <p>Default: <code>mesop_state_session</code></p>"},{"location":"api/config/#mesop_state_session_backend_sql_table","title":"MESOP_STATE_SESSION_BACKEND_SQL_TABLE","text":"<p>This is only used when the <code>MESOP_STATE_SESSION_BACKEND</code> is set to <code>sql</code>. This parameter specifies which SQL database table that Mesop will write state sessions to.</p> <p>Default: <code>mesop_state_session</code></p>"},{"location":"api/config/#mesop_prod_unredacted_errors","title":"MESOP_PROD_UNREDACTED_ERRORS","text":"<p>Mesop, by default, only shows unredacted errors in debug mode.</p> <p>If you run in prod mode, the errors are redacted (internal errors are given a generic message \"Sorry, there was an error. Please contact the developer.\") and the tracebacks are not shown.</p> <p>If you want to show unredacted errors, including in prod mode, set this to <code>true</code>. This may be useful if you're deploying a Mesop app internally and want to get error details even in production.</p>"},{"location":"api/config/#experimental-configuration-values","title":"Experimental configuration values","text":"<p>These configuration values are experimental and are subject to breaking change, including removal in future releases.</p>"},{"location":"api/config/#mesop_concurrent_updates_enabled-deprecated","title":"MESOP_CONCURRENT_UPDATES_ENABLED (DEPRECATED)","text":"<p>Deprecated experimental feature</p> <p>This experimental feature has been removed in Mesop v1. Use <code>MESOP_WEBSOCKETS_ENABLED</code> instead.</p> <p>Allows concurrent updates to state in the same session. If this is not updated, then updates are queued and processed sequentially.</p> <p>By default, this is not enabled. You can enable this by setting it to <code>true</code>.</p>"},{"location":"api/config/#mesop_websockets_enabled","title":"MESOP_WEBSOCKETS_ENABLED","text":"<p>Experimental feature</p> <p>This is an experimental feature and is subject to breaking change. Please follow https://github.com/mesop-dev/mesop/issues/1028 for updates.</p> <p>This uses WebSockets instead of HTTP Server-Sent Events (SSE) as the transport protocol for UI updates. Using WebSockets also changes the Mesop server architecture to be stateful (e.g. meaning a server restart or routing to a different server instance means the user will lose state). If you enable this feature, then you should ensure the following:</p> <ul> <li>Either a single server instance is used or you route a particular user to the same server for a given session (i.e. session affinity).</li> <li>Either ensure user state is not critical (e.g. it's OK if it's cleared out due to server restart, which could happen at any time on typical cloud infrastructure) or is persisted somewhere (e.g. written to a database).</li> </ul> <p>Enabling this also allows user events to be handled concurrently, which is particularly useful supporting interactivity for long-running event handlers.</p> <p>By default, this is not enabled. You can enable this by setting it to <code>true</code>.</p>"},{"location":"api/config/#mesop_app_base_path","title":"MESOP_APP_BASE_PATH","text":"<p>This is the base path used to resolve other paths, particularly for serving static files. Must be an absolute path. This is rarely needed because the default of using the current working directory is usually sufficient.</p>"},{"location":"api/config/#mesop_http_cache_js_bundle","title":"MESOP_HTTP_CACHE_JS_BUNDLE","text":"<p>Enables HTTP caching for the main JS bundle (i.e. prod_bundle.js) served by Mesop. This minimizes unnecessary HTTP requests for the JS bundle.</p> <p>Note: this does not cache other JS files like web components, which are configured separately (see below).</p>"},{"location":"api/config/#mesop_web_components_http_cache_key","title":"MESOP_WEB_COMPONENTS_HTTP_CACHE_KEY","text":"<p>Enables HTTP caching for the web component entry point modules.</p> <p>Note: this does not cache JS files imported by the web component entry modules.</p>"},{"location":"api/config/#usage-examples","title":"Usage Examples","text":""},{"location":"api/config/#one-liner","title":"One-liner","text":"<p>You can specify the environment variables before the mesop command.</p> <pre><code>MESOP_STATE_SESSION_BACKEND=memory mesop main.py\n</code></pre>"},{"location":"api/config/#use-a-env-file","title":"Use a .env file","text":"<p>Mesop also supports <code>.env</code> files. This is nice since you don't have to keep setting the environment variables. In addition, the variables are only set when the application is run.</p> .env<pre><code>MESOP_STATE_SESSION_BACKEND=file\nMESOP_STATE_SESSION_BACKEND_FILE_BASE_DIR=/tmp/mesop-sessions\n</code></pre> <p>When you run your Mesop app, the .env file will then be read.</p> <pre><code>mesop main.py\n</code></pre>"},{"location":"api/page/","title":"Page API","text":""},{"location":"api/page/#overview","title":"Overview","text":"<p>Pages allow you to build multi-page applications by decorating Python functions with <code>me.page</code>. To learn more, read the see multi-pages guide.</p>"},{"location":"api/page/#examples","title":"Examples","text":""},{"location":"api/page/#simple-1-page-setup","title":"Simple, 1-page setup","text":"<p>To create a simple Mesop app, you can use <code>me.page()</code> like this:</p> <pre><code>import mesop as me\n\n@me.page()\ndef foo():\n    me.text(\"bar\")\n</code></pre> <p>NOTE: If you do not provide a <code>path</code> argument, then it defaults to the root path <code>\"/\"</code>.</p>"},{"location":"api/page/#explicit-1-page-setup","title":"Explicit 1-page setup","text":"<p>This is the same as the above example which explicitly sets the route to <code>\"/\"</code>.</p> <pre><code>import mesop as me\n\n@me.page(path=\"/\")\ndef foo():\n    me.text(\"bar\")\n</code></pre>"},{"location":"api/page/#api","title":"API","text":""},{"location":"api/page/#mesop.features.page.page","title":"<code>page</code>","text":"<p>Defines a page in a Mesop application.</p> <p>This function is used as a decorator to register a function as a page in a Mesop app.</p> PARAMETER DESCRIPTION <code>path</code> <p>The URL path for the page. Defaults to \"/\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>title</code> <p>The title of the page. If None, a default title is generated.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>stylesheets</code> <p>List of stylesheet URLs to load.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>security_policy</code> <p>The security policy for the page. If None, a default strict security policy is used.</p> <p> TYPE: <code>SecurityPolicy | None</code> DEFAULT: <code>None</code> </p> <code>on_load</code> <p>An optional event handler to be called when the page is loaded.</p> <p> TYPE: <code>OnLoadHandler | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Callable[[Callable[[], None]], Callable[[], None]]</code> <p>A decorator that registers the decorated function as a page.</p>"},{"location":"api/page/#mesop.security.security_policy.SecurityPolicy","title":"<code>SecurityPolicy</code>  <code>dataclass</code>","text":"<p>A class to represent the security policy.</p> ATTRIBUTE DESCRIPTION <code>cross_origin_opener_policy</code> <p>See MDN.</p> <p> TYPE: <code>Literal['unsafe-none', 'same-origin-allow-popups', 'same-origin', 'noopener-allow-popups']</code> </p> <code>allowed_iframe_parents</code> <p>A list of allowed iframe parents.</p> <p> TYPE: <code>list[str]</code> </p> <code>allowed_connect_srcs</code> <p>A list of sites you can connect to, see MDN.</p> <p> TYPE: <code>list[str]</code> </p> <code>allowed_script_srcs</code> <p>A list of sites you can load scripts from, see MDN.</p> <p> TYPE: <code>list[str]</code> </p> <code>allowed_worker_srcs.</code> <p>//developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/worker-src).</p> <p> TYPE: <code>A list of sites you can load workers from, see [MDN](https</code> </p> <code>allowed_trusted_types</code> <p>A list of trusted type policy names, see MDN.</p> <p> TYPE: <code>list[str]</code> </p> <code>allowed_font_srcs</code> <p>A list of sites you can load fonts from, see MDN.</p> <p> TYPE: <code>list[str]</code> </p> <code>dangerously_disable_trusted_types</code> <p>A flag to disable trusted types. Highly recommended to not disable trusted types because it's an important web security feature!</p> <p> TYPE: <code>bool</code> </p>"},{"location":"api/page/#mesop.events.events.LoadEvent","title":"<code>LoadEvent</code>  <code>dataclass</code>","text":"<p>Represents a page load event.</p> ATTRIBUTE DESCRIPTION <code>path</code> <p>The path loaded</p> <p> TYPE: <code>str</code> </p>"},{"location":"api/page/#on_load","title":"<code>on_load</code>","text":"<p>You may want to do some sort of data-processing when a page is first loaded in a session.</p>"},{"location":"api/page/#simple-handler","title":"Simple handler","text":"<p>An <code>on_load</code> handler is similar to a regular event handler where you can mutate state.</p> <pre><code>import time\n\nimport mesop as me\n\n\ndef fake_api():\n  yield 1\n  time.sleep(1)\n  yield 2\n  time.sleep(2)\n  yield 3\n\n\ndef on_load(e: me.LoadEvent):\n  for val in fake_api():\n    me.state(State).default_values.append(val)\n    yield\n\n\n@me.page(path=\"/docs/on_load\", on_load=on_load)\ndef app():\n  me.text(\"onload\")\n  me.text(str(me.state(State).default_values))\n\n\n@me.stateclass\nclass State:\n  default_values: list[int]\n</code></pre>"},{"location":"api/page/#generator-handler","title":"Generator handler","text":"<p>The <code>on_load</code> handler can also be a generator function. This is useful if you need to call a slow or streaming API and want to return intermediate results before all the data has been received.</p> <pre><code>import time\n\nimport mesop as me\n\n\ndef on_load(e: me.LoadEvent):\n  state = me.state(State)\n  state.default_values.append(\"a\")\n  yield\n  time.sleep(1)\n  state.default_values.append(\"b\")\n  yield\n\n\n@me.page(path=\"/docs/on_load_generator\", on_load=on_load)\ndef app():\n  me.text(\"onload\")\n  me.text(str(me.state(State).default_values))\n\n\n@me.stateclass\nclass State:\n  default_values: list[str]\n</code></pre>"},{"location":"api/query-params/","title":"Query Params API","text":""},{"location":"api/query-params/#overview","title":"Overview","text":"<p>Query params, also sometimes called query string, provide a way to manage state in the URLs. They are useful for providing deep-links into your Mesop app.</p>"},{"location":"api/query-params/#example","title":"Example","text":"<p>Here's a simple working example that shows how you can read and write query params.</p> <pre><code>@me.page(path=\"/examples/query_params/page_2\")\ndef page_2():\n  me.text(f\"query_params={me.query_params}\")\n  me.button(\"Add query param\", on_click=add_query_param)\n  me.button(\"Navigate\", on_click=navigate)\n\ndef add_query_param(e: me.ClickEvent):\n  me.query_params[\"key\"] = \"value\"\n\ndef navigate(e: me.ClickEvent):\n  me.navigate(\"/examples/query_params\", query_params=me.query_params)\n</code></pre>"},{"location":"api/query-params/#usage","title":"Usage","text":"<p>You can use query parameters from <code>me.query_params</code>, which has a dictionary-like interface, where the key is the parameter name and value is the parameter value.</p>"},{"location":"api/query-params/#get-a-query-param-value","title":"Get a query param value","text":"<p><pre><code>value: str = me.query_params['param_name']\n</code></pre> This will raise a KeyError if the parameter doesn't exist. You can use <code>in</code> to check whether a key exists in <code>me.query_params</code>:</p> <pre><code>if 'key' in me.query_params:\n    print(me.query_params['key'])\n</code></pre> Repeated query params <p>If a query param key is repeated, then you will get the first value. If you want all the values use <code>get_all</code>.</p>"},{"location":"api/query-params/#get-all-values","title":"Get all values","text":"<p>To get all the values for a particular query parameter key, you can use <code>me.query_params.get_all</code>, which returns a sequence of parameter values (currently implemented as a <code>tuple</code>).</p> <pre><code>all_values = me.query_params.get_all('param_name')\n</code></pre>"},{"location":"api/query-params/#iterate","title":"Iterate","text":"<pre><code>for key in query_params:\n  value = query_params[key]\n</code></pre>"},{"location":"api/query-params/#set-query-param","title":"Set query param","text":"<pre><code>query_params['new_param'] = 'value'\n</code></pre>"},{"location":"api/query-params/#set-repeated-query-param","title":"Set repeated query param","text":"<pre><code>query_params['repeated_param'] = ['value1', 'value2']\n</code></pre>"},{"location":"api/query-params/#delete","title":"Delete","text":"<pre><code>del query_params['param_to_delete']\n</code></pre>"},{"location":"api/query-params/#patterns","title":"Patterns","text":""},{"location":"api/query-params/#navigate-with-existing-query-params","title":"Navigate with existing query params","text":"<p>Here's an example of how to navigate to a new page with query parameters:</p> <pre><code>def click_navigate_button(e: me.ClickEvent):\n    me.query_params['q'] = \"value\"\n    me.navigate('/search', query_params=me.query_params)\n</code></pre>"},{"location":"api/query-params/#navigate-with-only-new-query-params","title":"Navigate with only new query params","text":"<p>You can also navigate by passing in a dictionary to <code>query_params</code> parameter for <code>me.navigate</code> if you do not want to keep the existing query parameters.</p> <pre><code>def click_navigate_button(e: me.ClickEvent):\n    me.navigate('/search', query_params={\"q\": \"value})\n</code></pre>"},{"location":"api/style/","title":"Style","text":""},{"location":"api/style/#overview","title":"Overview","text":"<p>Mesop provides a Python API that wraps the browser's native CSS style API.</p>"},{"location":"api/style/#api","title":"API","text":""},{"location":"api/style/#mesop.component_helpers.style.Style","title":"<code>Style</code>  <code>dataclass</code>","text":"<p>Represents the style configuration for a UI component.</p> ATTRIBUTE DESCRIPTION <code>align_content</code> <p>Aligns the flexible container's items on the cross-axis. See MDN doc.</p> <p> TYPE: <code>ContentAlignmentValues | None</code> </p> <code>align_items</code> <p>Specifies the default alignment for items inside a flexible container. See MDN doc.</p> <p> TYPE: <code>ItemAlignmentValues | None</code> </p> <code>align_self</code> <p>Overrides a grid or flex item's align-items value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis. See MDN doc.</p> <p> TYPE: <code>ItemAlignmentValues | None</code> </p> <code>aspect_ratio</code> <p>Specifies the desired width-to-height ratio of a component. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>backdrop_filter</code> <p>Applies a CSS filter to the backdrop of the component. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>background</code> <p>Sets the background color or image of the component. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>border</code> <p>Defines the border properties for each side of the component. See MDN doc.</p> <p> TYPE: <code>Border | None</code> </p> <code>border_radius</code> <p>Defines the border radius. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>bottom</code> <p>Helps set vertical position of a positioned element. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>box_shadow</code> <p>Defines the box shadow. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>box_sizing</code> <p>Defines the box sizing. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>color</code> <p>Sets the color of the text inside the component. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>column_gap</code> <p>Sets the gap between columns. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>columns</code> <p>Specifies the number of columns in a multi-column element. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>cursor</code> <p>Sets the mouse cursor. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>display</code> <p>Defines the display type of the component. See MDN doc.</p> <p> TYPE: <code>Literal['block', 'inline', 'inline-block', 'flex', 'inline-flex', 'grid', 'inline-grid', 'none', 'contents'] | None</code> </p> <code>flex</code> <p>Defines the flexbox layout using a shorthand property. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>flex_basis</code> <p>Specifies the initial length of a flexible item. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>flex_direction</code> <p>Establishes the main-axis, thus defining the direction flex items are placed in the flex container. See MDN doc.</p> <p> TYPE: <code>Literal['row', 'row-reverse', 'column', 'column-reverse'] | None</code> </p> <code>flex_grow</code> <p>Defines the ability for a flex item to grow if necessary. See MDN doc.</p> <p> TYPE: <code>int | None</code> </p> <code>flex_shrink</code> <p>Defines the ability for a flex item to shrink if necessary. See MDN doc.</p> <p> TYPE: <code>int | None</code> </p> <code>flex_wrap</code> <p>Allows flex items to wrap onto multiple lines. See MDN doc.</p> <p> TYPE: <code>Literal['nowrap', 'wrap', 'wrap-reverse'] | None</code> </p> <code>font_family</code> <p>Specifies the font family. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>font_size</code> <p>Sets the size of the font. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>font_style</code> <p>Specifies the font style for text. See MDN doc.</p> <p> TYPE: <code>Literal['italic', 'normal'] | None</code> </p> <code>font_weight</code> <p>Sets the weight (or boldness) of the font. See MDN doc.</p> <p> TYPE: <code>Literal['bold', 'normal', 'medium', 100, 200, 300, 400, 500, 600, 700, 800, 900] | None</code> </p> <code>gap</code> <p>Sets the gap. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>grid_area</code> <p>Sets the grid area. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>grid_auto_columns</code> <p>CSS property specifies the size of an implicitly-created grid column track or pattern of tracks. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>grid_auto_flow</code> <p>CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>grid_auto_rows</code> <p>CSS property specifies the size of an implicitly-created grid row track or pattern of tracks. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>grid_column</code> <p>CSS shorthand property specifies a grid item's size and location within a grid column. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>grid_column_start</code> <p>Sets the grid column start. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>grid_column_end</code> <p>Sets the grid column end. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>grid_row</code> <p>CSS shorthand property specifies a grid item's size and location within a grid row. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>grid_row_start</code> <p>Sets the grid row start. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>grid_row_end</code> <p>Sets the grid row end. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>grid_template_areas</code> <p>Sets the grid template areas; each element is a row. See MDN doc.</p> <p> TYPE: <code>list[str] | None</code> </p> <code>grid_template_columns</code> <p>Sets the grid template columns. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>grid_template_rows</code> <p>Sets the grid template rows. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>height</code> <p>Sets the height of the component. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>justify_content</code> <p>Aligns the flexible container's items on the main-axis. See MDN doc.</p> <p> TYPE: <code>ContentAlignmentValues | None</code> </p> <code>justify_items</code> <p>Defines the default justify-self for all items of the box, giving them all a default way of justifying each box along the appropriate axis. See MDN doc.</p> <p> TYPE: <code>ItemJustifyValues | None</code> </p> <code>justify_self</code> <p>Sets the way a box is justified inside its alignment container along the appropriate axis. See MDN doc.</p> <p> TYPE: <code>ItemJustifyValues | None</code> </p> <code>left</code> <p>Helps set horizontal position of a positioned element. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>letter_spacing</code> <p>Increases or decreases the space between characters in text. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>line</code> <p>Set the line height (relative to the font size). See MDN doc.</p> <p> TYPE: <code>height</code> </p> <code>margin</code> <p>Sets the margin space required on each side of an element. See MDN doc.</p> <p> TYPE: <code>Margin | None</code> </p> <code>max_height</code> <p>Sets the maximum height of an element. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>max_width</code> <p>Sets the maximum width of an element. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>min_height</code> <p>Sets the minimum height of an element. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>min_width</code> <p>Sets the minimum width of an element. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>object_fit</code> <p>Specifies how an image or video should be resized to fit its container. See MDN doc.</p> <p> TYPE: <code>ObjectFitValues | None</code> </p> <code>opacity</code> <p>Sets the opacity property. See MDN doc.</p> <p> TYPE: <code>float | str | None</code> </p> <code>outline</code> <p>Sets the outline property. Note: <code>input</code> component has default browser stylings. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>overflow_wrap</code> <p>Specifies how long text can be broken up by new lines to prevent overflowing. See MDN doc.</p> <p> TYPE: <code>OverflowWrapValues | None</code> </p> <code>overflow</code> <p>Specifies the handling of overflow in the horizontal and vertical direction. See MDN doc.</p> <p> TYPE: <code>OverflowValues | None</code> </p> <code>overflow_x</code> <p>Specifies the handling of overflow in the horizontal direction. See MDN doc.</p> <p> TYPE: <code>OverflowValues | None</code> </p> <code>overflow_y</code> <p>Specifies the handling of overflow in the vertical direction. See MDN doc.</p> <p> TYPE: <code>OverflowValues | None</code> </p> <code>padding</code> <p>Sets the padding space required on each side of an element. See MDN doc.</p> <p> TYPE: <code>Padding | None</code> </p> <code>place_items</code> <p>The CSS place-items shorthand property allows you to align items along both the block and inline directions at once. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>pointer_events</code> <p>Sets under what circumstances (if any) a particular graphic element can become the target of pointer events. See MDN doc.</p> <p> TYPE: <code>PointerEventsValues | None</code> </p> <code>position</code> <p>Specifies the type of positioning method used for an element (static, relative, absolute, fixed, or sticky). See MDN doc.</p> <p> TYPE: <code>Literal['static', 'relative', 'absolute', 'fixed', 'sticky'] | None</code> </p> <code>right</code> <p>Helps set horizontal position of a positioned element. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>rotate</code> <p>Allows you to specify rotation transforms individually and independently of the transform property. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>row_gap</code> <p>Sets the gap between rows. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>text_align</code> <p>Specifies the horizontal alignment of text in an element. See MDN doc.</p> <p> TYPE: <code>Literal['start', 'end', 'left', 'right', 'center'] | None</code> </p> <code>text_decoration</code> <p>Specifies the decoration added to text. See MDN doc.</p> <p> TYPE: <code>Literal['underline', 'none'] | None</code> </p> <code>text_overflow</code> <p>Specifies how overflowed content that is not displayed should be signaled to the user. See MDN doc.</p> <p> TYPE: <code>Literal['ellipsis', 'clip'] | None</code> </p> <code>text_shadow</code> <p>Specifies the shadow effect applied to text. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>text_transform</code> <p>Specifies the transformation applied to text. See MDN doc.</p> <p> TYPE: <code>Literal['uppercase', 'lowercase', 'capitalize', 'none', 'full-width', 'full-size-kana'] | None</code> </p> <code>top</code> <p>Helps set vertical position of a positioned element. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>transform</code> <p>Lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>transition</code> <p>Specifies the transition effect. See MDN doc.</p> <p> TYPE: <code>str | None</code> </p> <code>vertical_align</code> <p>Specifies the vertical alignment of an element. See MDN doc.</p> <p> TYPE: <code>Literal['baseline', 'sub', 'super', 'top', 'text-top', 'middle', 'bottom', 'text-bottom', 'initial', 'inherit', 'revert', 'revert-layer', 'unset'] | None</code> </p> <code>visibility</code> <p>Sets the visibility property. See MDN doc.</p> <p> TYPE: <code>Literal['visible', 'hidden', 'collapse', 'inherit', 'initial', 'revert', 'revert-layer', 'unset'] | None</code> </p> <code>white_space</code> <p>Specifies how white space inside an element is handled. See MDN doc.</p> <p> TYPE: <code>Literal['normal', 'nowrap', 'pre', 'pre-wrap', 'pre-line', 'break-spaces'] | None</code> </p> <code>width</code> <p>Sets the width of the component. See MDN doc.</p> <p> TYPE: <code>int | str | None</code> </p> <code>word_wrap</code> <p>Specifies how long text can be broken up by new lines to prevent overflowing. See MDN doc.</p> <p> TYPE: <code>Literal['normal', 'break-word', 'anywhere'] | None</code> </p> <code>z-index</code> <p>Sets the z-index of the component. See MDN doc.</p> <p> TYPE: <code>Literal['normal', 'break-word', 'anywhere'] | None</code> </p>"},{"location":"api/style/#mesop.component_helpers.style.Border","title":"<code>Border</code>  <code>dataclass</code>","text":"<p>Defines the border styles for each side of a UI component.</p> ATTRIBUTE DESCRIPTION <code>top</code> <p>Style for the top border.</p> <p> TYPE: <code>BorderSide | None</code> </p> <code>right</code> <p>Style for the right border.</p> <p> TYPE: <code>BorderSide | None</code> </p> <code>bottom</code> <p>Style for the bottom border.</p> <p> TYPE: <code>BorderSide | None</code> </p> <code>left</code> <p>Style for the left border.</p> <p> TYPE: <code>BorderSide | None</code> </p>"},{"location":"api/style/#mesop.component_helpers.style.Border.all","title":"<code>all</code>  <code>staticmethod</code>","text":"<p>Creates a Border instance with all sides having the same style.</p> PARAMETER DESCRIPTION <code>value</code> <p>The style to apply to all sides of the border.</p> <p> TYPE: <code>BorderSide</code> </p> RETURNS DESCRIPTION <code>Border</code> <p>A new Border instance with the specified style applied to all sides.</p> <p> TYPE: <code>Border</code> </p>"},{"location":"api/style/#mesop.component_helpers.style.Border.symmetric","title":"<code>symmetric</code>  <code>staticmethod</code>","text":"<p>Creates a Border instance with symmetric styles for vertical and horizontal sides.</p> PARAMETER DESCRIPTION <code>vertical</code> <p>The style to apply to the top and bottom sides of the border.</p> <p> TYPE: <code>BorderSide | None</code> DEFAULT: <code>None</code> </p> <code>horizontal</code> <p>The style to apply to the right and left sides of the border.</p> <p> TYPE: <code>BorderSide | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Border</code> <p>A new Border instance with the specified styles applied symmetrically.</p> <p> TYPE: <code>Border</code> </p>"},{"location":"api/style/#mesop.component_helpers.style.BorderSide","title":"<code>BorderSide</code>  <code>dataclass</code>","text":"<p>Represents the style of a single side of a border in a UI component.</p> ATTRIBUTE DESCRIPTION <code>width</code> <p>The width of the border. Can be specified as an integer value representing pixels,                       a string with a unit (e.g., '2em'), or None for no width.</p> <p> TYPE: <code>int | str | None</code> </p> <code>color</code> <p>The color of the border, represented as a string. This can be any valid CSS color value,                 or None for no color.</p> <p> TYPE: <code>str | None</code> </p> <code>style</code> <p>The style of the border. See https://developer.mozilla.org/en-US/docs/Web/CSS/border-style</p> <p> TYPE: <code>Literal['none', 'solid', 'dashed', 'dotted', 'double', 'groove', 'ridge', 'inset', 'outset', 'hidden'] | None</code> </p>"},{"location":"api/style/#mesop.component_helpers.style.Margin","title":"<code>Margin</code>  <code>dataclass</code>","text":"<p>               Bases: <code>_EdgeInsets</code></p> <p>Defines the margin space around a UI component.</p> ATTRIBUTE DESCRIPTION <code>top</code> <p>Top margin (note: <code>2</code> is the same as <code>2px</code>)</p> <p> TYPE: <code>int | str | None</code> </p> <code>right</code> <p>Right margin</p> <p> TYPE: <code>int | str | None</code> </p> <code>bottom</code> <p>Bottom margin</p> <p> TYPE: <code>int | str | None</code> </p> <code>left</code> <p>Left margin</p> <p> TYPE: <code>int | str | None</code> </p>"},{"location":"api/style/#mesop.component_helpers.style.Margin.all","title":"<code>all</code>  <code>staticmethod</code>","text":"<p>Creates a Margin instance with the same value for all sides.</p> PARAMETER DESCRIPTION <code>value</code> <p>The value to apply to all sides of the margin. Can be an integer (pixel value) or a string.</p> <p> TYPE: <code>int | str</code> </p> RETURNS DESCRIPTION <code>Margin</code> <p>A new Margin instance with the specified value applied to all sides.</p> <p> TYPE: <code>Margin</code> </p>"},{"location":"api/style/#mesop.component_helpers.style.Margin.symmetric","title":"<code>symmetric</code>  <code>staticmethod</code>","text":"<p>Creates a Margin instance with symmetric values for vertical and horizontal sides.</p> PARAMETER DESCRIPTION <code>vertical</code> <p>The value to apply to the top and bottom sides of the margin. Can be an integer (pixel value) or a string.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>horizontal</code> <p>The value to apply to the right and left sides of the margin. Can be an integer (pixel value) or a string.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Margin</code> <p>A new Margin instance with the specified values applied to the vertical and horizontal sides.</p> <p> TYPE: <code>Margin</code> </p>"},{"location":"api/style/#mesop.component_helpers.style.Padding","title":"<code>Padding</code>  <code>dataclass</code>","text":"<p>               Bases: <code>_EdgeInsets</code></p> <p>Defines the padding space around a UI component.</p> ATTRIBUTE DESCRIPTION <code>top</code> <p>Top padding (note: <code>2</code> is the same as <code>2px</code>)</p> <p> TYPE: <code>int | str | None</code> </p> <code>right</code> <p>Right padding</p> <p> TYPE: <code>int | str | None</code> </p> <code>bottom</code> <p>Bottom padding</p> <p> TYPE: <code>int | str | None</code> </p> <code>left</code> <p>Left padding</p> <p> TYPE: <code>int | str | None</code> </p>"},{"location":"api/style/#mesop.component_helpers.style.Padding.all","title":"<code>all</code>  <code>staticmethod</code>","text":"<p>Creates a Padding instance with the same value for all sides.</p> PARAMETER DESCRIPTION <code>value</code> <p>The value to apply to all sides of the padding. Can be an integer (pixel value) or a string.</p> <p> TYPE: <code>int | str</code> </p> RETURNS DESCRIPTION <code>Padding</code> <p>A new Padding instance with the specified value applied to all sides.</p> <p> TYPE: <code>Padding</code> </p>"},{"location":"api/style/#mesop.component_helpers.style.Padding.symmetric","title":"<code>symmetric</code>  <code>staticmethod</code>","text":"<p>Creates a Padding instance with symmetric values for vertical and horizontal sides.</p> PARAMETER DESCRIPTION <code>vertical</code> <p>The value to apply to the top and bottom sides of the padding. Can be an integer (pixel value) or a string.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>horizontal</code> <p>The value to apply to the right and left sides of the padding. Can be an integer (pixel value) or a string.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Padding</code> <p>A new Padding instance with the specified values applied to the vertical and horizontal sides.</p> <p> TYPE: <code>Padding</code> </p>"},{"location":"api/viewport-size/","title":"Viewport size","text":""},{"location":"api/viewport-size/#overview","title":"Overview","text":"<p>The viewport size API allows you to access the current viewport size. This can be useful for creating responsive and adaptive designs that are suitable for the user's screen size.</p>"},{"location":"api/viewport-size/#examples","title":"Examples","text":""},{"location":"api/viewport-size/#responsive-design","title":"Responsive Design","text":"<p>Responsive design is having a single fluid layout that adapts to all screen sizes.</p> <p>You can use the viewport size to dynamically set the property of a style. This can be useful if you want to fit two boxes in a row for larger screens (e.g. desktop) and a single box for smaller screens (e.g. mobile) as shown in the example below:</p> <pre><code>import mesop as me\n\n@me.page()\ndef page():\n    if me.viewport_size().width &gt; 640:\n        width = me.viewport_size().width / 2\n    else:\n        width = me.viewport_size().width\n    for i in range(8):\n      me.box(style=me.Style(width=width))\n</code></pre> <p>Tip: Responsive design tends to take less work and is usually a good starting point.</p>"},{"location":"api/viewport-size/#adaptive-design","title":"Adaptive Design","text":"<p>Adaptive design is having multiple fixed layouts for specific device categories at specific breakpoints, typically viewport width.</p> <p>For example, oftentimes you will hide the nav component on a mobile device and instead show a hamburger menu, while for a larger device you will always show the nav component on the left side.</p> <pre><code>import mesop as me\n\n@me.page()\ndef page():\n    if me.viewport_size().width &gt; 480:\n        nav_component()\n        body()\n    else:\n        body(show_menu_button=True)\n</code></pre> <p>Tip: Adaptive design tends to take more work and is best for optimizing complex mobile and desktop experiences.</p>"},{"location":"api/viewport-size/#api","title":"API","text":""},{"location":"api/viewport-size/#mesop.features.viewport_size.viewport_size","title":"<code>viewport_size</code>","text":"<p>Returns the current viewport size.</p> RETURNS DESCRIPTION <code>Size</code> <p>The current viewport size.</p> <p> TYPE: <code>Size</code> </p>"},{"location":"api/viewport-size/#mesop.features.viewport_size.Size","title":"<code>Size</code>  <code>dataclass</code>","text":"ATTRIBUTE DESCRIPTION <code>width</code> <p>The width of the viewport in pixels.</p> <p> TYPE: <code>int</code> </p> <code>height</code> <p>The height of the viewport in pixels.</p> <p> TYPE: <code>int</code> </p>"},{"location":"api/commands/focus-component/","title":"Focus component","text":"<p>If you want to focus on a component, you can use <code>me.focus_component</code> which focuses the component with the specified key if it is focusable.</p>"},{"location":"api/commands/focus-component/#example","title":"Example","text":"<pre><code>import mesop as me\n\n\n@me.page(path=\"/focus_component\")\ndef page():\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    me.select(\n      options=[\n        me.SelectOption(label=\"Autocomplete\", value=\"autocomplete\"),\n        me.SelectOption(label=\"Checkbox\", value=\"checkbox\"),\n        me.SelectOption(label=\"Input\", value=\"input\"),\n        me.SelectOption(label=\"Link\", value=\"link\"),\n        me.SelectOption(label=\"Radio\", value=\"radio\"),\n        me.SelectOption(label=\"Select\", value=\"select\"),\n        me.SelectOption(label=\"Slider\", value=\"slider\"),\n        me.SelectOption(label=\"Slide Toggle\", value=\"slide_toggle\"),\n        me.SelectOption(label=\"Textarea\", value=\"textarea\"),\n        me.SelectOption(label=\"Uploader\", value=\"uploader\"),\n      ],\n      on_selection_change=on_selection_change,\n    )\n\n  me.divider()\n\n  with me.box(\n    style=me.Style(\n      display=\"grid\",\n      gap=5,\n      grid_template_columns=\"1fr 1fr\",\n      margin=me.Margin.all(15),\n    )\n  ):\n    with me.box():\n      me.autocomplete(\n        key=\"autocomplete\",\n        label=\"Autocomplete\",\n        options=[\n          me.AutocompleteOption(label=\"Test\", value=\"Test\"),\n          me.AutocompleteOption(label=\"Test2\", value=\"Tes2t\"),\n        ],\n      )\n\n    with me.box():\n      me.checkbox(\"Checkbox\", key=\"checkbox\")\n\n    with me.box():\n      me.input(key=\"input\", label=\"Input\")\n\n    with me.box():\n      me.link(key=\"link\", text=\"Test\", url=\"https://google.com\")\n\n    with me.box():\n      me.radio(\n        key=\"radio\",\n        options=[\n          me.RadioOption(label=\"Option 1\", value=\"1\"),\n          me.RadioOption(label=\"Option 2\", value=\"2\"),\n        ],\n      )\n\n    with me.box():\n      me.select(\n        key=\"select\",\n        label=\"Select\",\n        options=[\n          me.SelectOption(label=\"label 1\", value=\"value1\"),\n          me.SelectOption(label=\"label 2\", value=\"value2\"),\n          me.SelectOption(label=\"label 3\", value=\"value3\"),\n        ],\n      )\n\n    with me.box():\n      me.slider(key=\"slider\")\n\n    with me.box():\n      me.slide_toggle(key=\"slide_toggle\", label=\"Slide toggle\")\n\n    with me.box():\n      me.textarea(key=\"textarea\", label=\"Textarea\")\n\n    with me.box():\n      me.uploader(\n        key=\"uploader\",\n        label=\"Upload Image\",\n        accepted_file_types=[\"image/jpeg\", \"image/png\"],\n        type=\"flat\",\n        color=\"primary\",\n        style=me.Style(font_weight=\"bold\"),\n      )\n\n\ndef on_selection_change(e: me.SelectSelectionChangeEvent):\n  me.focus_component(key=e.value)\n</code></pre>"},{"location":"api/commands/focus-component/#api","title":"API","text":""},{"location":"api/commands/focus-component/#mesop.commands.focus_component.focus_component","title":"<code>focus_component</code>","text":"<p>Focus the component specified by the key</p> PARAMETER DESCRIPTION <code>key</code> <p>The unique identifier of the component to focus on.          This key should be globally unique to prevent unexpected behavior.          If multiple components share the same key, the first component          instance found in the component tree will be focused on.</p> <p> TYPE: <code>str</code> </p>"},{"location":"api/commands/navigate/","title":"Navigate","text":"<p>To navigate to another page, you can use <code>me.navigate</code>. This is particularly useful for navigating across a multi-page app.</p>"},{"location":"api/commands/navigate/#example","title":"Example","text":"<pre><code>import mesop as me\n\n\ndef navigate(event: me.ClickEvent):\n  me.navigate(\"/about\")\n\n\n@me.page(path=\"/\")\ndef home():\n  me.text(\"This is the home page\")\n  me.button(\"navigate to about page\", on_click=navigate)\n\n\n@me.page(path=\"/about\")\ndef about():\n  me.text(\"This is the about page\")\n</code></pre>"},{"location":"api/commands/navigate/#api","title":"API","text":""},{"location":"api/commands/navigate/#mesop.commands.navigate.navigate","title":"<code>navigate</code>","text":"<p>Navigates to the given URL.</p> PARAMETER DESCRIPTION <code>url</code> <p>The URL to navigate to.</p> <p> TYPE: <code>str</code> </p> <code>query_params</code> <p>A dictionary of query parameters to include in the URL, or <code>me.query_params</code>. If not provided, all current query parameters will be removed.</p> <p> TYPE: <code>dict[str, str | Sequence[str]] | QueryParams | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api/commands/scroll-into-view/","title":"Scroll into view","text":"<p>If you want to scroll a component into the viewport, you can use <code>me.scroll_into_view</code> which scrolls the component with the specified key into the viewport.</p>"},{"location":"api/commands/scroll-into-view/#example","title":"Example","text":"<pre><code>import time\n\nimport mesop as me\n\n\n@me.stateclass\nclass State:\n  more_lines: int = 0\n\n\n@me.page(path=\"/scroll_into_view\")\ndef app():\n  me.button(\"Scroll to middle line\", on_click=scroll_to_middle)\n  me.button(\"Scroll to bottom line\", on_click=scroll_to_bottom)\n  me.button(\n    \"Scroll to bottom line &amp; generate lines\",\n    on_click=scroll_to_bottom_and_generate_lines,\n  )\n  for _ in range(100):\n    me.text(\"Filler line\")\n  me.text(\"middle_line\", key=\"middle_line\")\n  for _ in range(100):\n    me.text(\"Filler line\")\n  me.text(\"bottom_line\", key=\"bottom_line\")\n  for _ in range(me.state(State).more_lines):\n    me.text(\"More lines\")\n\n\ndef scroll_to_middle(e: me.ClickEvent):\n  me.scroll_into_view(key=\"middle_line\")\n\n\ndef scroll_to_bottom(e: me.ClickEvent):\n  me.scroll_into_view(key=\"bottom_line\")\n\n\ndef scroll_to_bottom_and_generate_lines(e: me.ClickEvent):\n  state = me.state(State)\n  me.scroll_into_view(key=\"bottom_line\")\n  yield\n  state.more_lines += 5\n  time.sleep(1)\n  yield\n  state.more_lines += 5\n  time.sleep(1)\n  yield\n  state.more_lines += 5\n  time.sleep(1)\n  yield\n  state.more_lines += 5\n  time.sleep(1)\n  yield\n</code></pre>"},{"location":"api/commands/scroll-into-view/#api","title":"API","text":""},{"location":"api/commands/scroll-into-view/#mesop.commands.scroll_into_view.scroll_into_view","title":"<code>scroll_into_view</code>","text":"<p>Scrolls so the component specified by the key is in the viewport.</p> PARAMETER DESCRIPTION <code>key</code> <p>The unique identifier of the component to scroll to.          This key should be globally unique to prevent unexpected behavior.          If multiple components share the same key, the first component          instance found in the component tree will be scrolled to.</p> <p> TYPE: <code>str</code> </p>"},{"location":"api/commands/set-page-title/","title":"Set page title","text":"<p>If you want to set the page title, you can use <code>me.set_page_title</code> which will set the page title displayed on the browser tab.</p> <p>This change does not persist if you navigate to a new page. The title will be reset to the title configured in <code>me.page</code>.</p>"},{"location":"api/commands/set-page-title/#example","title":"Example","text":"<pre><code>import mesop as me\n\n\ndef on_blur(e: me.InputBlurEvent):\n  me.set_page_title(e.value)\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/set_page_title\",\n)\ndef app():\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    me.input(label=\"Page title\", on_blur=on_blur)\n</code></pre>"},{"location":"api/commands/set-page-title/#api","title":"API","text":""},{"location":"api/commands/set-page-title/#mesop.commands.set_page_title.set_page_title","title":"<code>set_page_title</code>","text":"<p>Sets the page title.</p> PARAMETER DESCRIPTION <code>title</code> <p>The new page title</p> <p> TYPE: <code>str</code> </p>"},{"location":"blog/","title":"Blog Home","text":""},{"location":"blog/2023/12/25/hello-mesop/","title":"Hello, Mesop","text":"<p>After working on Mesop for the last two months, I'm excited to finally announce the first version of Mesop, v0.1. This is still early days for Mesop, but it's an important milestone because it represents a minimum viable tool for building UIs in Python. In case you haven't read Mesop's home page, Mesop is a Python-based UI framework that allows you to rapidly build web demos. Engineers without frontend experience can build web UIs by writing idiomatic Python code.</p>"},{"location":"blog/2023/12/25/hello-mesop/#why-mesop","title":"Why Mesop?","text":"<p>Mesop is in many ways a remix of many existing ideas packaged into a single cohesive UI framework, designed for Python developers. I've documented some of these goals previously, but I'll quickly recap the benefits of Mesop here:</p> <ul> <li>Allows non-frontend engineers to rapidly build UIs for internal use cases like demos.</li> <li>Provides a fast build-edit-refresh loop through hot reload.</li> <li>Enables developers to benefit from the mature Angular web framework and Angular Material components.</li> <li>Provides a flexible and composable components API that's idiomatic to Python.</li> <li>Easy to deploy by using standard HTTP technologies like Server-Sent Events.</li> </ul>"},{"location":"blog/2023/12/25/hello-mesop/#whats-next-for-mesop","title":"What's next for Mesop?","text":"<p>I see a few broad themes of work in the coming year or so.</p>"},{"location":"blog/2023/12/25/hello-mesop/#expand-mesops-component-library","title":"Expand Mesop's component library","text":"<p>Mesop's current component library is a solid start but there's still gaps to support common use cases.</p> <p>Areas of work:</p> <ul> <li> <p>Complete Angular Material component coverage. We support 13+ Angular Material components today, however there's many more that we don't support. Some of it is because I haven't had time to wrap their components, but in other cases (e.g. sidenav), I'd like to spend more time exploring the design space as it will probably require supporting some kind of multi-slot component API. Getting this API designed correctly, for not just this component but also future components, is important in the long run.</p> </li> <li> <p>Support more native HTML elements/browser APIs. Right now, only Box and Text are thin wrappers around native HTML elements. However, there are other HTML elements like <code>&lt;img&gt;</code>, <code>&lt;audio&gt;</code>  and <code>&lt;video&gt;</code> that I'd like to also support. The flip side of supporting these components is enabling a way to allow Mesop end-users to upload these media contents, which there are also native browser APIs for.</p> </li> <li> <p>Custom components. Some components won't belong in the standard Mesop package because it's either too experimental or too use-case specific. It would be nice to have a complete story for supporting custom components. Today, all of the components use the component helper API which wraps internal framework details like runtime. However, there still isn't a very good story for loading custom components in the Angular frontend (e.g. ComponentRenderer's type to component map) and testing them.</p> </li> </ul>"},{"location":"blog/2023/12/25/hello-mesop/#make-it-easy-to-get-started-with-mesop","title":"Make it easy to get started with Mesop","text":"<p>Using Mesop today requires following our internal development setup which requires dependencies like Bazel/iBazel which makes it easy to interoperate with our downstream sync, but these dependencies aren't commonly used in the Python ecosystem. Eventually, I'd like make using Mesop as simple as <code>pip install mesop</code> and then using Mesop's built-in CLI: <code>mesop serve</code> for local development and <code>mesop deploy</code> to deploy on a Cloud service.</p> <p>Areas of work:</p> <ul> <li> <p>Find a suitable ibazel replacement for Hot Reload. Instead of requiring Mesop developers to sync the entire repo and building the project with Bazel and iBazel, we should distribute a ready-to-use pip package of Mesop. However, this leaves an open question of how we support hot reload without iBazel which provides: 1) a filesystem watching mechanism and 2) live reload. We'll need to investigate good open-source equivalents for each of these capabilities.</p> </li> <li> <p>Provide web-based interactive demos. Many JavaScript UI frameworks provide a playground (e.g. Angular) or interactive tutorial (e.g. Solid) so that prospective developers can use the framework before going through the hassle of setting up their own local dev environment. This would also be very helpful to provide for each component as it's a lot easier to understand a component by tinkering with a live example.</p> </li> </ul>"},{"location":"blog/2023/12/25/hello-mesop/#explore-power-use-cases","title":"Explore power use cases","text":"<p>Today Mesop is good for internal apps with relatively un-stringent demands in terms of UI customizability and performance. For production-grade external apps, there's several areas that Mesop would need to advance in, before it's ready.</p> <p>Areas of work:</p> <ul> <li> <p>Optimize network payload. Right now the client sends the entire state to the server, and the server responds with the entire state and component tree. For large UIs/apps, this can result in sizable network payloads. We can optimize this by sending deltas as much as possible. For example, the server can send a delta of the state and component tree to the client. In addition, if we use POST instead of GET, we can stop using base-64 encoding which adds a significant overhead on top of Protobuf binary serialization.</p> </li> <li> <p>Stateful server. Even with the above optimizations, we'd essentially preserve the current architecture, but there's some limitations in how much improvements we can make as long as we assume servers are stateless. However, if we allow stateful servers (i.e. long-lived connections between the client and server), we can use things like WebSockets and always send deltas bi-directionally, in particular from client to server which isn't possible with a stateless server. The problem with this direction, though, is that it makes deployment more complex as scaling a WebSocket-based server can be hard depending on the cloud infrastructure used. In addition, we'll need to handle new edge cases like authentication and broken WebSockets connections.</p> </li> <li> <p>Optimistic UI. One of the drawbacks for server-driven UI frameworks like Mesop is that it introduces significant latency to simple user interactions. For example, if you click a button, it requires a network roundtrip before the UI is (meaningfully) updated. One way of dealing with this shortcoming is by pre-fetching the next UI state based on a user hint. For example, if a user is hovering over a button, we could optimistically calculate the state change and component tree change ahead of time before the actual click. The obvious downside to this is that optimistically executing an action is inappropriate in many cases, for example, a non-reversible action (e.g. delete) should never be optimistically done. To safely introduce this concept, we could provide an (optional) annotation for event handlers like <code>@me.optimistic(events=[me.HoverEvent])</code> so develpers could opt-in.</p> </li> </ul> <p>Some of these directions are potentially mutually exclusive. For example, having a stateful server may make optimistic UI practically more difficult because a stateful server means that non-serializable state could start to creep in to Mesop applications which makes undoing optimistic UI updates tricky</p> <p>There's, of course, even more directions than what I've listed here. For example, it's technically possible to compile Python into WebAssembly and run it in the browser and this could be another way of tackling latency to user interactions. However, this seems like a longer-term exploration, which is why I've left it out for now.</p>"},{"location":"blog/2023/12/25/hello-mesop/#interested-in-contributing","title":"Interested in contributing?","text":"<p>If any of this excites you, please reach out. The easiest way is to raise a GitHub issue and let me know if there's something specific you'd like to contribute.</p>"},{"location":"blog/2025/03/19/mesop-v1/","title":"Mesop v1","text":"<p>After developing Mesop for nearly a year and a half and publicly launching it on Hacker News 9 months ago, we are excited to release Mesop v1.</p> <p>It's been an amazing journey working on Mesop, especially with richard-to@ who's been my 20% collaborator at Google. Despite being an extremely small core team (working on this as a 20% project!), we've been able to foster a thriving community both within Google where hundreds of Googlers have used it to build internal apps and outside of Google where it's been downloaded more than 180k times on PyPI.</p>"},{"location":"blog/2025/03/19/mesop-v1/#what-v1-means","title":"What v1 means","text":"<p>Mesop v1 signifies our commitment to prioritizing stability and avoiding backwards-incompatible changes unless absolutely necessary\u2014such as important security fixes or critical bug fixes.</p> <p>Since we publicly launched 9 months ago, we have taken a conservative approach to making API changes, avoiding backwards-incompatible changes as much as possible. This has been key to Mesop's successful adoption both within Google and externally. In addition, Google's reputation for churn has made us careful in designing our APIs.</p> <p>Almost all Mesop apps should be able to seamlessly upgrade to v1. The only backwards-incompatible change we made from v0.14 is to drop <code>mel.text_io</code> which has been deprecated for many months and can be replaced with <code>mel.text_to_text</code> as a simple one-line change.</p>"},{"location":"blog/2025/03/19/mesop-v1/#future-of-mesop","title":"Future of Mesop","text":"<p>You might have also noticed that Mesop has graduated from the Google GitHub org into its own GitHub org. Becoming a community-driven project is beneficial for the longevity of Mesop. Rest assured, Mesop continues to have the same core maintainers and the roadmap remains the same.</p> <p>v1 doesn't mean the end of Mesop's development. We plan to add new components over time, maintain our dependencies, provide more examples, and generally improve the overall developer experience.</p> <p>While we can\u2019t make firm commitments, our goal is to remain on v1 for as long as possible, avoiding a jump to v2.</p> <p>\u2014 wwwillchen@</p>"},{"location":"blog/2024/01/12/visual-editor/","title":"Visual Editor","text":""},{"location":"blog/2024/01/12/visual-editor/#why","title":"Why?","text":"<p>As I began discussing Mesop with friends and colleagues, one thing that has come up is the difficulty of teaching and persuading non-frontend engineers to build UIs, even simple ones. CSS, particularly the rules around layout, can be quite challenging and off-putting.</p> <p>I've developed a new visual editor for Mesop that aims to make UI building more approachable for beginners and more productive for experts.</p>"},{"location":"blog/2024/01/12/visual-editor/#what","title":"What?","text":"<p>Let's take a look at the visual editor:</p> <p></p> <p>With the visual editor, you can:</p> <ul> <li>Add new components into your app</li> <li>Modify existing components</li> <li>Visualize the component tree hierarchy</li> <li>You can inspect existing components on the page by hovering over them and then change them in the editor panel</li> <li>Bring Your Own components. By decorating a Python function with <code>me.component</code>, you've turned it into a Mesop component and you can now add it with the visual editor.</li> </ul> <p>What's exciting about the visual editor is that you aren't locked into it - everytime you change a component with the visual editor, it's modifying the source code directly so you can seamlessly go back forth between a regular text editor and the visual editor to build your Mesop app.</p>"},{"location":"blog/2024/01/12/visual-editor/#prior-art","title":"Prior Art","text":"<p>Visual editors (aka WYSIWYG builders) have been around for a long time. Puck is one of the most interesting ones because of a few reasons: 1) it's open-source, 2) it's flexible (e.g. bring your own components) and 3) it's intuitive and easy-to-use.</p> <p>The main issues I saw with Puck, particularly for Mesop's use case, is that it currently only supports React (and Mesop uses Angular) and Puck saves data whereas I would like Mesop's Visual Editor to directly emit/update code, which I'll explain next.</p>"},{"location":"blog/2024/01/12/visual-editor/#principles","title":"Principles","text":""},{"location":"blog/2024/01/12/visual-editor/#hybrid-code-not-low-code","title":"Hybrid code (not low-code)","text":"<p>One of the reasons why WYSIWYG builders have not gotten much traction with engineers is that they're often good for simple applications, but then you hit a wall building more complex applications.</p> <p>To avoid this issue, I'm focusing on making the Visual Editor actually emit code and not just data. Essentially, the UI code that you produce from the Visual Editor should be the same as the code that you would write by hand.</p>"},{"location":"blog/2024/01/12/visual-editor/#unobtrustive-ui","title":"Unobtrustive UI","text":"<p>I want Mesop app developers to do most of their work (except for the final finetuning for deployment) in the Visual Editior which means that it's important the Editor UI is un-obtrusive. Chrome DevTools is a great example of a low-key tool that many web developers keep open throughout their development - it's helpful for debugging, but then it's out of your way as you're interacting with the application.</p> <p>Concretely, this means:</p> <ul> <li>Editor UI should be collapsible</li> <li>You should be able to \"disable\" the editor mode and interact with the application as a normal user.</li> </ul>"},{"location":"blog/2024/01/12/visual-editor/#contextual","title":"Contextual","text":"<p>The visual editor should provide only the information that you need when you need it.</p> <p>For example, rather than showing all the style properties in the editor panel, which would be quite overwhelming, we only show the style properties that you're using for the selected component.</p>"},{"location":"blog/2024/01/12/visual-editor/#local-only","title":"Local-only","text":"<p>Because the Visual Editor relies on editing files in your local filesystem, I want to avoid any accidental usages out in the wild. Concretely, this means that you can only use the Visual Editor in localhost, otherwise the Mesop server will reject the editor edit requests.</p>"},{"location":"blog/2024/01/12/visual-editor/#whats-next","title":"What's next","text":"<p>There's still a lot of improvements and polishes I would like to make to the visual editor, but a few high-level ideas that I have are:</p> <ol> <li>Build example applications using the visual editor with a video walkthrough.</li> <li>Create more high-level components in Mesop Labs, which I'll introduce in an upcoming blog post, to make it even easier to build apps with the visual editor.</li> <li>Drag and drop components onto the page and within the page. This will provide an intuitive experience for building the UI, literally block by block.</li> </ol>"},{"location":"blog/2024/07/12/is-mesop--web-components-the-cure-to-front-end-fatigue/","title":"Is Mesop + Web Components the cure to Front-end fatigue?","text":"<p>I saw this tweet the other day and couldn't help but chuckle:</p> <p>is this the thing that will finally save me from ever learning front end?https://t.co/eDgY0AfG6U</p>\u2014 xlr8harder (@xlr8harder) June 6, 2024 <p>At first, I thought of it as joke, but now that Mesop has launched experimental support for Web Components, I think it's plausible that Mesop with Web Components can save you from front-end fatigue.</p>"},{"location":"blog/2024/07/12/is-mesop--web-components-the-cure-to-front-end-fatigue/#what-is-mesop","title":"What is Mesop?","text":"<p>Before we dive in, let me explain what Mesop is. Mesop is a Python UI framework focused on rapidly building AI apps. You can write a lot of kinds of apps all in Python as you can see from the examples on our home page, but when you need to, Mesop provides the flexibility of dropping down into web components so you can  have fine-grained UI control and use existing JS libraries.</p>"},{"location":"blog/2024/07/12/is-mesop--web-components-the-cure-to-front-end-fatigue/#avoid-the-builds","title":"Avoid the builds","text":"<p>DHH, creator of Rails, recently gave an interview saying how he's \"done with bundling\" and the overall complexity of modern front-end build toolchains.</p> <p>As someone who's done front-end for almost a decade, I can attest to the sentiment of feeling the pain of compiling JavaScript options. Setting up compiler configs and options can easily take hours. I want to be clear, I think a lot of these tools like TypeScript are fantastic, and the core Mesop framework itself is compiled using TypeScript and Angular's compilers.</p> <p>But when it comes to rapid prototyping, I want to avoid that overhead. In our design proposal, we intentionally designed a lightweight model where you don't need to set up a complex build chain to start writing JavaScript.</p> <p>Sometimes a build step is unavoidable, e.g. you're writing TypeScript, and you can still compile your JavaScript as needed.</p>"},{"location":"blog/2024/07/12/is-mesop--web-components-the-cure-to-front-end-fatigue/#framework-churn","title":"Framework churn","text":"<p>The front-end ecosystem is infamous for its steady and constant churn. The good thing about building on top of web components is that it's based on web standards supported by all modern browsers. This means, that given browser makers' focus on \"not breaking the web\", this will be there for many years, if not decades to come.</p> <p>For years, web components had a reputation of being an immature technology due to inconsistent support across browsers, but fast forward to 2024, and web components are well-supported in modern browsers and libraries built on web components like Lit, which is downloaded millions of times a week.</p>"},{"location":"blog/2024/07/12/is-mesop--web-components-the-cure-to-front-end-fatigue/#minimizing-front-end-fatigue-in-mesop","title":"Minimizing front-end fatigue in Mesop","text":"<p>FE developers are so used to the pain and complexity of front-end development that they can forget how steep the learning curve is until someone from another domain tries to build a simple web app, and struggles with just getting the web app up and started.</p> <p>Mesop app developers are mostly not front-end developers which means that reducing the complexity, especially learning curve, of building custom components is very important. In Mesop, we've designed a smooth pathway where you can get started with a little front-end knowledge and build simple custom components without learning a complex front-end framework.</p>"},{"location":"blog/2024/07/12/is-mesop--web-components-the-cure-to-front-end-fatigue/#whats-next","title":"What's next","text":"<p>Follow our X/Twitter account, @mesop_dev for more updates. We're working on improving our web component support, in particular by:</p> <ul> <li>Creating guides for wrapping React components into Mesop web components</li> <li>Fostering an ecosystem of open-source Mesop web components by making it easy to discover and reuse web components that other people have built.</li> </ul> <p>We're excited about the potential of Mesop and Web Components to simplify front-end development. Whether it's the cure for front-end fatigue remains to be seen, but I think it offers a promising alternative to the complexity of traditional front-end development.</p>"},{"location":"blog/2024/05/13/why-mesop/","title":"Why Mesop?","text":"<p>Mesop is a new UI framework that enables Python developers to quickly build delightful web apps in a scalable way.</p> <p>Many Python UI frameworks are easy to get started with, but customizing beyond the defaults often requires diving into JavaScript, CSS, and HTML \u2014 a steep learning curve for many developers.</p> <p>Mesop provides a different approach, offering a framework that's both easy to learn and enables flexible UI building, all within Python.</p> <p>I want to share a couple concrete ways in which Mesop achieves this.</p>"},{"location":"blog/2024/05/13/why-mesop/#build-uis-with-functions-ie-components","title":"Build UIs with Functions (i.e. Components)","text":"<p>Mesop embraces a component-based philosophy where the entire UI is composed of reusable, building blocks which are called components. Using a component is as simple as calling a Python function. This approach offers several benefits:</p> <ul> <li>Simplicity: You can use your existing Python knowledge to build UIs quickly and intuitively since components are just functions.</li> <li>Maintainability: Complex UIs become easier to manage and understand by breaking them down into smaller, focused components.</li> <li>Modularity: Components are self-contained, enabling easy reuse within a project or across different projects.</li> </ul> <p>Here's an example of a reusable icon button component:</p> <pre><code>def icon_button(*, icon: str, label: str, tooltip: str, on_click: Callable):\n  \"\"\"Icon button with text and tooltip.\"\"\"\n  with me.content_button(on_click=on_click):\n    with me.tooltip(message=tooltip):\n      with me.box(style=me.Style(display=\"flex\")):\n        me.icon(icon=icon)\n        me.text(\n          label, style=me.Style(line_height=\"24px\", margin=me.Margin(left=5))\n        )\n</code></pre>"},{"location":"blog/2024/05/13/why-mesop/#flexibility-through-layered-building-blocks","title":"Flexibility through Layered Building Blocks","text":"<p>Mesop provides a range of UI building blocks, from low-level native components to high-level components.</p> <ul> <li>Low-level components: like box, offer granular control over layout and styling. They empower you to create custom UI elements through flexible layouts like flexbox and grid.</li> <li>High-level components: like chat, are built from low-level components and provide ready-to-use elements for common use cases, enabling rapid development.</li> </ul> <p>This layered approach makes deep customization possible. This means that if you want to customize the chat component, you can fork the chat implementation because it's written entirely in Python using Mesop's public APIs.</p>"},{"location":"blog/2024/05/13/why-mesop/#see-mesop-in-action","title":"See Mesop in Action","text":"<p>To demonstrate the range of UIs possible with Mesop, we built a demo gallery to showcase the types of applications you can build and the components that are available:</p> <p>The demo gallery itself is a Mesop app and implemented in a few hundred lines of Python code. It demonstrates how Mesop can be used to create polished, custom UIs in a maintainable way.</p>"},{"location":"blog/2024/05/13/why-mesop/#try-mesop","title":"Try Mesop","text":"<p>If this sounds intriguing, read the Getting Started guide and try building your own Mesop app. Share your feedback and contribute as we continue developing Mesop.</p>"},{"location":"codelab/","title":"Mesop DuoChat Codelab","text":"<p>This tutorial walks you through building DuoChat, an interactive web application for chatting with multiple AI models simultaneously. You'll learn how to leverage Mesop's powerful features to create a responsive UI and integrate with AI APIs like Google Gemini and Anthropic Claude.</p>"},{"location":"codelab/#what-you-will-build","title":"What you will build","text":"<p>By the end of this codelab, you will build DuoChat (demo) that will allow users to:</p> <ul> <li>Select multiple AI models to chat with</li> <li>Compare responses from different models side-by-side</li> <li>Provide their own API keys</li> </ul> <p>If you want to dive straight into the code, you can look at the DuoChat repo and each branch represents the completed code after each section.</p>"},{"location":"codelab/#setting-up-the-development-environment","title":"Setting Up the Development Environment","text":"<p>Let's start by setting up our development environment:</p> <ol> <li>Create a new directory for your project:</li> </ol> <pre><code>mkdir duochat\ncd duochat\n</code></pre> <ol> <li> <p>Follow the Mesop command-line installation guide and create a virtual environment and activate it.</p> </li> <li> <p>Create a <code>requirements.txt</code> file with the following content:</p> </li> </ol> <pre><code>mesop\ngunicorn\nanthropic\ngoogle-generativeai\n</code></pre> <ol> <li>Install the dependencies:</li> </ol> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"codelab/#setting-up-the-main-application","title":"Setting Up the Main Application","text":"<p>Let's start by creating a basic Mesop application. Create <code>main.py</code> and add the following code:</p> main.py<pre><code>import mesop as me\n\n@me.page(path=\"/\")\ndef page():\n    me.text(\"Welcome to DuoChat!\")\n</code></pre> <p>This creates a simple Mesop application with a welcome message.</p>"},{"location":"codelab/#running-the-application","title":"Running the Application","text":"<p>To run your Mesop application:</p> <pre><code>mesop main.py\n</code></pre> <p>Navigate to <code>http://localhost:32123</code> in your web browser. You should see the welcome message.</p>"},{"location":"codelab/#getting-api-keys","title":"Getting API keys","text":"<p>Later on, you will need API keys to call the respective AI models:</p> <ul> <li>Get a Google Gemini API Key and use the Gemini API free tier.</li> <li>Get an Anthropic API Key and setup billing. Check their docs for pricing.</li> </ul> <p>TIP: You can get started with the Gemini API key, which has a free tier, first and create the Anthropic API key later.</p>"},{"location":"codelab/#troubleshooting","title":"Troubleshooting","text":"<p>If you're having trouble, compare your code to the solution.</p>"},{"location":"codelab/#next-steps","title":"Next Steps","text":"<p>In the next section, we'll start building the user interface for DuoChat, including the header, chat input area, and basic styling. We'll explore Mesop's components and styling system to create an attractive and functional layout.</p> <p>     Building the basic UI </p>"},{"location":"codelab/2/","title":"DuoChat Codelab Part 2: Building the basic UI","text":"<p>In this section, we'll create the main layout for our DuoChat application, including the header, chat input area, and some basic styling. We'll use Mesop's components and styling system to create an attractive and functional UI.</p>"},{"location":"codelab/2/#updating-the-main-layout","title":"Updating the Main Layout","text":"<p>Let's start by updating our <code>main.py</code> file to include a more structured layout. We'll use Mesop's <code>box</code> component for layout and add some custom styles.</p> <p>Replace the content of <code>main.py</code> with the following:</p> main.py<pre><code>import mesop as me\n\nROOT_BOX_STYLE = me.Style(\n    background=\"#e7f2ff\",\n    height=\"100%\",\n    font_family=\"Inter\",\n    display=\"flex\",\n    flex_direction=\"column\",\n)\n\n@me.page(\n    path=\"/\",\n    stylesheets=[\n        \"https://fonts.googleapis.com/css2?family=Inter:wght@100..900&amp;display=swap\"\n    ],\n)\ndef page():\n    with me.box(style=ROOT_BOX_STYLE):\n        header()\n        with me.box(\n            style=me.Style(\n                width=\"min(680px, 100%)\",\n                margin=me.Margin.symmetric(\n                    horizontal=\"auto\",\n                    vertical=36,\n                ),\n            )\n        ):\n            me.text(\n                \"Chat with multiple models at once\",\n                style=me.Style(\n                    font_size=20,\n                    margin=me.Margin(bottom=24),\n                ),\n            )\n            chat_input()\n\ndef header():\n    with me.box(\n        style=me.Style(\n            padding=me.Padding.all(16),\n        ),\n    ):\n        me.text(\n            \"DuoChat\",\n            style=me.Style(\n                font_weight=500,\n                font_size=24,\n                color=\"#3D3929\",\n                letter_spacing=\"0.3px\",\n            ),\n        )\n\ndef chat_input():\n    with me.box(\n        style=me.Style(\n            border_radius=16,\n            padding=me.Padding.all(8),\n            background=\"white\",\n            display=\"flex\",\n            width=\"100%\",\n        )\n    ):\n        with me.box(style=me.Style(flex_grow=1)):\n            me.native_textarea(\n                placeholder=\"Enter a prompt\",\n                style=me.Style(\n                    padding=me.Padding(top=16, left=16),\n                    outline=\"none\",\n                    width=\"100%\",\n                    border=me.Border.all(me.BorderSide(style=\"none\")),\n                ),\n            )\n        with me.content_button(type=\"icon\"):\n            me.icon(\"send\")\n</code></pre> <p>Run the Mesop app and look at the changes:</p> <pre><code>mesop main.py\n</code></pre> <p>Let's review the changes:</p> <ol> <li>We've added a <code>ROOT_BOX_STYLE</code> to set the overall layout and background color.</li> <li>We're importing a custom font (Inter) using the <code>stylesheets</code> parameter in the <code>@me.page</code> decorator.</li> <li>We've created separate functions for the <code>header</code> and <code>chat_input</code> components.</li> <li>The main layout uses nested <code>box</code> components with custom styles to create a centered, responsive design.</li> </ol>"},{"location":"codelab/2/#understanding-mesops-styling-system","title":"Understanding Mesop's Styling System","text":"<p>Mesop's styling system is based on Python classes that correspond to CSS properties. You can learn more by reading the Style API docs.</p>"},{"location":"codelab/2/#adding-interactivity","title":"Adding Interactivity","text":"<p>Now, let's add some basic interactivity to our chat input. We'll update the <code>chat_input</code> function to handle user input:</p> main.py<pre><code>@me.stateclass\nclass State:\n    input: str = \"\"\n\ndef on_blur(e: me.InputBlurEvent):\n    state = me.state(State)\n    state.input = e.value\n\ndef chat_input():\n    state = me.state(State)\n    with me.box(\n        style=me.Style(\n            border_radius=16,\n            padding=me.Padding.all(8),\n            background=\"white\",\n            display=\"flex\",\n            width=\"100%\",\n        )\n    ):\n        with me.box(style=me.Style(flex_grow=1)):\n            me.native_textarea(\n                value=state.input,\n                placeholder=\"Enter a prompt\",\n                on_blur=on_blur,\n                style=me.Style(\n                    padding=me.Padding(top=16, left=16),\n                    outline=\"none\",\n                    width=\"100%\",\n                    border=me.Border.all(me.BorderSide(style=\"none\")),\n                ),\n            )\n        with me.content_button(type=\"icon\", on_click=send_prompt):\n            me.icon(\"send\")\n\ndef send_prompt(e: me.ClickEvent):\n    state = me.state(State)\n    print(f\"Sending prompt: {state.input}\")\n    state.input = \"\"\n</code></pre> <p>Here's what we've added:</p> <ol> <li>A <code>State</code> class to manage the application state, including the user's input.</li> <li>An <code>on_blur</code> function to update the state when the user switches focus from the textarea.</li> <li>A <code>send_prompt</code> function that will be called when the send button is clicked.</li> </ol>"},{"location":"codelab/2/#running-the-updated-application","title":"Running the Updated Application","text":"<p>Run the application again with <code>mesop main.py</code> and navigate to <code>http://localhost:32123</code>. You should now see a styled header, a centered layout, and a functional chat input area.</p>"},{"location":"codelab/2/#troubleshooting","title":"Troubleshooting","text":"<p>If you're having trouble, compare your code to the solution.</p>"},{"location":"codelab/2/#next-steps","title":"Next Steps","text":"<p>In the next section, we'll dive deeper into state management and implement the model picker dialog.</p> <p>     Managing state &amp; dialogs </p>"},{"location":"codelab/3/","title":"DuoChat Codelab Part 3: Managing state &amp; dialogs","text":"<p>In this section, we'll expand our application's state management capabilities and implement a dialog for selecting AI models. We'll use Mesop's state management system and dialog components to create an interactive model selection experience.</p>"},{"location":"codelab/3/#expanding-the-state-management","title":"Expanding the State Management","text":"<p>First, let's create a <code>data_model.py</code> file with a more comprehensive state structure:</p> data_model.py<pre><code>from dataclasses import dataclass, field\nfrom typing import Literal\nfrom enum import Enum\n\nimport mesop as me\n\nRole = Literal[\"user\", \"model\"]\n\n@dataclass(kw_only=True)\nclass ChatMessage:\n    role: Role = \"user\"\n    content: str = \"\"\n    in_progress: bool = False\n\nclass Models(Enum):\n    GEMINI_1_5_FLASH = \"Gemini 1.5 Flash\"\n    GEMINI_1_5_PRO = \"Gemini 1.5 Pro\"\n    CLAUDE_3_5_SONNET = \"Claude 3.5 Sonnet\"\n\n@dataclass\nclass Conversation:\n    model: str = \"\"\n    messages: list[ChatMessage] = field(default_factory=list)\n\n@me.stateclass\nclass State:\n    is_model_picker_dialog_open: bool = False\n    input: str = \"\"\n    conversations: list[Conversation] = field(default_factory=list)\n    models: list[str] = field(default_factory=list)\n    gemini_api_key: str = \"\"\n    claude_api_key: str = \"\"\n\n@me.stateclass\nclass ModelDialogState:\n    selected_models: list[str] = field(default_factory=list)\n</code></pre> <p>This expanded state structure allows us to manage multiple conversations, selected models, and API keys.</p>"},{"location":"codelab/3/#implementing-the-model-picker-dialog","title":"Implementing the Model Picker Dialog","text":"<p>Now, let's implement the model picker dialog in our <code>main.py</code> file. First, we'll create a new file called <code>dialog.py</code> with the following content, which is based on the dialog pattern from the demo gallery:</p> dialog.py<pre><code>import mesop as me\n\n@me.content_component\ndef dialog(is_open: bool):\n    with me.box(\n        style=me.Style(\n            background=\"rgba(0,0,0,0.4)\",\n            display=\"block\" if is_open else \"none\",\n            height=\"100%\",\n            overflow_x=\"auto\",\n            overflow_y=\"auto\",\n            position=\"fixed\",\n            width=\"100%\",\n            z_index=1000,\n        )\n    ):\n        with me.box(\n            style=me.Style(\n                align_items=\"center\",\n                display=\"grid\",\n                height=\"100vh\",\n                justify_items=\"center\",\n            )\n        ):\n            with me.box(\n                style=me.Style(\n                    background=\"#fff\",\n                    border_radius=20,\n                    box_sizing=\"content-box\",\n                    box_shadow=(\n                        \"0 3px 1px -2px #0003, 0 2px 2px #00000024, 0 1px 5px #0000001f\"\n                    ),\n                    margin=me.Margin.symmetric(vertical=\"0\", horizontal=\"auto\"),\n                    padding=me.Padding.all(20),\n                )\n            ):\n                me.slot()\n\n@me.content_component\ndef dialog_actions():\n    with me.box(\n        style=me.Style(\n            display=\"flex\", justify_content=\"end\", margin=me.Margin(top=20)\n        )\n    ):\n        me.slot()\n</code></pre> <p>Now, let's update our <code>main.py</code> file to include the model picker dialog. Copy the following code and replace <code>main.py</code> with it:</p> main.py<pre><code># Update the imports:\nimport mesop as me\nfrom data_model import State, Models, ModelDialogState\nfrom dialog import dialog, dialog_actions\n\ndef change_model_option(e: me.CheckboxChangeEvent):\n    s = me.state(ModelDialogState)\n    if e.checked:\n        s.selected_models.append(e.key)\n    else:\n        s.selected_models.remove(e.key)\n\ndef set_gemini_api_key(e: me.InputBlurEvent):\n    me.state(State).gemini_api_key = e.value\n\ndef set_claude_api_key(e: me.InputBlurEvent):\n    me.state(State).claude_api_key = e.value\n\ndef model_picker_dialog():\n    state = me.state(State)\n    with dialog(state.is_model_picker_dialog_open):\n        with me.box(style=me.Style(display=\"flex\", flex_direction=\"column\", gap=12)):\n            me.text(\"API keys\")\n            me.input(\n                label=\"Gemini API Key\",\n                value=state.gemini_api_key,\n                on_blur=set_gemini_api_key,\n            )\n            me.input(\n                label=\"Claude API Key\",\n                value=state.claude_api_key,\n                on_blur=set_claude_api_key,\n            )\n        me.text(\"Pick a model\")\n        for model in Models:\n            if model.name.startswith(\"GEMINI\"):\n                disabled = not state.gemini_api_key\n            elif model.name.startswith(\"CLAUDE\"):\n                disabled = not state.claude_api_key\n            else:\n                disabled = False\n            me.checkbox(\n                key=model.value,\n                label=model.value,\n                checked=model.value in state.models,\n                disabled=disabled,\n                on_change=change_model_option,\n                style=me.Style(\n                    display=\"flex\",\n                    flex_direction=\"column\",\n                    gap=4,\n                    padding=me.Padding(top=12),\n                ),\n            )\n        with dialog_actions():\n            me.button(\"Cancel\", on_click=close_model_picker_dialog)\n            me.button(\"Confirm\", on_click=confirm_model_picker_dialog)\n\ndef close_model_picker_dialog(e: me.ClickEvent):\n    state = me.state(State)\n    state.is_model_picker_dialog_open = False\n\ndef confirm_model_picker_dialog(e: me.ClickEvent):\n    dialog_state = me.state(ModelDialogState)\n    state = me.state(State)\n    state.is_model_picker_dialog_open = False\n    state.models = dialog_state.selected_models\n\nROOT_BOX_STYLE = me.Style(\n    background=\"#e7f2ff\",\n    height=\"100%\",\n    font_family=\"Inter\",\n    display=\"flex\",\n    flex_direction=\"column\",\n)\n\n@me.page(\n    path=\"/\",\n    stylesheets=[\n        \"https://fonts.googleapis.com/css2?family=Inter:wght@100..900&amp;display=swap\"\n    ],\n)\ndef page():\n    model_picker_dialog()\n    with me.box(style=ROOT_BOX_STYLE):\n        header()\n        with me.box(\n            style=me.Style(\n                width=\"min(680px, 100%)\",\n                margin=me.Margin.symmetric(horizontal=\"auto\", vertical=36),\n            )\n        ):\n            me.text(\n                \"Chat with multiple models at once\",\n                style=me.Style(font_size=20, margin=me.Margin(bottom=24)),\n            )\n            chat_input()\n\ndef header():\n    with me.box(\n        style=me.Style(\n            padding=me.Padding.all(16),\n        ),\n    ):\n        me.text(\n            \"DuoChat\",\n            style=me.Style(\n                font_weight=500,\n                font_size=24,\n                color=\"#3D3929\",\n                letter_spacing=\"0.3px\",\n            ),\n        )\n\ndef switch_model(e: me.ClickEvent):\n    state = me.state(State)\n    state.is_model_picker_dialog_open = True\n    dialog_state = me.state(ModelDialogState)\n    dialog_state.selected_models = state.models[:]\n\ndef chat_input():\n    state = me.state(State)\n    with me.box(\n        style=me.Style(\n            border_radius=16,\n            padding=me.Padding.all(8),\n            background=\"white\",\n            display=\"flex\",\n            width=\"100%\",\n        )\n    ):\n        with me.box(style=me.Style(flex_grow=1)):\n            me.native_textarea(\n                value=state.input,\n                placeholder=\"Enter a prompt\",\n                on_blur=on_blur,\n                style=me.Style(\n                    padding=me.Padding(top=16, left=16),\n                    outline=\"none\",\n                    width=\"100%\",\n                    border=me.Border.all(me.BorderSide(style=\"none\")),\n                ),\n            )\n            with me.box(\n                style=me.Style(\n                    display=\"flex\",\n                    padding=me.Padding(left=12, bottom=12),\n                    cursor=\"pointer\",\n                ),\n                on_click=switch_model,\n            ):\n                me.text(\n                    \"Model:\",\n                    style=me.Style(font_weight=500, padding=me.Padding(right=6)),\n                )\n                if state.models:\n                    me.text(\", \".join(state.models))\n                else:\n                    me.text(\"(no model selected)\")\n        with me.content_button(\n            type=\"icon\", on_click=send_prompt, disabled=not state.models\n        ):\n            me.icon(\"send\")\n\ndef on_blur(e: me.InputBlurEvent):\n    state = me.state(State)\n    state.input = e.value\n\ndef send_prompt(e: me.ClickEvent):\n    state = me.state(State)\n    print(f\"Sending prompt: {state.input}\")\n    print(f\"Selected models: {state.models}\")\n    state.input = \"\"\n</code></pre> <p>This updated code adds the following features:</p> <ol> <li>A model picker dialog that allows users to select AI models and enter API keys.</li> <li>State management for selected models and API keys.</li> <li>A model switcher in the chat input area that opens the model picker dialog.</li> <li>Disabling of models based on whether the corresponding API key has been entered.</li> </ol>"},{"location":"codelab/3/#running-the-updated-application","title":"Running the Updated Application","text":"<p>Run the application again with <code>mesop main.py</code> and navigate to <code>http://localhost:32123</code>. You should now see a chat input area with a model switcher. Clicking on the model switcher will open the model picker dialog, allowing you to select models and enter API keys.</p>"},{"location":"codelab/3/#troubleshooting","title":"Troubleshooting","text":"<p>If you're having trouble, compare your code to the solution.</p>"},{"location":"codelab/3/#next-steps","title":"Next Steps","text":"<p>In the next section, we'll integrate multiple AI models into our application. We'll set up connections to Gemini and Claude, implement model-specific chat functions, and create a way to interact with multiple models.</p> <p>     Integrating AI APIs </p>"},{"location":"codelab/4/","title":"DuoChat Codelab Part 4: Integrating AI APIs","text":"<p>In this section, we'll set up connections to Gemini and Claude, implement model-specific chat functions, and create a unified interface for interacting with multiple models simultaneously.</p>"},{"location":"codelab/4/#setting-up-ai-model-connections","title":"Setting Up AI Model Connections","text":"<p>First, let's create separate files for our Gemini and Claude integrations.</p> <p>Create a new file called <code>gemini.py</code>:</p> gemini.py<pre><code>import google.generativeai as genai\nfrom typing import Iterable\n\nfrom data_model import ChatMessage, State\nimport mesop as me\n\ngeneration_config = {\n    \"temperature\": 1,\n    \"top_p\": 0.95,\n    \"top_k\": 64,\n    \"max_output_tokens\": 8192,\n}\n\ndef configure_gemini():\n    state = me.state(State)\n    genai.configure(api_key=state.gemini_api_key)\n\ndef send_prompt_pro(prompt: str, history: list[ChatMessage]) -&gt; Iterable[str]:\n    configure_gemini()\n    model = genai.GenerativeModel(\n        model_name=\"gemini-1.5-pro-latest\",\n        generation_config=generation_config,\n    )\n    chat_session = model.start_chat(\n        history=[\n            {\"role\": message.role, \"parts\": [message.content]} for message in history\n        ]\n    )\n    for chunk in chat_session.send_message(prompt, stream=True):\n        yield chunk.text\n\ndef send_prompt_flash(prompt: str, history: list[ChatMessage]) -&gt; Iterable[str]:\n    configure_gemini()\n    model = genai.GenerativeModel(\n        model_name=\"gemini-1.5-flash-latest\",\n        generation_config=generation_config,\n    )\n    chat_session = model.start_chat(\n        history=[\n            {\"role\": message.role, \"parts\": [message.content]} for message in history\n        ]\n    )\n    for chunk in chat_session.send_message(prompt, stream=True):\n        yield chunk.text\n</code></pre> <p>Now, create a new file called <code>claude.py</code>:</p> claude.py<pre><code>import anthropic\nfrom typing import Iterable\n\nfrom data_model import ChatMessage, State\nimport mesop as me\n\ndef call_claude_sonnet(input: str, history: list[ChatMessage]) -&gt; Iterable[str]:\n    state = me.state(State)\n    client = anthropic.Anthropic(api_key=state.claude_api_key)\n    messages = [\n        {\n            \"role\": \"assistant\" if message.role == \"model\" else message.role,\n            \"content\": message.content,\n        }\n        for message in history\n    ] + [{\"role\": \"user\", \"content\": input}]\n\n    with client.messages.stream(\n        max_tokens=1024,\n        messages=messages,\n        model=\"claude-3-sonnet-20240229\",\n    ) as stream:\n        for text in stream.text_stream:\n            yield text\n</code></pre>"},{"location":"codelab/4/#updating-the-main-application","title":"Updating the Main Application","text":"<p>Now, let's update our <code>main.py</code> file to integrate these AI models. We'll update the <code>page</code> function, add the <code>display_conversations</code> and <code>display_message</code> functions and modify the <code>send_prompt</code> function to handle multiple models and display their responses:</p> main.py<pre><code>import mesop as me\nfrom data_model import State, Models, ModelDialogState, Conversation, ChatMessage\nfrom dialog import dialog, dialog_actions\nimport claude\nimport gemini\n\n# ... (keep the existing imports and styles)\n\n# Replace page() with this:\n@me.page(\n    path=\"/\",\n    stylesheets=[\n        \"https://fonts.googleapis.com/css2?family=Inter:wght@100..900&amp;display=swap\"\n    ],\n)\ndef page():\n    model_picker_dialog()\n    with me.box(style=ROOT_BOX_STYLE):\n        header()\n        with me.box(\n            style=me.Style(\n                width=\"min(680px, 100%)\",\n                margin=me.Margin.symmetric(horizontal=\"auto\", vertical=36),\n            )\n        ):\n            me.text(\n                \"Chat with multiple models at once\",\n                style=me.Style(font_size=20, margin=me.Margin(bottom=24)),\n            )\n            chat_input()\n            display_conversations()\n\n# Add display_conversations and display_message:\ndef display_conversations():\n    state = me.state(State)\n    for conversation in state.conversations:\n        with me.box(style=me.Style(margin=me.Margin(bottom=24))):\n            me.text(f\"Model: {conversation.model}\", style=me.Style(font_weight=500))\n            for message in conversation.messages:\n                display_message(message)\n\ndef display_message(message: ChatMessage):\n    style = me.Style(\n        padding=me.Padding.all(12),\n        border_radius=8,\n        margin=me.Margin(bottom=8),\n    )\n    if message.role == \"user\":\n        style.background = \"#e7f2ff\"\n    else:\n        style.background = \"#ffffff\"\n\n    with me.box(style=style):\n        me.markdown(message.content)\n        if message.in_progress:\n            me.progress_spinner()\n\n# Update send_prompt:\ndef send_prompt(e: me.ClickEvent):\n    state = me.state(State)\n    if not state.conversations:\n        for model in state.models:\n            state.conversations.append(Conversation(model=model, messages=[]))\n    input = state.input\n    state.input = \"\"\n\n    for conversation in state.conversations:\n        model = conversation.model\n        messages = conversation.messages\n        history = messages[:]\n        messages.append(ChatMessage(role=\"user\", content=input))\n        messages.append(ChatMessage(role=\"model\", in_progress=True))\n        yield\n\n        if model == Models.GEMINI_1_5_FLASH.value:\n            llm_response = gemini.send_prompt_flash(input, history)\n        elif model == Models.GEMINI_1_5_PRO.value:\n            llm_response = gemini.send_prompt_pro(input, history)\n        elif model == Models.CLAUDE_3_5_SONNET.value:\n            llm_response = claude.call_claude_sonnet(input, history)\n        else:\n            raise Exception(\"Unhandled model\", model)\n\n        for chunk in llm_response:\n            messages[-1].content += chunk\n            yield\n        messages[-1].in_progress = False\n        yield\n</code></pre> <p>This updated code adds the following features:</p> <ol> <li>A <code>display_conversations</code> function that shows the chat history for each selected model.</li> <li>A <code>display_message</code> function that renders individual messages with appropriate styling.</li> <li>An updated <code>send_prompt</code> function that sends the user's input to all selected models and displays their responses in real-time.</li> </ol>"},{"location":"codelab/4/#handling-streaming-responses","title":"Handling Streaming Responses","text":"<p>The <code>send_prompt</code> function now uses Python generators to handle streaming responses from the AI models. This allows us to update the UI in real-time as the models generate their responses.</p>"},{"location":"codelab/4/#running-the-updated-application","title":"Running the Updated Application","text":"<p>Run the application again with <code>mesop main.py</code> and navigate to <code>http://localhost:32123</code>. You should now be able to:</p> <ol> <li>Select multiple AI models using the model picker dialog.</li> <li>Enter API keys for Gemini and Claude.</li> <li>Send prompts to the selected models.</li> <li>See the responses from multiple models displayed simultaneously.</li> </ol>"},{"location":"codelab/4/#troubleshooting","title":"Troubleshooting","text":"<p>If you're having trouble, compare your code to the solution.</p>"},{"location":"codelab/4/#next-steps","title":"Next Steps","text":"<p>In the final section, we'll refine the user interface by creating a dedicated conversation page with a multi-column layout for different model responses. We'll also add some finishing touches to improve the overall user experience.</p> <p>     Wrapping it up </p>"},{"location":"codelab/5/","title":"DuoChat Codelab Part 5: Wrapping it up","text":"<p>In this section, we'll create a multi-column layout for different model responses, implement user and model message components, add auto-scroll functionality, and finalize the chat experience with multiple models.</p>"},{"location":"codelab/5/#creating-a-new-conversation-page","title":"Creating a New Conversation Page","text":"<p>First, let's create a new page for our conversations. Update the <code>main.py</code> file to include a new route and function for the conversation page:</p> main.py<pre><code>import mesop as me\nfrom data_model import State, Models, ModelDialogState, Conversation, ChatMessage\nfrom dialog import dialog, dialog_actions\nimport claude\nimport gemini\n\n# ... (keep the existing imports and styles)\n\nSTYLESHEETS = [\n  \"https://fonts.googleapis.com/css2?family=Inter:wght@100..900&amp;display=swap\"\n]\n\n@me.page(\n    path=\"/\",\n    stylesheets=STYLESHEETS,\n)\ndef home_page():\n    model_picker_dialog()\n    with me.box(style=ROOT_BOX_STYLE):\n        header()\n        with me.box(\n            style=me.Style(\n                width=\"min(680px, 100%)\",\n                margin=me.Margin.symmetric(horizontal=\"auto\", vertical=36),\n            )\n        ):\n            me.text(\n                \"Chat with multiple models at once\",\n                style=me.Style(font_size=20, margin=me.Margin(bottom=24)),\n            )\n            # Uncomment this in the next step:\n            # examples_row()\n            chat_input()\n\n@me.page(path=\"/conversation\", stylesheets=STYLESHEETS)\ndef conversation_page():\n    state = me.state(State)\n    model_picker_dialog()\n    with me.box(style=ROOT_BOX_STYLE):\n        header()\n\n        models = len(state.conversations)\n        models_px = models * 680\n        with me.box(\n            style=me.Style(\n                width=f\"min({models_px}px, calc(100% - 32px))\",\n                display=\"grid\",\n                gap=16,\n                grid_template_columns=f\"repeat({models}, 1fr)\",\n                flex_grow=1,\n                overflow_y=\"hidden\",\n                margin=me.Margin.symmetric(horizontal=\"auto\"),\n                padding=me.Padding.symmetric(horizontal=16),\n            )\n        ):\n            for conversation in state.conversations:\n                model = conversation.model\n                messages = conversation.messages\n                with me.box(\n                    style=me.Style(\n                        overflow_y=\"auto\",\n                    )\n                ):\n                    me.text(\"Model: \" + model, style=me.Style(font_weight=500))\n\n                    for message in messages:\n                        if message.role == \"user\":\n                            user_message(message.content)\n                        else:\n                            model_message(message)\n                    if messages and model == state.conversations[-1].model:\n                        me.box(\n                            key=\"end_of_messages\",\n                            style=me.Style(\n                                margin=me.Margin(\n                                    bottom=\"50vh\" if messages[-1].in_progress else 0\n                                )\n                            ),\n                        )\n        with me.box(\n            style=me.Style(\n                display=\"flex\",\n                justify_content=\"center\",\n            )\n        ):\n            with me.box(\n                style=me.Style(\n                    width=\"min(680px, 100%)\",\n                    padding=me.Padding(top=24, bottom=24),\n                )\n            ):\n                chat_input()\n\ndef user_message(content: str):\n    with me.box(\n        style=me.Style(\n            background=\"#e7f2ff\",\n            padding=me.Padding.all(16),\n            margin=me.Margin.symmetric(vertical=16),\n            border_radius=16,\n        )\n    ):\n        me.text(content)\n\ndef model_message(message: ChatMessage):\n    with me.box(\n        style=me.Style(\n            background=\"#fff\",\n            padding=me.Padding.all(16),\n            border_radius=16,\n            margin=me.Margin.symmetric(vertical=16),\n        )\n    ):\n        me.markdown(message.content)\n        if message.in_progress:\n            me.progress_spinner()\n\n# ... (keep the existing helper functions)\n\ndef send_prompt(e: me.ClickEvent):\n    state = me.state(State)\n    if not state.conversations:\n        me.navigate(\"/conversation\")\n        for model in state.models:\n            state.conversations.append(Conversation(model=model, messages=[]))\n    input = state.input\n    state.input = \"\"\n\n    for conversation in state.conversations:\n        model = conversation.model\n        messages = conversation.messages\n        history = messages[:]\n        messages.append(ChatMessage(role=\"user\", content=input))\n        messages.append(ChatMessage(role=\"model\", in_progress=True))\n        yield\n        me.scroll_into_view(key=\"end_of_messages\")\n        if model == Models.GEMINI_1_5_FLASH.value:\n            llm_response = gemini.send_prompt_flash(input, history)\n        elif model == Models.GEMINI_1_5_PRO.value:\n            llm_response = gemini.send_prompt_pro(input, history)\n        elif model == Models.CLAUDE_3_5_SONNET.value:\n            llm_response = claude.call_claude_sonnet(input, history)\n        else:\n            raise Exception(\"Unhandled model\", model)\n        for chunk in llm_response:\n            messages[-1].content += chunk\n            yield\n        messages[-1].in_progress = False\n        yield\n</code></pre> <p>Try running the app: <code>mesop main.py</code> and now you should navigate to the conversation page once you click the send button.</p>"},{"location":"codelab/5/#adding-example-prompts","title":"Adding Example Prompts","text":"<p>Let's add some example prompts to the home page to help users get started. Add the following functions to <code>main.py</code>:</p> main.py<pre><code>EXAMPLES = [\n    \"Create a file-lock in Python\",\n    \"Write an email to Congress to have free milk for all\",\n    \"Make a nice box shadow in CSS\",\n]\n\ndef examples_row():\n    with me.box(\n        style=me.Style(\n            display=\"flex\", flex_direction=\"row\", gap=16, margin=me.Margin(bottom=24)\n        )\n    ):\n        for i in EXAMPLES:\n            example(i)\n\ndef example(text: str):\n    with me.box(\n        key=text,\n        on_click=click_example,\n        style=me.Style(\n            cursor=\"pointer\",\n            background=\"#b9e1ff\",\n            width=\"215px\",\n            height=160,\n            font_weight=500,\n            line_height=\"1.5\",\n            padding=me.Padding.all(16),\n            border_radius=16,\n            border=me.Border.all(me.BorderSide(width=1, color=\"blue\", style=\"none\")),\n        ),\n    ):\n        me.text(text)\n\ndef click_example(e: me.ClickEvent):\n    state = me.state(State)\n    state.input = e.key\n</code></pre> <p>And then uncomment the callsite for <code>examples_row</code> in <code>home_page</code>.</p>"},{"location":"codelab/5/#updating-the-header","title":"Updating the Header","text":"<p>Let's update <code>header</code> to allow users to return to the home page when they click on the header box:</p> main.py<pre><code>def header():\n    def navigate_home(e: me.ClickEvent):\n        me.navigate(\"/\")\n        state = me.state(State)\n        state.conversations = []\n\n    with me.box(\n        on_click=navigate_home,\n        style=me.Style(\n            cursor=\"pointer\",\n            padding=me.Padding.all(16),\n        ),\n    ):\n        me.text(\n            \"DuoChat\",\n            style=me.Style(\n                font_weight=500,\n                font_size=24,\n                color=\"#3D3929\",\n                letter_spacing=\"0.3px\",\n            ),\n        )\n</code></pre>"},{"location":"codelab/5/#finalizing-the-chat-experience","title":"Finalizing the Chat Experience","text":"<p>Now that we have a dedicated conversation page with a multi-column layout, let's make some final improvements to enhance the user experience:</p> <ol> <li>Navigate to the conversations page at the start of a conversation.</li> <li>Implement auto-scrolling to keep the latest messages in view.</li> </ol> <p>Update the <code>send_prompt</code> function in <code>main.py</code>:</p> main.py<pre><code>def send_prompt(e: me.ClickEvent):\n    state = me.state(State)\n    if not state.conversations:\n        me.navigate(\"/conversation\")\n        for model in state.models:\n            state.conversations.append(Conversation(model=model, messages=[]))\n    input = state.input\n    state.input = \"\"\n\n    for conversation in state.conversations:\n        model = conversation.model\n        messages = conversation.messages\n        history = messages[:]\n        messages.append(ChatMessage(role=\"user\", content=input))\n        messages.append(ChatMessage(role=\"model\", in_progress=True))\n        yield\n        me.scroll_into_view(key=\"end_of_messages\")\n        if model == Models.GEMINI_1_5_FLASH.value:\n            llm_response = gemini.send_prompt_flash(input, history)\n        elif model == Models.GEMINI_1_5_PRO.value:\n            llm_response = gemini.send_prompt_pro(input, history)\n        elif model == Models.CLAUDE_3_5_SONNET.value:\n            llm_response = claude.call_claude_sonnet(input, history)\n        else:\n            raise Exception(\"Unhandled model\", model)\n        for chunk in llm_response:\n            messages[-1].content += chunk\n            yield\n        messages[-1].in_progress = False\n        yield\n</code></pre>"},{"location":"codelab/5/#running-the-final-application","title":"Running the Final Application","text":"<p>Run the application with <code>mesop main.py</code> and navigate to <code>http://localhost:32123</code>. You should now have a fully functional DuoChat application with the following features:</p> <ol> <li>A home page with example prompts and a model picker.</li> <li>A conversation page with a multi-column layout for different model responses.</li> <li>Real-time streaming of model responses with loading indicators.</li> <li>Auto-scrolling to keep the latest message in view.</li> </ol>"},{"location":"codelab/5/#troubleshooting","title":"Troubleshooting","text":"<p>If you're having trouble, compare your code to the solution.</p>"},{"location":"codelab/5/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've successfully built DuoChat, a Mesop application that allows users to interact with multiple AI models simultaneously. This project demonstrates Mesop's capabilities for creating responsive UIs, managing complex state, and integrating with external APIs.</p> <p>Some potential next steps to further improve the application:</p> <ol> <li>Deploy your app.</li> <li>Add the ability to save and load conversations.</li> <li>Add support for additional AI models or services.</li> </ol> <p>Feel free to experiment with these ideas or come up with your own improvements to enhance the DuoChat experience!</p>"},{"location":"codelab/cloud-run/","title":"Cloud Run Codelab","text":"<p>This is a video tutorial that goes through the process of building and deploying a Mesop app to Cloud Run.</p> <p>Here is a screenshot of the app you will be building.</p> <p></p>"},{"location":"codelab/cloud-run/#part-1-building-a-gemini-powered-mesop-app","title":"Part 1: Building a Gemini powered Mesop app","text":"<p>This video describes how to build a Gemini powered Mesop app.</p>"},{"location":"codelab/cloud-run/#part-2-deploying-to-cloud-run","title":"Part 2: Deploying to Cloud Run","text":"<p>This video describes how deploy the Gemini powered Mesop app to Cloud Run.</p>"},{"location":"codelab/cloud-run/#github-code","title":"GitHub Code","text":"<p>View the source code.</p>"},{"location":"components/","title":"Components","text":"<p>Please read Core Concepts before this as it explains the basics of components. This page provides an overview of the different types of components in Mesop.</p>"},{"location":"components/#types-of-components","title":"Types of components","text":""},{"location":"components/#native-components","title":"Native components","text":"<p>Native components are components implemented using Angular/Javascript. Many of these components wrap Angular Material components. Other components are simple wrappers around DOM elements.</p> <p>If you have a use case that's not supported by the existing native components, please file an issue on GitHub to explain your use case. Given our limited bandwidth, we may not be able to build it soon, but in the future, we will enable Mesop developers to build their own custom native components.</p>"},{"location":"components/#user-defined-components","title":"User-defined components","text":"<p>User-defined components are essentially Python functions which call other components, which can be native components or other user-defined components. It's very easy to write your own components, and it's encouraged to split your app into modular components for better maintainability and reusability.</p>"},{"location":"components/#web-components","title":"Web components","text":"<p>Web components in Mesop are custom HTML elements created using JavaScript and CSS. They enable custom JavaScript execution and bi-directional communication between the browser and server. They can wrap JavaScript libraries and provide stateful client-side interactions. Learn more about web components.</p>"},{"location":"components/#content-components","title":"Content components","text":"<p>Content components allow you to compose components more flexibly than regular components by accepting child(ren) components. A commonly used content component is the button component, which accepts a child component which oftentimes the text component.</p> <p>Example:</p> <pre><code>with me.button():\n  me.text(\"Child\")\n</code></pre> <p>You can also have multiple content components nested:</p> <pre><code>with me.box():\n  with me.box():\n    me.text(\"Grand-child\")\n</code></pre> <p>Sometimes, you may want to define your own content component for better reusability. For example, let's say I want to define a scaffold component which includes a menu positioned on the left and a main content area, I could do the following:</p> <pre><code>@me.content_component\ndef scaffold(url: str):\n  with me.box(style=me.Style(background=\"white\")):\n    menu(url=url)\n    with me.box(style=me.Style(padding=me.Padding(left=MENU_WIDTH))):\n      me.slot()\n</code></pre> <p>Now other components can re-use this <code>scaffold</code> component:</p> <pre><code>def page1():\n  with scaffold(url=\"/page1\"):\n    some_content(...)\n</code></pre> <p>This is similar to Angular's Content Projection.</p>"},{"location":"components/#advanced-content-component-usage","title":"Advanced content component usage","text":""},{"location":"components/#multi-slot-projection","title":"Multi-slot projection","text":"<p>Mesop supports multi-slot projection using named slots.</p> <p>Here is an example:</p> <pre><code>@me.slotclass\nclass LayoutSlots:\n  header: me.NamedSlot\n  content: me.NamedSlot\n  footer: me.NamedSlot\n\n@me.content_component(named_slots=LayoutSlots)\ndef layout():\n  with me.box(style=me.Style(background=\"black\")):\n    me.slot(\"header\")\n  with me.box(style=me.Style(background=\"white\")):\n    me.slot(\"content\")\n  with me.box(style=me.Style(background=\"black\")):\n    me.slot(\"footer\")\n</code></pre> <p>Now other components can re-use this <code>layout</code> component:</p> <pre><code>def page1():\n  with layout() as c:\n    with c.header():\n      me.text(\"Header\")\n    with c.content():\n      me.text(\"Content\")\n    with c.footer():\n      me.text(\"Footer\")\n</code></pre>"},{"location":"components/#composed-content-components","title":"Composed content components","text":"<p>Content components can also use other content components, but you need to be careful since slot rendering cannot be deferred to the parent component.</p> Slot rendering cannot be deferred by setting another slot. <pre><code>@me.content_component\ndef inner():\n    me.slot()\n\n@me.content_component\ndef outer():\n  with inner():\n    me.slot()\n</code></pre> Content components can use content components so long as the slots get rendered by the parent content component. <pre><code>@me.content_component\ndef header(background_color: str):\n  with me.box(style=me.Style(background=background_color)):\n    me.slot()\n\n\n@me.content_component\ndef footer(background_color: str):\n  with me.box(style=me.Style(background=background_color)):\n    me.slot()\n\n\n@me.content_component()\ndef content_layout():\n  with header(background_color=\"black\"):\n    me.text(\"Header\")\n  with me.box(style=me.Style(background=\"white\")):\n    me.slot()\n  with footer(background_color=\"red\")\n    me.text(\"Footer\")\n</code></pre> <p>Now other components can re-use this <code>content_layout</code> component:</p> <pre><code>def page1():\n  with content_layout():\n    me.text(\"Content\")\n</code></pre>"},{"location":"components/#component-key","title":"Component Key","text":"<p>Every native component in Mesop accepts a <code>key</code> argument which is a component identifier. This is used by Mesop to tell Angular whether to reuse the DOM element.</p>"},{"location":"components/#resetting-a-component","title":"Resetting a component","text":"<p>You can reset a component to the initial state (e.g. reset a select component to the unselected state) by giving it a new key value across renders.</p> <p>For example, you can reset a component by \"incrementing\" the key:</p> <pre><code>class State:\n  select_menu_key: int\n\ndef reset(event):\n  state = me.state(State)\n  state.select_menu_key += 1\n\ndef main():\n  state = me.state(State)\n  me.select(key=str(state.select_menu_key),\n            options=[me.SelectOption(label=\"o1\", value=\"o1\")])\n  me.button(label=\"Reset\", on_click=reset)\n</code></pre>"},{"location":"components/#event-handlers","title":"Event handlers","text":"<p>Every Mesop event includes the key of the component which emitted the event. This makes it useful when you want to reuse an event handler for multiple instances of a component:</p> <pre><code>def buttons():\n  for fruit in [\"Apple\", \"Banana\"]:\n    me.button(fruit, key=fruit, on_click=on_click)\n\ndef on_click(event: me.ClickEvent):\n  fruit = event.key\n  print(\"fruit name\", fruit)\n</code></pre> <p>Because a key is a <code>str</code> type, you may sometimes want to store more complex data like a dataclass or a proto object for retrieval in the event handler. To do this, you can serialize and deserialize:</p> <pre><code>import json\nfrom dataclasses import dataclass\n\n@dataclass\nclass Person:\n  name: str\n\ndef buttons():\n  for person in [Person(name=\"Alice\"), Person(name=\"Bob\")]:\n    # serialize dataclass into str\n    key = json.dumps(person.asdict())\n    me.button(person.name, key=key, on_click=on_click)\n\ndef on_click(event: me.ClickEvent):\n  person_dict = json.loads(event.key)\n  # modify this for more complex deserialization\n  person = Person(**person_dict)\n</code></pre> <p>Use component key for reusable event handler</p> <p>This avoids a subtle issue with using closure variables in event handlers.</p>"},{"location":"components/audio/","title":"Audio","text":""},{"location":"components/audio/#overview","title":"Overview","text":"<p>Audio is the equivalent of an <code>&lt;audio&gt;</code> HTML element. Audio displays the browser's native audio controls.</p>"},{"location":"components/audio/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/audio\",\n)\ndef app():\n  \"\"\"\n  In order to autoplay audio, set the `autoplay` attribute to `True`,\n  Note that there are autoplay restrictions in modern browsers, including Chrome,\n  are designed to prevent audio or video from playing automatically without user interaction.\n  This is intended to improve user experience and reduce unwanted interruptions.\n  You can check the [autoplay ability of your application](https://developer.mozilla.org/en-US/docs/Web/Media/Autoplay_guide#autoplay_availability)\n  \"\"\"\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    me.audio(\n      src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-audio/t-rex-roar.mp3\",\n      # autoplay=True\n    )\n</code></pre>"},{"location":"components/audio/#api","title":"API","text":""},{"location":"components/audio/#mesop.components.audio.audio.audio","title":"<code>audio</code>","text":"<p>Creates an audio component.</p> PARAMETER DESCRIPTION <code>src</code> <p>The URL of the audio to be played.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>autoplay</code> <p>boolean value indicating if the audio should be autoplayed or not. Note: There are autoplay restrictions in modern browsers, including Chrome, are designed to prevent audio or video from playing automatically without user interaction. This is intended to improve user experience and reduce unwanted interruptions</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/autocomplete/","title":"Autocomplete","text":""},{"location":"components/autocomplete/#overview","title":"Overview","text":"<p>Autocomplete allows the user to enter free text or select from a list of dynamic values and is based on the Angular Material autocomplete component.</p> <p>This components only renders text labels and values.</p> <p>The autocomplete filters by case-insensitively matching substrings of the option label.</p> <p>Currently, there is no on blur event with this component since the blur event does not get the selected value on the first blur. Due to this ambiguous behavior, the blur event has been left out.</p>"},{"location":"components/autocomplete/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.stateclass\nclass State:\n  raw_value: str\n  selected_value: str = \"California\"\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/autocomplete\",\n)\ndef app():\n  state = me.state(State)\n\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    me.autocomplete(\n      label=\"Select state\",\n      value=state.selected_value,\n      options=_make_autocomplete_options(),\n      on_selection_change=on_value_change,\n      on_enter=on_value_change,\n      on_input=on_input,\n      appearance=\"outline\",\n    )\n\n    if state.selected_value:\n      me.text(\"Selected: \" + state.selected_value)\n\n\ndef on_value_change(\n  e: me.AutocompleteEnterEvent | me.AutocompleteSelectionChangeEvent,\n):\n  state = me.state(State)\n  state.selected_value = e.value\n\n\ndef on_input(e: me.InputEvent):\n  state = me.state(State)\n  state.raw_value = e.value\n\n\ndef _make_autocomplete_options() -&gt; list[me.AutocompleteOptionGroup]:\n  \"\"\"Creates and filter autocomplete options.\n\n  The states list assumed to be alphabetized and we group by the first letter of the\n  state's name.\n  \"\"\"\n  states_options_list = []\n  sub_group = None\n  for state in _STATES:\n    if not sub_group or sub_group.label != state[0]:\n      if sub_group:\n        states_options_list.append(sub_group)\n      sub_group = me.AutocompleteOptionGroup(label=state[0], options=[])\n    sub_group.options.append(me.AutocompleteOption(label=state, value=state))\n  if sub_group:\n    states_options_list.append(sub_group)\n  return states_options_list\n\n\n_STATES = [\n  \"Alabama\",\n  \"Alaska\",\n  \"Arizona\",\n  \"Arkansas\",\n  \"California\",\n  \"Colorado\",\n  \"Connecticut\",\n  \"Delaware\",\n  \"Florida\",\n  \"Georgia\",\n  \"Hawaii\",\n  \"Idaho\",\n  \"Illinois\",\n  \"Indiana\",\n  \"Iowa\",\n  \"Kansas\",\n  \"Kentucky\",\n  \"Louisiana\",\n  \"Maine\",\n  \"Maryland\",\n  \"Massachusetts\",\n  \"Michigan\",\n  \"Minnesota\",\n  \"Mississippi\",\n  \"Missouri\",\n  \"Montana\",\n  \"Nebraska\",\n  \"Nevada\",\n  \"New Hampshire\",\n  \"New Jersey\",\n  \"New Mexico\",\n  \"New York\",\n  \"North Carolina\",\n  \"North Dakota\",\n  \"Ohio\",\n  \"Oklahoma\",\n  \"Oregon\",\n  \"Pennsylvania\",\n  \"Rhode Island\",\n  \"South Carolina\",\n  \"South Dakota\",\n  \"Tennessee\",\n  \"Texas\",\n  \"Utah\",\n  \"Vermont\",\n  \"Virginia\",\n  \"Washington\",\n  \"West Virginia\",\n  \"Wisconsin\",\n  \"Wyoming\",\n]\n</code></pre>"},{"location":"components/autocomplete/#api","title":"API","text":""},{"location":"components/autocomplete/#mesop.components.autocomplete.autocomplete.autocomplete","title":"<code>autocomplete</code>","text":"<p>Creates an autocomplete component.</p> PARAMETER DESCRIPTION <code>options</code> <p>Selectable options from autocomplete.</p> <p> TYPE: <code>Iterable[AutocompleteOption | AutocompleteOptionGroup] | None</code> DEFAULT: <code>None</code> </p> <code>label</code> <p>Label for input.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>on_selection_change</code> <p>Event emitted when the selected value has been changed by the user.</p> <p> TYPE: <code>Callable[[AutocompleteSelectionChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>on_input</code> <p>input is fired whenever the input has changed (e.g. user types).</p> <p> TYPE: <code>Callable[[InputEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>on_enter</code> <p>triggers when the browser detects an \"Enter\" key on a keyup native browser event.</p> <p> TYPE: <code>Callable[[AutocompleteEnterEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>appearance</code> <p>The form field appearance style.</p> <p> TYPE: <code>Literal['fill', 'outline']</code> DEFAULT: <code>'fill'</code> </p> <code>disabled</code> <p>Whether it's disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>placeholder</code> <p>Placeholder value.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>value</code> <p>Initial value.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>readonly</code> <p>Whether the element is readonly.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>hide_required_marker</code> <p>Whether the required marker should be hidden.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>color</code> <p>The color palette for the form field.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn']</code> DEFAULT: <code>'primary'</code> </p> <code>float_label</code> <p>Whether the label should always float or float as the user types.</p> <p> TYPE: <code>Literal['always', 'auto']</code> DEFAULT: <code>'auto'</code> </p> <code>subscript_sizing</code> <p>Whether the form field should reserve space for one line of hint/error text (default) or to have the spacing grow from 0px as needed based on the size of the hint/error content. Note that when using dynamic sizing, layout shifts will occur when hint/error text changes.</p> <p> TYPE: <code>Literal['fixed', 'dynamic']</code> DEFAULT: <code>'fixed'</code> </p> <code>hint_label</code> <p>Text for the form field hint.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>style</code> <p>Style for input.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/autocomplete/#mesop.components.autocomplete.autocomplete.AutocompleteOption","title":"<code>AutocompleteOption</code>  <code>dataclass</code>","text":"<p>Represents an option in the autocomplete drop down.</p> ATTRIBUTE DESCRIPTION <code>label</code> <p>Content to show for the autocomplete option</p> <p> TYPE: <code>str | None</code> </p> <code>value</code> <p>The value of this autocomplete option.</p> <p> TYPE: <code>str | None</code> </p>"},{"location":"components/autocomplete/#mesop.components.autocomplete.autocomplete.AutocompleteOptionGroup","title":"<code>AutocompleteOptionGroup</code>  <code>dataclass</code>","text":"<p>Represents an option group to group options in the autocomplete drop down.</p> ATTRIBUTE DESCRIPTION <code>label</code> <p>Group label</p> <p> TYPE: <code>str</code> </p> <code>options</code> <p>Autocomplete options under this group</p> <p> TYPE: <code>list[AutocompleteOption]</code> </p>"},{"location":"components/autocomplete/#mesop.components.autocomplete.autocomplete.AutocompleteEnterEvent","title":"<code>AutocompleteEnterEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Represents an \"Enter\" keyboard event on an autocomplete component.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>Input/selected value.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/autocomplete/#mesop.components.autocomplete.autocomplete.AutocompleteSelectionChangeEvent","title":"<code>AutocompleteSelectionChangeEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Represents a selection change event.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>Selected value.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/autocomplete/#mesop.events.InputEvent","title":"<code>InputEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Represents a user input event.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>Input value.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/badge/","title":"Badge","text":""},{"location":"components/badge/#overview","title":"Overview","text":"<p>Badge decorates a UI component and is oftentimes used for unread message count and is based on the Angular Material badge component.</p>"},{"location":"components/badge/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/badge\",\n)\ndef app():\n  with me.box(\n    style=me.Style(\n      display=\"block\",\n      padding=me.Padding(top=16, right=16, bottom=16, left=16),\n      height=50,\n      width=30,\n    )\n  ):\n    with me.badge(content=\"1\", size=\"medium\"):\n      me.text(text=\"text with badge\")\n</code></pre>"},{"location":"components/badge/#api","title":"API","text":""},{"location":"components/badge/#mesop.components.badge.badge.badge","title":"<code>badge</code>","text":"<p>Creates a Badge component. Badge is a composite component.</p> PARAMETER DESCRIPTION <code>color</code> <p>The color of the badge. Can be <code>primary</code>, <code>accent</code>, or <code>warn</code>.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn']</code> DEFAULT: <code>'primary'</code> </p> <code>overlap</code> <p>Whether the badge should overlap its contents or not</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disabled</code> <p>Whether the badge is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>position</code> <p>Position the badge should reside. Accepts any combination of 'above'|'below' and 'before'|'after'</p> <p> TYPE: <code>Literal['above after', 'above before', 'below before', 'below after', 'before', 'after', 'above', 'below']</code> DEFAULT: <code>'above after'</code> </p> <code>content</code> <p>The content for the badge</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>description</code> <p>Message used to describe the decorated element via aria-describedby</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>size</code> <p>Size of the badge. Can be 'small', 'medium', or 'large'.</p> <p> TYPE: <code>Literal['small', 'medium', 'large']</code> DEFAULT: <code>'small'</code> </p> <code>hidden</code> <p>Whether the badge is hidden.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/box/","title":"Box","text":""},{"location":"components/box/#overview","title":"Overview","text":"<p>Box is a content component which acts as a container to group children components and styling them.</p>"},{"location":"components/box/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/box\",\n)\ndef app():\n  with me.box(style=me.Style(background=\"red\", padding=me.Padding.all(16))):\n    with me.box(\n      style=me.Style(\n        background=\"green\",\n        height=50,\n        margin=me.Margin.symmetric(vertical=24, horizontal=12),\n        border=me.Border.symmetric(\n          horizontal=me.BorderSide(width=2, color=\"pink\", style=\"solid\"),\n          vertical=me.BorderSide(width=2, color=\"orange\", style=\"solid\"),\n        ),\n      )\n    ):\n      me.text(text=\"hi1\")\n      me.text(text=\"hi2\")\n\n    with me.box(\n      style=me.Style(\n        background=\"blue\",\n        height=50,\n        margin=me.Margin.all(16),\n        border=me.Border.all(\n          me.BorderSide(width=2, color=\"yellow\", style=\"dotted\")\n        ),\n        border_radius=10,\n      )\n    ):\n      me.text(text=\"Example with all sides bordered\")\n\n    with me.box(\n      style=me.Style(\n        background=\"purple\",\n        height=50,\n        margin=me.Margin.symmetric(vertical=24, horizontal=12),\n        border=me.Border.symmetric(\n          vertical=me.BorderSide(width=4, color=\"white\", style=\"double\")\n        ),\n      )\n    ):\n      me.text(text=\"Example with top and bottom borders\")\n\n    with me.box(\n      style=me.Style(\n        background=\"cyan\",\n        height=50,\n        margin=me.Margin.symmetric(vertical=24, horizontal=12),\n        border=me.Border.symmetric(\n          horizontal=me.BorderSide(width=2, color=\"black\", style=\"groove\")\n        ),\n      )\n    ):\n      me.text(text=\"Example with left and right borders\")\n</code></pre>"},{"location":"components/box/#api","title":"API","text":""},{"location":"components/box/#mesop.components.box.box.box","title":"<code>box</code>","text":"<p>Creates a box component.</p> PARAMETER DESCRIPTION <code>style</code> <p>Style to apply to component. Follows HTML Element inline style API.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>on_click</code> <p>The callback function that is called when the box is clicked. It receives a ClickEvent as its only argument.</p> <p> TYPE: <code>Callable[[ClickEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>on_right_click</code> <p>The callback function that is called when the box is right clicked. This will disable the default context menu behavior if set.</p> <p> TYPE: <code>Callable[[RightClickEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>CSS classes.</p> <p> TYPE: <code>list[str] | str</code> DEFAULT: <code>''</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>The created box component.</p>"},{"location":"components/button/","title":"Button","text":""},{"location":"components/button/#overview","title":"Overview","text":"<p>Button is based on the Angular Material button component.</p>"},{"location":"components/button/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/button\",\n)\ndef main():\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    me.text(\"Button types:\", style=me.Style(margin=me.Margin(bottom=12)))\n    with me.box(style=me.Style(display=\"flex\", flex_direction=\"row\", gap=12)):\n      me.button(\"default\")\n      me.button(\"raised\", type=\"raised\")\n      me.button(\"flat\", type=\"flat\")\n      me.button(\"stroked\", type=\"stroked\")\n\n    me.text(\n      \"Button colors:\", style=me.Style(margin=me.Margin(top=12, bottom=12))\n    )\n    with me.box(style=me.Style(display=\"flex\", flex_direction=\"row\", gap=12)):\n      me.button(\"default\", type=\"flat\")\n      me.button(\"primary\", color=\"primary\", type=\"flat\")\n      me.button(\"secondary\", color=\"accent\", type=\"flat\")\n      me.button(\"warn\", color=\"warn\", type=\"flat\")\n</code></pre>"},{"location":"components/button/#api","title":"API","text":""},{"location":"components/button/#mesop.components.button.button.button","title":"<code>button</code>","text":"<p>Creates a simple text Button component.</p> PARAMETER DESCRIPTION <code>label</code> <p>Text label for button</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>on_click</code> <p>click is a native browser event.</p> <p> TYPE: <code>Callable[[ClickEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>type</code> <p>Type of button style to use</p> <p> TYPE: <code>Literal['raised', 'flat', 'stroked'] | None</code> DEFAULT: <code>None</code> </p> <code>color</code> <p>Theme color palette of the button</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn'] | None</code> DEFAULT: <code>None</code> </p> <code>disable_ripple</code> <p>Whether the ripple effect is disabled or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disabled</code> <p>Whether the button is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>style</code> <p>Style for the component.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/button/#mesop.components.button.button.content_button","title":"<code>content_button</code>","text":"<p>Creates a button component, which is a composite component. Typically, you would use a text or icon component as a child.</p> <p>Intended for advanced use cases.</p> PARAMETER DESCRIPTION <code>on_click</code> <p>click is a native browser event.</p> <p> TYPE: <code>Callable[[ClickEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>type</code> <p>Type of button style to use</p> <p> TYPE: <code>Literal['raised', 'flat', 'stroked', 'icon'] | None</code> DEFAULT: <code>None</code> </p> <code>color</code> <p>Theme color palette of the button</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn'] | None</code> DEFAULT: <code>None</code> </p> <code>disable_ripple</code> <p>Whether the ripple effect is disabled or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disabled</code> <p>Whether the button is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>style</code> <p>Style for the component.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/button/#mesop.events.ClickEvent","title":"<code>ClickEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Represents a user click event.</p> ATTRIBUTE DESCRIPTION <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p> <code>is_target</code> <p>Whether the clicked target is the component which attached the event handler.</p> <p> TYPE: <code>bool</code> </p> <code>client_x</code> <p>X coordinate relative to the viewport.</p> <p> TYPE: <code>float</code> </p> <code>client_y</code> <p>Y coordinate relative to the viewport.</p> <p> TYPE: <code>float</code> </p> <code>page_x</code> <p>X coordinate relative to the entire document, including scrolled parts.</p> <p> TYPE: <code>float</code> </p> <code>page_y</code> <p>Y coordinate relative to the entire document, including scrolled parts.</p> <p> TYPE: <code>float</code> </p> <code>offset_x</code> <p>X coordinate relative to the element.</p> <p> TYPE: <code>float</code> </p> <code>offset_y</code> <p>Y coordinate relative to the element.</p> <p> TYPE: <code>float</code> </p>"},{"location":"components/button_toggle/","title":"Button toggle","text":""},{"location":"components/button_toggle/#overview","title":"Overview","text":"<p>Button toggle is based on the Angular Material button toggle component.</p>"},{"location":"components/button_toggle/#examples","title":"Examples","text":"<pre><code>from dataclasses import field\n\nimport mesop as me\n\n\n@me.stateclass\nclass State:\n  selected_values: list[str] = field(\n    default_factory=lambda: [\"bold\", \"underline\"]\n  )\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/button_toggle\",\n)\ndef app():\n  state = me.state(State)\n\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    me.button_toggle(\n      value=state.selected_values,\n      buttons=[\n        me.ButtonToggleButton(label=\"Bold\", value=\"bold\"),\n        me.ButtonToggleButton(label=\"Italic\", value=\"italic\"),\n        me.ButtonToggleButton(label=\"Underline\", value=\"underline\"),\n      ],\n      multiple=True,\n      hide_selection_indicator=False,\n      disabled=False,\n      on_change=on_change,\n      style=me.Style(margin=me.Margin(bottom=20)),\n    )\n\n    me.text(\"Select buttons: \" + \" \".join(state.selected_values))\n\n\ndef on_change(e: me.ButtonToggleChangeEvent):\n  state = me.state(State)\n  state.selected_values = e.values\n</code></pre>"},{"location":"components/button_toggle/#api","title":"API","text":""},{"location":"components/button_toggle/#mesop.components.button_toggle.button_toggle.button_toggle","title":"<code>button_toggle</code>","text":"<p>This function creates a button toggle.</p> PARAMETER DESCRIPTION <code>value</code> <p>Selected values of the button toggle.</p> <p> TYPE: <code>list[str] | str</code> DEFAULT: <code>''</code> </p> <code>buttons</code> <p>List of button toggles.</p> <p> TYPE: <code>Iterable[ButtonToggleButton]</code> </p> <code>on_change</code> <p>Event emitted when the group's value changes.</p> <p> TYPE: <code>Callable[[ButtonToggleChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>multiple</code> <p>Whether multiple button toggles can be selected.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disabled</code> <p>Whether multiple button toggle group is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>hide_selection_indicator</code> <p>Whether checkmark indicator for button toggle groups is hidden.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>style</code> <p>Style for the component.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/button_toggle/#mesop.components.button_toggle.button_toggle.ButtonToggleButton","title":"<code>ButtonToggleButton</code>  <code>dataclass</code>","text":"ATTRIBUTE DESCRIPTION <code>label</code> <p>Content to show for the button toggle button</p> <p> TYPE: <code>str | None</code> </p> <code>value</code> <p>The value of the button toggle button.</p> <p> TYPE: <code>str | None</code> </p>"},{"location":"components/button_toggle/#mesop.components.button_toggle.button_toggle.ButtonToggleChangeEvent","title":"<code>ButtonToggleChangeEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Event representing a change in the button toggle component's selected values.</p> ATTRIBUTE DESCRIPTION <code>values</code> <p>The new values of the button toggle component after the change.</p> <p> TYPE: <code>list[str]</code> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/button_toggle/#mesop.components.button_toggle.button_toggle.ButtonToggleChangeEvent.value","title":"<code>value</code>  <code>property</code>","text":"<p>Shortcut for returning a single value.</p>"},{"location":"components/card/","title":"Card","text":""},{"location":"components/card/#overview","title":"Overview","text":"<p>Card is based on the Angular Material card component.</p>"},{"location":"components/card/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"],\n  ),\n  path=\"/card\",\n)\ndef app():\n  with me.box(\n    style=me.Style(\n      display=\"flex\",\n      flex_direction=\"column\",\n      gap=15,\n      margin=me.Margin.all(15),\n      max_width=500,\n    )\n  ):\n    with me.card(appearance=\"outlined\"):\n      me.card_header(\n        title=\"Grapefruit\",\n        subtitle=\"Kind of fruit\",\n        image=\"https://interactive-examples.mdn.mozilla.net/media/cc0-images/grapefruit-slice-332-332.jpg\",\n      )\n      me.image(\n        style=me.Style(\n          width=\"100%\",\n        ),\n        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-images/grapefruit-slice-332-332.jpg\",\n      )\n      with me.card_content():\n        me.text(\n          \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed augue ultricies, laoreet nunc eget, ultricies augue. In ornare bibendum mauris vel sodales. Donec ut interdum felis. Nulla facilisi. Morbi a laoreet turpis, sed posuere arcu. Nam nisi neque, molestie vitae euismod eu, sollicitudin eu lectus. Pellentesque orci metus, finibus id faucibus et, ultrices quis dui. Duis in augue ac metus tristique lacinia.\"\n        )\n\n      with me.card_actions(align=\"end\"):\n        me.button(label=\"Add to cart\")\n        me.button(label=\"Buy\")\n\n    with me.card(appearance=\"raised\"):\n      me.card_header(\n        title=\"Grapefruit\",\n        subtitle=\"Kind of fruit\",\n        image=\"https://interactive-examples.mdn.mozilla.net/media/cc0-images/grapefruit-slice-332-332.jpg\",\n        image_type=\"small\",\n      )\n\n      with me.card_content():\n        me.text(\n          \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed augue ultricies, laoreet nunc eget, ultricies augue. In ornare bibendum mauris vel sodales. Donec ut interdum felis. Nulla facilisi. Morbi a laoreet turpis, sed posuere arcu. Nam nisi neque, molestie vitae euismod eu, sollicitudin eu lectus. Pellentesque orci metus, finibus id faucibus et, ultrices quis dui. Duis in augue ac metus tristique lacinia.\"\n        )\n\n      with me.card_actions(align=\"start\"):\n        me.button(label=\"Add to cart\")\n        me.button(label=\"Buy\")\n\n    with me.card(appearance=\"outlined\"):\n      me.card_header(\n        title=\"Grapefruit\",\n        subtitle=\"Kind of fruit\",\n        image=\"https://interactive-examples.mdn.mozilla.net/media/cc0-images/grapefruit-slice-332-332.jpg\",\n        image_type=\"medium\",\n      )\n\n      with me.card_content():\n        me.text(\n          \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed augue ultricies, laoreet nunc eget, ultricies augue. In ornare bibendum mauris vel sodales. Donec ut interdum felis. Nulla facilisi. Morbi a laoreet turpis, sed posuere arcu. Nam nisi neque, molestie vitae euismod eu, sollicitudin eu lectus. Pellentesque orci metus, finibus id faucibus et, ultrices quis dui. Duis in augue ac metus tristique lacinia.\"\n        )\n\n      with me.card_actions(align=\"start\"):\n        me.button(label=\"Add to cart\")\n        me.button(label=\"Buy\")\n\n      me.card_header(\n        title=\"Grapefruit\",\n        image=\"https://interactive-examples.mdn.mozilla.net/media/cc0-images/grapefruit-slice-332-332.jpg\",\n        image_type=\"large\",\n      )\n\n      with me.card_content():\n        me.text(\n          \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed augue ultricies, laoreet nunc eget, ultricies augue. In ornare bibendum mauris vel sodales. Donec ut interdum felis. Nulla facilisi. Morbi a laoreet turpis, sed posuere arcu. Nam nisi neque, molestie vitae euismod eu, sollicitudin eu lectus. Pellentesque orci metus, finibus id faucibus et, ultrices quis dui. Duis in augue ac metus tristique lacinia.\"\n        )\n\n      with me.card_actions(align=\"end\"):\n        me.button(label=\"Add to cart\")\n        me.button(label=\"Buy\")\n\n      me.card_header(\n        title=\"Grapefruit\",\n        image_type=\"large\",\n      )\n\n      with me.card_content():\n        me.text(\n          \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed augue ultricies, laoreet nunc eget, ultricies augue. In ornare bibendum mauris vel sodales. Donec ut interdum felis. Nulla facilisi. Morbi a laoreet turpis, sed posuere arcu. Nam nisi neque, molestie vitae euismod eu, sollicitudin eu lectus. Pellentesque orci metus, finibus id faucibus et, ultrices quis dui. Duis in augue ac metus tristique lacinia.\"\n        )\n</code></pre>"},{"location":"components/card/#api","title":"API","text":""},{"location":"components/card/#mesop.components.card.card.card","title":"<code>card</code>","text":"<p>This function creates a card.</p> PARAMETER DESCRIPTION <code>appearance</code> <p>Card appearance style: outlined or raised.</p> <p> TYPE: <code>Literal['outlined', 'raised']</code> DEFAULT: <code>'outlined'</code> </p> <code>style</code> <p>Style for the component.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/card/#mesop.components.card_header.card_header.card_header","title":"<code>card_header</code>","text":"<p>This function creates a card_header.</p> <p>This component is meant to be used with the <code>card</code> component. It is used for the header of a card.</p> <p>This component is a optional. It is mainly used as a convenience for consistent formatting with the card component.</p> PARAMETER DESCRIPTION <code>title</code> <p>Title</p> <p> TYPE: <code>str</code> </p> <code>subtitle</code> <p>Optional subtitle</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>image</code> <p>Optional image</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>image_type</code> <p>Display style for the image. Avatar will display as a circular image to the left of the title/subtitle. Small/medium/large/extra-large will display a right-aligned image of the specified size.</p> <p> TYPE: <code>Literal['avatar', 'small', 'medium', 'large', 'extra-large']</code> DEFAULT: <code>'avatar'</code> </p>"},{"location":"components/card/#mesop.components.card_content.card_content.card_content","title":"<code>card_content</code>","text":"<p>This function creates a card_content.</p> <p>This component is meant to be used with the <code>card</code> component. It is used for the contents of a card that</p> <p>This component is a optional. It is mainly used as a convenience for consistent formatting with the card component.</p>"},{"location":"components/card/#mesop.components.card_actions.card_actions.card_actions","title":"<code>card_actions</code>","text":"<p>This function creates a card_actions.</p> <p>This component is meant to be used with the <code>card</code> component. It is used for the bottom area of a card that contains action buttons.</p> <p>This component is a optional. It is mainly used as a convenience for consistent formatting with the card component.</p> PARAMETER DESCRIPTION <code>align</code> <p>Align elements to the left (start) or right (end).</p> <p> TYPE: <code>Literal['start', 'end']</code> </p>"},{"location":"components/chat/","title":"Chat","text":""},{"location":"components/chat/#overview","title":"Overview","text":"<p>Chat component is a quick way to create a simple chat interface. Chat is part of Mesop Labs.</p>"},{"location":"components/chat/#examples","title":"Examples","text":"<pre><code>import random\nimport time\n\nimport mesop as me\nimport mesop.labs as mel\n\n\ndef on_load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/chat\",\n  title=\"Mesop Demo Chat\",\n  on_load=on_load,\n)\ndef page():\n  mel.chat(transform, title=\"Mesop Demo Chat\", bot_user=\"Mesop Bot\")\n\n\ndef transform(input: str, history: list[mel.ChatMessage]):\n  for line in random.sample(LINES, random.randint(3, len(LINES) - 1)):\n    time.sleep(0.3)\n    yield line + \" \"\n\n\nLINES = [\n  \"Mesop is a Python-based UI framework designed to simplify web UI development for engineers without frontend experience.\",\n  \"It leverages the power of the Angular web framework and Angular Material components, allowing rapid construction of web demos and internal tools.\",\n  \"With Mesop, developers can enjoy a fast build-edit-refresh loop thanks to its hot reload feature, making UI tweaks and component integration seamless.\",\n  \"Deployment is straightforward, utilizing standard HTTP technologies.\",\n  \"Mesop's component library aims for comprehensive Angular Material component coverage, enhancing UI flexibility and composability.\",\n  \"It supports custom components for specific use cases, ensuring developers can extend its capabilities to fit their unique requirements.\",\n  \"Mesop's roadmap includes expanding its component library and simplifying the onboarding processs.\",\n]\n</code></pre>"},{"location":"components/chat/#api","title":"API","text":""},{"location":"components/chat/#mesop.labs.chat.chat","title":"<code>chat</code>","text":"<p>Creates a simple chat UI which takes in a prompt and chat history and returns a response to the prompt.</p> <p>This function creates event handlers for text input and output operations using the provided function <code>transform</code> to process the input and generate the output.</p> PARAMETER DESCRIPTION <code>transform</code> <p>Function that takes in a prompt and chat history and returns a response to the prompt.</p> <p> TYPE: <code>Callable[[str, list[ChatMessage]], Generator[str, None, None] | str]</code> </p> <code>title</code> <p>Headline text to display at the top of the UI.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>bot_user</code> <p>Name of your bot / assistant.</p> <p> TYPE: <code>str</code> DEFAULT: <code>_BOT_USER_DEFAULT</code> </p>"},{"location":"components/checkbox/","title":"Checkbox","text":""},{"location":"components/checkbox/#overview","title":"Overview","text":"<p>Checkbox is a multi-selection form control and is based on the Angular Material checkbox component.</p>"},{"location":"components/checkbox/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.stateclass\nclass State:\n  checked: bool\n\n\ndef on_update(event: me.CheckboxChangeEvent):\n  state = me.state(State)\n  state.checked = event.checked\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/checkbox\",\n)\ndef app():\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    state = me.state(State)\n    me.checkbox(\n      \"Simple checkbox\",\n      on_change=on_update,\n    )\n\n    if state.checked:\n      me.text(text=\"is checked\")\n    else:\n      me.text(text=\"is not checked\")\n</code></pre>"},{"location":"components/checkbox/#api","title":"API","text":""},{"location":"components/checkbox/#mesop.components.checkbox.checkbox.checkbox","title":"<code>checkbox</code>","text":"<p>Creates a simple Checkbox component with a text label.</p> PARAMETER DESCRIPTION <code>label</code> <p>Text label for checkbox</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>on_change</code> <p>Event emitted when the checkbox's <code>checked</code> value changes.</p> <p> TYPE: <code>Callable[[CheckboxChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>on_indeterminate_change</code> <p>Event emitted when the checkbox's <code>indeterminate</code> value changes.</p> <p> TYPE: <code>Callable[[CheckboxIndeterminateChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>label_position</code> <p>Whether the label should appear after or before the checkbox. Defaults to 'after'</p> <p> TYPE: <code>Literal['before', 'after']</code> DEFAULT: <code>'after'</code> </p> <code>disable_ripple</code> <p>Whether the checkbox has a ripple.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tab_index</code> <p>Tabindex for the checkbox.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>color</code> <p>Palette color of the checkbox.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn'] | None</code> DEFAULT: <code>None</code> </p> <code>checked</code> <p>Whether the checkbox is checked.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disabled</code> <p>Whether the checkbox is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>indeterminate</code> <p>Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to represent a checkbox with three states, e.g. a checkbox that represents a nested list of checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately set to false.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>style</code> <p>Style for the component.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/checkbox/#mesop.components.checkbox.checkbox.content_checkbox","title":"<code>content_checkbox</code>","text":"<p>Creates a Checkbox component which is a composite component. Typically, you would use a text or icon component as a child.</p> <p>Intended for advanced use cases.</p> PARAMETER DESCRIPTION <code>on_change</code> <p>Event emitted when the checkbox's <code>checked</code> value changes.</p> <p> TYPE: <code>Callable[[CheckboxChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>on_indeterminate_change</code> <p>Event emitted when the checkbox's <code>indeterminate</code> value changes.</p> <p> TYPE: <code>Callable[[CheckboxIndeterminateChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>label_position</code> <p>Whether the label should appear after or before the checkbox. Defaults to 'after'</p> <p> TYPE: <code>Literal['before', 'after']</code> DEFAULT: <code>'after'</code> </p> <code>disable_ripple</code> <p>Whether the checkbox has a ripple.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tab_index</code> <p>Tabindex for the checkbox.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>color</code> <p>Palette color of the checkbox.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn'] | None</code> DEFAULT: <code>None</code> </p> <code>checked</code> <p>Whether the checkbox is checked.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disabled</code> <p>Whether the checkbox is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>indeterminate</code> <p>Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to represent a checkbox with three states, e.g. a checkbox that represents a nested list of checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately set to false.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>style</code> <p>Style for the component.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/checkbox/#mesop.components.checkbox.checkbox.CheckboxChangeEvent","title":"<code>CheckboxChangeEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Represents a checkbox state change event.</p> ATTRIBUTE DESCRIPTION <code>checked</code> <p>The new checked state of the checkbox.</p> <p> TYPE: <code>bool</code> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/checkbox/#mesop.components.checkbox.checkbox.CheckboxIndeterminateChangeEvent","title":"<code>CheckboxIndeterminateChangeEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Represents a checkbox indeterminate state change event.</p> ATTRIBUTE DESCRIPTION <code>checked</code> <p>The new indeterminate state of the checkbox.</p> <p> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/code/","title":"Code","text":""},{"location":"components/code/#overview","title":"Overview","text":"<p>Code is used to render code with syntax highlighting. <code>code</code> is a simple wrapper around markdown.</p>"},{"location":"components/code/#examples","title":"Examples","text":"<pre><code>import inspect\n\nimport mesop as me\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/code_demo\",\n)\ndef code_demo():\n  with me.box(\n    style=me.Style(\n      padding=me.Padding.all(15),\n      background=me.theme_var(\"surface-container-lowest\"),\n    )\n  ):\n    me.text(\"Defaults to Python\")\n    me.code(\"a = 123\")\n\n    me.text(\"Can set to other languages\")\n    me.code(\"&lt;div class='a'&gt;foo&lt;/div&gt;\", language=\"html\")\n\n    me.text(\"Bigger code block\")\n    me.code(inspect.getsource(me))\n</code></pre>"},{"location":"components/code/#api","title":"API","text":""},{"location":"components/code/#mesop.components.code.code.code","title":"<code>code</code>","text":"<p>Creates a code component which displays code with syntax highlighting.</p>"},{"location":"components/date_picker/","title":"Date picker","text":""},{"location":"components/date_picker/#overview","title":"Overview","text":"<p>Date picker allows the user to enter free text or select a date from a calendar widget. and is based on the Angular Material datapicker component.</p>"},{"location":"components/date_picker/#examples","title":"Examples","text":"<pre><code>from dataclasses import field\nfrom datetime import date\n\nimport mesop as me\n\n\n@me.stateclass\nclass State:\n  picked_date: date | None = field(default_factory=lambda: date(2024, 10, 1))\n\n\ndef on_load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  path=\"/date_picker\",\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  on_load=on_load,\n)\ndef app():\n  state = me.state(State)\n  with me.box(\n    style=me.Style(\n      display=\"flex\",\n      flex_direction=\"column\",\n      gap=15,\n      padding=me.Padding.all(15),\n    )\n  ):\n    me.date_picker(\n      label=\"Date\",\n      disabled=False,\n      placeholder=\"9/1/2024\",\n      required=True,\n      value=state.picked_date,\n      readonly=False,\n      hide_required_marker=False,\n      color=\"accent\",\n      float_label=\"always\",\n      appearance=\"outline\",\n      on_change=on_date_change,\n    )\n\n    me.text(\"Selected date: \" + _render_date(state.picked_date))\n\n\ndef on_date_change(e: me.DatePickerChangeEvent):\n  state = me.state(State)\n  state.picked_date = e.date\n\n\ndef _render_date(maybe_date: date | None) -&gt; str:\n  if maybe_date:\n    return maybe_date.strftime(\"%Y-%m-%d\")\n  return \"None\"\n</code></pre>"},{"location":"components/date_picker/#api","title":"API","text":""},{"location":"components/date_picker/#mesop.components.datepicker.datepicker.date_picker","title":"<code>date_picker</code>","text":"<p>Creates a date picker component.</p> PARAMETER DESCRIPTION <code>label</code> <p>Label for date picker input.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>on_change</code> <p>Fires when a valid date value has been specified through Calendar date selection or user input blur.</p> <p> TYPE: <code>Callable[[DatePickerChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>appearance</code> <p>The form field appearance style.</p> <p> TYPE: <code>Literal['fill', 'outline']</code> DEFAULT: <code>'fill'</code> </p> <code>style</code> <p>Style for date picker input.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether it's disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>placeholder</code> <p>Placeholder value.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>required</code> <p>Whether it's required.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>value</code> <p>Initial value.</p> <p> TYPE: <code>date | None</code> DEFAULT: <code>None</code> </p> <code>readonly</code> <p>Whether the element is readonly.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>hide_required_marker</code> <p>Whether the required marker should be hidden.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>color</code> <p>The color palette for the form field.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn']</code> DEFAULT: <code>'primary'</code> </p> <code>float_label</code> <p>Whether the label should always float or float as the user types.</p> <p> TYPE: <code>Literal['always', 'auto']</code> DEFAULT: <code>'auto'</code> </p> <code>subscript_sizing</code> <p>Whether the form field should reserve space for one line of hint/error text (default) or to have the spacing grow from 0px as needed based on the size of the hint/error content. Note that when using dynamic sizing, layout shifts will occur when hint/error text changes.</p> <p> TYPE: <code>Literal['fixed', 'dynamic']</code> DEFAULT: <code>'fixed'</code> </p> <code>hint_label</code> <p>Text for the form field hint.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/date_picker/#mesop.components.datepicker.datepicker.DatePickerChangeEvent","title":"<code>DatePickerChangeEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Represents a date picker change event.</p> <p>This event will only fire if a valid date is specified.</p> ATTRIBUTE DESCRIPTION <code>date</code> <p>Date value</p> <p> TYPE: <code>date</code> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/date_range_picker/","title":"Date range picker","text":""},{"location":"components/date_range_picker/#overview","title":"Overview","text":"<p>Date range picker allows the user to enter free text or select a dates from a calendar widget. and is based on the Angular Material datapicker component.</p>"},{"location":"components/date_range_picker/#examples","title":"Examples","text":"<pre><code>from dataclasses import field\nfrom datetime import date\n\nimport mesop as me\n\n\n@me.stateclass\nclass State:\n  picked_start_date: date | None = field(\n    default_factory=lambda: date(2024, 10, 1)\n  )\n  picked_end_date: date | None = field(\n    default_factory=lambda: date(2024, 11, 1)\n  )\n\n\ndef on_load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  path=\"/date_range_picker\",\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  on_load=on_load,\n)\ndef app():\n  state = me.state(State)\n  with me.box(\n    style=me.Style(\n      display=\"flex\",\n      flex_direction=\"column\",\n      gap=15,\n      padding=me.Padding.all(15),\n    )\n  ):\n    me.date_range_picker(\n      label=\"Date Range\",\n      disabled=False,\n      placeholder_start_date=\"9/1/2024\",\n      placeholder_end_date=\"10/1/2024\",\n      required=True,\n      start_date=state.picked_start_date,\n      end_date=state.picked_end_date,\n      readonly=False,\n      hide_required_marker=False,\n      color=\"accent\",\n      float_label=\"always\",\n      appearance=\"outline\",\n      on_change=on_date_range_change,\n    )\n\n    me.text(\"Start date: \" + _render_date(state.picked_start_date))\n    me.text(\"End date: \" + _render_date(state.picked_end_date))\n\n\ndef on_date_range_change(e: me.DateRangePickerChangeEvent):\n  state = me.state(State)\n  state.picked_start_date = e.start_date\n  state.picked_end_date = e.end_date\n\n\ndef _render_date(maybe_date: date | None) -&gt; str:\n  if maybe_date:\n    return maybe_date.strftime(\"%Y-%m-%d\")\n  return \"None\"\n</code></pre>"},{"location":"components/date_range_picker/#api","title":"API","text":""},{"location":"components/date_range_picker/#mesop.components.date_range_picker.date_range_picker.date_range_picker","title":"<code>date_range_picker</code>","text":"<p>Creates a date range picker component.</p> PARAMETER DESCRIPTION <code>label</code> <p>Label for date range picker input.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>on_change</code> <p>Fires when valid date values for both start/end have been specified through Calendar date selection or user input blur.</p> <p> TYPE: <code>Callable[[DateRangePickerChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>appearance</code> <p>The form field appearance style.</p> <p> TYPE: <code>Literal['fill', 'outline']</code> DEFAULT: <code>'fill'</code> </p> <code>style</code> <p>Style for date range picker input.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether it's disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>placeholder_start_date</code> <p>Start date placeholder value.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>placeholder_end_date</code> <p>End date placeholder value.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>required</code> <p>Whether it's required.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>start_date</code> <p>Start date initial value.</p> <p> TYPE: <code>date | None</code> DEFAULT: <code>None</code> </p> <code>end_date</code> <p>End date initial value.</p> <p> TYPE: <code>date | None</code> DEFAULT: <code>None</code> </p> <code>readonly</code> <p>Whether the element is readonly.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>hide_required_marker</code> <p>Whether the required marker should be hidden.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>color</code> <p>The color palette for the form field.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn']</code> DEFAULT: <code>'primary'</code> </p> <code>float_label</code> <p>Whether the label should always float or float as the user types.</p> <p> TYPE: <code>Literal['always', 'auto']</code> DEFAULT: <code>'auto'</code> </p> <code>subscript_sizing</code> <p>Whether the form field should reserve space for one line of hint/error text (default) or to have the spacing grow from 0px as needed based on the size of the hint/error content. Note that when using dynamic sizing, layout shifts will occur when hint/error text changes.</p> <p> TYPE: <code>Literal['fixed', 'dynamic']</code> DEFAULT: <code>'fixed'</code> </p> <code>hint_label</code> <p>Text for the form field hint.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/date_range_picker/#mesop.components.date_range_picker.date_range_picker.DateRangePickerChangeEvent","title":"<code>DateRangePickerChangeEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Represents a date range picker change event.</p> <p>This event will only fire if start and end dates are valid dates.</p> ATTRIBUTE DESCRIPTION <code>start_date</code> <p>Start date</p> <p> TYPE: <code>date</code> </p> <code>end_date</code> <p>End date</p> <p> TYPE: <code>date</code> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/divider/","title":"Divider","text":""},{"location":"components/divider/#overview","title":"Overview","text":"<p>Divider is used to provide visual separation and is based on the Angular Material divider component.</p>"},{"location":"components/divider/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/divider\",\n)\ndef app():\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    me.text(text=\"before\")\n    me.divider()\n    me.text(text=\"after\")\n</code></pre>"},{"location":"components/divider/#api","title":"API","text":""},{"location":"components/divider/#mesop.components.divider.divider.divider","title":"<code>divider</code>","text":"<p>Creates a Divider component.</p> PARAMETER DESCRIPTION <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>inset</code> <p>Whether the divider is an inset divider.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"components/embed/","title":"Embed","text":""},{"location":"components/embed/#overview","title":"Overview","text":"<p>Embed allows you to embed/iframe another web site in your Mesop app.</p>"},{"location":"components/embed/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/embed\",\n)\ndef app():\n  src = \"https://mesop-dev.github.io/mesop/\"\n  me.text(\"Embedding: \" + src, style=me.Style(padding=me.Padding.all(15)))\n  me.embed(\n    src=src,\n    style=me.Style(width=\"100%\", height=\"100%\"),\n  )\n</code></pre>"},{"location":"components/embed/#api","title":"API","text":""},{"location":"components/embed/#mesop.components.embed.embed.embed","title":"<code>embed</code>","text":"<p>This function creates an embed component.</p> PARAMETER DESCRIPTION <code>src</code> <p>The source URL for the embed content.</p> <p> TYPE: <code>str</code> </p> <code>style</code> <p>The style to apply to the embed, such as width and height.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/expansion-panel/","title":"Expansion panel","text":""},{"location":"components/expansion-panel/#overview","title":"Overview","text":"<p>Expansion panel and is based on the Angular Material expansion panel component.</p> <p>This is a useful component for showing a summary header which can be expanded into a more detailed card/panel.</p> <p>The expansion panels can also be grouped together to create an accordion.</p>"},{"location":"components/expansion-panel/#examples","title":"Examples","text":"<pre><code>from dataclasses import field\n\nimport mesop as me\n\n\n@me.stateclass\nclass State:\n  normal_accordion: dict[str, bool] = field(\n    default_factory=lambda: {\"pie\": True, \"donut\": False, \"icecream\": False}\n  )\n  multi_accordion: dict[str, bool] = field(\n    default_factory=lambda: {\"pie\": False, \"donut\": False, \"icecream\": False}\n  )\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/expansion_panel\",\n)\ndef app():\n  state = me.state(State)\n  with me.box(\n    style=me.Style(\n      display=\"flex\",\n      flex_direction=\"column\",\n      gap=15,\n      margin=me.Margin.all(15),\n      max_width=500,\n    )\n  ):\n    me.text(\"Normal Accordion\", type=\"headline-5\")\n    with me.accordion():\n      with me.expansion_panel(\n        key=\"pie\",\n        title=\"Pie\",\n        description=\"Type of snack\",\n        icon=\"pie_chart\",\n        disabled=False,\n        expanded=state.normal_accordion[\"pie\"],\n        hide_toggle=False,\n        on_toggle=on_accordion_toggle,\n      ):\n        me.text(\n          \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed augue ultricies, laoreet nunc eget, ultricies augue. In ornare bibendum mauris vel sodales. Donec ut interdum felis. Nulla facilisi. Morbi a laoreet turpis, sed posuere arcu. Nam nisi neque, molestie vitae euismod eu, sollicitudin eu lectus. Pellentesque orci metus, finibus id faucibus et, ultrices quis dui. Duis in augue ac metus tristique lacinia.\"\n        )\n\n      with me.expansion_panel(\n        key=\"donut\",\n        title=\"Donut\",\n        description=\"Type of breakfast\",\n        icon=\"donut_large\",\n        disabled=False,\n        expanded=state.normal_accordion[\"donut\"],\n        hide_toggle=False,\n        on_toggle=on_accordion_toggle,\n      ):\n        me.text(\n          \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed augue ultricies, laoreet nunc eget, ultricies augue. In ornare bibendum mauris vel sodales. Donec ut interdum felis. Nulla facilisi. Morbi a laoreet turpis, sed posuere arcu. Nam nisi neque, molestie vitae euismod eu, sollicitudin eu lectus. Pellentesque orci metus, finibus id faucibus et, ultrices quis dui. Duis in augue ac metus tristique lacinia.\"\n        )\n\n      with me.expansion_panel(\n        key=\"icecream\",\n        title=\"Ice cream\",\n        description=\"Type of dessert\",\n        icon=\"icecream\",\n        disabled=False,\n        expanded=state.normal_accordion[\"icecream\"],\n        hide_toggle=False,\n        on_toggle=on_accordion_toggle,\n      ):\n        me.text(\n          \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed augue ultricies, laoreet nunc eget, ultricies augue. In ornare bibendum mauris vel sodales. Donec ut interdum felis. Nulla facilisi. Morbi a laoreet turpis, sed posuere arcu. Nam nisi neque, molestie vitae euismod eu, sollicitudin eu lectus. Pellentesque orci metus, finibus id faucibus et, ultrices quis dui. Duis in augue ac metus tristique lacinia.\"\n        )\n\n    me.text(\"Multi Accordion\", type=\"headline-5\")\n    with me.box(\n      style=me.Style(display=\"flex\", gap=20, margin=me.Margin(bottom=15)),\n    ):\n      me.button(\n        label=\"Open All\", type=\"flat\", on_click=on_multi_accordion_open_all\n      )\n      me.button(\n        label=\"Close All\", type=\"flat\", on_click=on_multi_accordion_close_all\n      )\n\n    with me.accordion():\n      with me.expansion_panel(\n        key=\"pie\",\n        title=\"Pie\",\n        description=\"Type of snack\",\n        icon=\"pie_chart\",\n        expanded=state.multi_accordion[\"pie\"],\n        on_toggle=on_multi_accordion_toggle,\n      ):\n        me.text(\n          \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed augue ultricies, laoreet nunc eget, ultricies augue. In ornare bibendum mauris vel sodales. Donec ut interdum felis. Nulla facilisi. Morbi a laoreet turpis, sed posuere arcu. Nam nisi neque, molestie vitae euismod eu, sollicitudin eu lectus. Pellentesque orci metus, finibus id faucibus et, ultrices quis dui. Duis in augue ac metus tristique lacinia.\"\n        )\n\n      with me.expansion_panel(\n        key=\"donut\",\n        title=\"Donut\",\n        description=\"Type of breakfast\",\n        icon=\"donut_large\",\n        expanded=state.multi_accordion[\"donut\"],\n        on_toggle=on_multi_accordion_toggle,\n      ):\n        me.text(\n          \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed augue ultricies, laoreet nunc eget, ultricies augue. In ornare bibendum mauris vel sodales. Donec ut interdum felis. Nulla facilisi. Morbi a laoreet turpis, sed posuere arcu. Nam nisi neque, molestie vitae euismod eu, sollicitudin eu lectus. Pellentesque orci metus, finibus id faucibus et, ultrices quis dui. Duis in augue ac metus tristique lacinia.\"\n        )\n\n      with me.expansion_panel(\n        key=\"icecream\",\n        title=\"Ice cream\",\n        description=\"Type of dessert\",\n        icon=\"icecream\",\n        expanded=state.multi_accordion[\"icecream\"],\n        on_toggle=on_multi_accordion_toggle,\n      ):\n        me.text(\n          \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed augue ultricies, laoreet nunc eget, ultricies augue. In ornare bibendum mauris vel sodales. Donec ut interdum felis. Nulla facilisi. Morbi a laoreet turpis, sed posuere arcu. Nam nisi neque, molestie vitae euismod eu, sollicitudin eu lectus. Pellentesque orci metus, finibus id faucibus et, ultrices quis dui. Duis in augue ac metus tristique lacinia.\"\n        )\n\n    me.text(\"Expansion Panel\", type=\"headline-5\")\n\n    with me.expansion_panel(\n      key=\"pie\",\n      title=\"Pie\",\n      description=\"Type of snack\",\n      icon=\"pie_chart\",\n    ):\n      me.text(\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed augue ultricies, laoreet nunc eget, ultricies augue. In ornare bibendum mauris vel sodales. Donec ut interdum felis. Nulla facilisi. Morbi a laoreet turpis, sed posuere arcu. Nam nisi neque, molestie vitae euismod eu, sollicitudin eu lectus. Pellentesque orci metus, finibus id faucibus et, ultrices quis dui. Duis in augue ac metus tristique lacinia.\"\n      )\n\n\ndef on_accordion_toggle(e: me.ExpansionPanelToggleEvent):\n  \"\"\"Implements accordion behavior where only one panel can be open at a time\"\"\"\n  state = me.state(State)\n  state.normal_accordion = {\"pie\": False, \"donut\": False, \"icecream\": False}\n  state.normal_accordion[e.key] = e.opened\n\n\ndef on_multi_accordion_toggle(e: me.ExpansionPanelToggleEvent):\n  \"\"\"Implements accordion behavior where multiple panels can be open at a time\"\"\"\n  state = me.state(State)\n  state.multi_accordion[e.key] = e.opened\n\n\ndef on_multi_accordion_open_all(e: me.ClickEvent):\n  state = me.state(State)\n  for key in state.multi_accordion:\n    state.multi_accordion[key] = True\n\n\ndef on_multi_accordion_close_all(e: me.ClickEvent):\n  state = me.state(State)\n  for key in state.multi_accordion:\n    state.multi_accordion[key] = False\n</code></pre>"},{"location":"components/expansion-panel/#api","title":"API","text":""},{"location":"components/expansion-panel/#mesop.components.accordion.accordion.accordion","title":"<code>accordion</code>","text":"<p>This function creates an accordion.</p> <p>This is more of a visual component. It is used to style a group of expansion panel components in a unified and consistent way (as if they were one component -- i.e. an accordion).</p> <p>The mechanics of an accordion that only allows one expansion panel to be open at a time, must be implemented manually, but is easy to do with Mesop state and event handlers.</p>"},{"location":"components/expansion-panel/#mesop.components.expansion_panel.expansion_panel.expansion_panel","title":"<code>expansion_panel</code>","text":"<p>This function creates an expansion_panel.</p> PARAMETER DESCRIPTION <code>title</code> <p>Title of the panel.</p> <p> TYPE: <code>str</code> </p> <code>description</code> <p>Optional brief description of the panel.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>icon</code> <p>Optional icon from https://fonts.google.com/icons.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>disabled</code> <p>Whether the panel is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>expanded</code> <p>Whether the toggle is expanded. Use <code>None</code> if you do not need to manage open/closed state.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>hide_toggle</code> <p>Whether to the toggle is shown.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>on_toggle</code> <p>Event fired when the expansion panel header is opened/closed.</p> <p> TYPE: <code>Callable[[ExpansionPanelToggleEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>style</code> <p>Style for the component.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/expansion-panel/#mesop.components.expansion_panel.expansion_panel.ExpansionPanelToggleEvent","title":"<code>ExpansionPanelToggleEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Event representing the opening/closing of the expansion panel.</p> ATTRIBUTE DESCRIPTION <code>opened</code> <p>Whether the expansion panel is opened.</p> <p> TYPE: <code>bool</code> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/html/","title":"HTML","text":""},{"location":"components/html/#overview","title":"Overview","text":"<p>The HTML component allows you to add custom HTML to your Mesop app.</p> <p>There are two modes for rendering HTML components:</p> <ul> <li><code>sanitized</code> (default), where the HTML is sanitized by Angular to remove potentially unsafe code like <code>&lt;script&gt;</code> and <code>&lt;style&gt;</code> for web security reasons.</li> <li><code>sandboxed</code>, which allows rendering of <code>&lt;script&gt;</code> and <code>&lt;style&gt;</code> HTML content by using an iframe sandbox.</li> </ul>"},{"location":"components/html/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/html_demo\",\n)\ndef app():\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    me.text(\"Sanitized HTML\", type=\"headline-5\")\n    me.html(\n      \"\"\"\n  Custom HTML\n  &lt;a href=\"https://mesop-dev.github.io/mesop/\" target=\"_blank\"&gt;mesop&lt;/a&gt;\n  \"\"\",\n      mode=\"sanitized\",\n    )\n\n    with me.box(style=me.Style(margin=me.Margin.symmetric(vertical=24))):\n      me.divider()\n\n    me.text(\"Sandboxed HTML\", type=\"headline-5\")\n    me.html(\n      \"&lt;style&gt;body { color: #ff0000; }&lt;/style&gt;hi&lt;script&gt;document.body.innerHTML = 'iamsandboxed'; &lt;/script&gt;\",\n      mode=\"sandboxed\",\n    )\n</code></pre>"},{"location":"components/html/#api","title":"API","text":""},{"location":"components/html/#mesop.components.html.html.html","title":"<code>html</code>","text":"<p>This function renders custom HTML in a secure way.</p> PARAMETER DESCRIPTION <code>html</code> <p>The HTML content to be rendered.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>mode</code> <p>Determines how the HTML is rendered. Mode can be either \"sanitized\" or \"sandboxed\". If \"sanitized\" then potentially dangerous content like <code>&lt;script&gt;</code> and <code>&lt;style&gt;</code> are stripped out. If \"sandboxed\", then all content is allowed, but rendered in an iframe for isolation.</p> <p> TYPE: <code>Literal['sanitized', 'sandboxed'] | None</code> DEFAULT: <code>None</code> </p> <code>style</code> <p>The style to apply to the embed, such as width and height.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/icon/","title":"Icon","text":""},{"location":"components/icon/#overview","title":"Overview","text":"<p>Icon displays a Material icon/symbol and is based on the Angular Material icon component.</p>"},{"location":"components/icon/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/icon\",\n)\ndef app():\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    me.text(\"home icon\")\n    me.icon(icon=\"home\")\n</code></pre>"},{"location":"components/icon/#api","title":"API","text":""},{"location":"components/icon/#mesop.components.icon.icon.icon","title":"<code>icon</code>","text":"<p>Creates a Icon component.</p> PARAMETER DESCRIPTION <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>icon</code> <p>Name of the Material Symbols icon.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>style</code> <p>Inline styles</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/image/","title":"Image","text":""},{"location":"components/image/#overview","title":"Overview","text":"<p>Image is the equivalent of an <code>&lt;img&gt;</code> HTML element.</p>"},{"location":"components/image/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/image\",\n)\ndef app():\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    me.image(\n      src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-images/grapefruit-slice-332-332.jpg\",\n      alt=\"Grapefruit\",\n      style=me.Style(width=\"100%\"),\n    )\n</code></pre>"},{"location":"components/image/#api","title":"API","text":""},{"location":"components/image/#mesop.components.image.image.image","title":"<code>image</code>","text":"<p>This function creates an image component.</p> PARAMETER DESCRIPTION <code>src</code> <p>The source URL of the image.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>alt</code> <p>The alternative text for the image if it cannot be displayed.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>style</code> <p>The style to apply to the image, such as width and height.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/input/","title":"Input","text":""},{"location":"components/input/#overview","title":"Overview","text":"<p>Input allows the user to type in a value and is based on the Angular Material input component.</p> <p>For longer text inputs, also see Textarea</p>"},{"location":"components/input/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.stateclass\nclass State:\n  input: str = \"\"\n\n\ndef on_blur(e: me.InputBlurEvent):\n  state = me.state(State)\n  state.input = e.value\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/input\",\n)\ndef app():\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    s = me.state(State)\n    me.input(label=\"Basic input\", appearance=\"outline\", on_blur=on_blur)\n    me.text(text=s.input)\n</code></pre>"},{"location":"components/input/#api","title":"API","text":""},{"location":"components/input/#mesop.components.input.input.input","title":"<code>input</code>","text":"<p>Creates a Input component.</p> PARAMETER DESCRIPTION <code>label</code> <p>Label for input.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>on_blur</code> <p>blur is fired when the input has lost focus.</p> <p> TYPE: <code>Callable[[InputBlurEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>on_input</code> <p>input is fired whenever the input has changed (e.g. user types). Note: this can cause performance issues. Use <code>on_blur</code> instead.</p> <p> TYPE: <code>Callable[[InputEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>on_enter</code> <p>triggers when the browser detects an \"Enter\" key on a keyup native browser event.</p> <p> TYPE: <code>Callable[[InputEnterEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>type</code> <p>Input type of the element. For textarea, use <code>me.textarea(...)</code></p> <p> TYPE: <code>Literal['color', 'date', 'datetime-local', 'email', 'month', 'number', 'password', 'search', 'tel', 'text', 'time', 'url', 'week'] | None</code> DEFAULT: <code>None</code> </p> <code>appearance</code> <p>The form field appearance style.</p> <p> TYPE: <code>Literal['fill', 'outline']</code> DEFAULT: <code>'fill'</code> </p> <code>style</code> <p>Style for input.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether it's disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>placeholder</code> <p>Placeholder value</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>required</code> <p>Whether it's required</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>value</code> <p>Initial value.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>readonly</code> <p>Whether the element is readonly.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>hide_required_marker</code> <p>Whether the required marker should be hidden.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>color</code> <p>The color palette for the form field.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn']</code> DEFAULT: <code>'primary'</code> </p> <code>float_label</code> <p>Whether the label should always float or float as the user types.</p> <p> TYPE: <code>Literal['always', 'auto']</code> DEFAULT: <code>'auto'</code> </p> <code>subscript_sizing</code> <p>Whether the form field should reserve space for one line of hint/error text (default) or to have the spacing grow from 0px as needed based on the size of the hint/error content. Note that when using dynamic sizing, layout shifts will occur when hint/error text changes.</p> <p> TYPE: <code>Literal['fixed', 'dynamic']</code> DEFAULT: <code>'fixed'</code> </p> <code>hint_label</code> <p>Text for the form field hint.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/input/#mesop.components.input.input.InputBlurEvent","title":"<code>InputBlurEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Represents an inpur blur event (when a user loses focus of an input).</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>Input value.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/input/#mesop.components.input.input.InputEnterEvent","title":"<code>InputEnterEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Represents an \"Enter\" keyboard event on an input component.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>Input value.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/input/#mesop.events.InputEvent","title":"<code>InputEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Represents a user input event.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>Input value.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/link/","title":"Link","text":""},{"location":"components/link/#overview","title":"Overview","text":"<p>Link creates an HTML anchor element (i.e. <code>&lt;a&gt;</code>) which links to another page.</p>"},{"location":"components/link/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/link\",\n)\ndef link():\n  with me.box(\n    style=me.Style(\n      margin=me.Margin.all(15), display=\"flex\", flex_direction=\"column\", gap=10\n    )\n  ):\n    me.link(\n      text=\"Open in same tab\",\n      url=\"https://mesop-dev.github.io/mesop/\",\n      style=me.Style(color=me.theme_var(\"primary\")),\n    )\n    me.link(\n      text=\"Open in new tab\",\n      open_in_new_tab=True,\n      url=\"https://mesop-dev.github.io/mesop/\",\n      style=me.Style(color=me.theme_var(\"primary\")),\n    )\n    me.link(\n      text=\"Styled link\",\n      url=\"https://mesop-dev.github.io/mesop/\",\n      style=me.Style(color=me.theme_var(\"tertiary\"), text_decoration=\"none\"),\n    )\n</code></pre>"},{"location":"components/link/#api","title":"API","text":""},{"location":"components/link/#mesop.components.link.link.link","title":"<code>link</code>","text":"<p>This function creates a link.</p> PARAMETER DESCRIPTION <code>text</code> <p>The text to be displayed.</p> <p> TYPE: <code>str</code> </p> <code>url</code> <p>The URL to navigate to.</p> <p> TYPE: <code>str</code> </p> <code>open_in_new_tab</code> <p>If True, open page in new tab. If False, open page in current tab.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>style</code> <p>Style for the component. Defaults to None.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>Unique key for the component. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/markdown/","title":"Markdown","text":""},{"location":"components/markdown/#overview","title":"Overview","text":"<p>Markdown is used to render markdown text.</p>"},{"location":"components/markdown/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\nSAMPLE_MARKDOWN = \"\"\"\n# Sample Markdown Document\n\n## Table of Contents\n1. [Headers](#headers)\n2. [Emphasis](#emphasis)\n3. [Lists](#lists)\n4. [Links](#links)\n5. [Code](#code)\n6. [Blockquotes](#blockquotes)\n7. [Tables](#tables)\n8. [Horizontal Rules](#horizontal-rules)\n\n## Headers\n# Header 1\n## Header 2\n### Header 3\n#### Header 4\n##### Header 5\n###### Header 6\n\n## Emphasis\n*Italic text* or _Italic text_\n**Bold text** or __Bold text__\n***Bold and Italic*** or ___Bold and Italic___\n\n## Lists\n\n### Unordered List\n- Item 1\n- Item 2\n    - Subitem 2.1\n    - Subitem 2.2\n\n### Ordered List\n1. First item\n2. Second item\n    1. Subitem 2.1\n    2. Subitem 2.2\n\n## Links\n[Google](https://www.google.com/)\n\n## Inline Code\n\nInline `code`\n\n## Code\n\n```python\nimport mesop as me\n\n\n@me.page(path=\"/hello_world\")\ndef app():\n  me.text(\"Hello World\")\n</code></pre>"},{"location":"components/markdown/#table","title":"Table","text":"First Header Second Header Content Cell Content Cell Content Cell Content Cell \"\"\" <p>def on_load(e: me.LoadEvent):   me.set_theme_mode(\"system\")</p> <p>@me.page(   security_policy=me.SecurityPolicy(     allowed_iframe_parents=[\"https://mesop-dev.github.io\"]   ),   path=\"/markdown_demo\",   on_load=on_load, ) def app():   with me.box(     style=me.Style(background=me.theme_var(\"surface-container-lowest\"))   ):     me.markdown(SAMPLE_MARKDOWN, style=me.Style(margin=me.Margin.all(15))) ```</p>"},{"location":"components/markdown/#api","title":"API","text":""},{"location":"components/markdown/#mesop.components.markdown.markdown.markdown","title":"<code>markdown</code>","text":"<p>This function creates a markdown.</p> PARAMETER DESCRIPTION <code>text</code> <p>Required. Markdown text</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>style</code> <p>Style to apply to component. Follows HTML Element inline style API.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/plot/","title":"Plot","text":""},{"location":"components/plot/#overview","title":"Overview","text":"<p>Plot provides a convenient way to render Matplotlib figures as an image.</p>"},{"location":"components/plot/#examples","title":"Examples","text":"<pre><code>from matplotlib.figure import Figure\n\nimport mesop as me\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/plot\",\n)\ndef app():\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    # Create matplotlib figure without using pyplot:\n    fig = Figure()\n    ax = fig.subplots()  # type: ignore\n    ax.plot([1, 2])  # type: ignore\n\n    me.text(\"Example using matplotlib:\", type=\"headline-5\")\n    me.plot(fig, style=me.Style(width=\"100%\"))\n</code></pre>"},{"location":"components/plot/#api","title":"API","text":""},{"location":"components/plot/#mesop.components.plot.plot.plot","title":"<code>plot</code>","text":"<p>Creates a plot component from a Matplotlib figure.</p> PARAMETER DESCRIPTION <code>figure</code> <p>A Matplotlib figure which will be rendered.</p> <p> TYPE: <code>Figure</code> </p> <code>style</code> <p>An optional Style object that defines the visual styling for the plot component. If None, default styling (e.g. height, width) is used.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/progress-bar/","title":"Progress bar","text":""},{"location":"components/progress-bar/#overview","title":"Overview","text":"<p>Progress Bar is used to indicate something is in progress and is based on the Angular Material progress bar component.</p>"},{"location":"components/progress-bar/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/progress_bar\",\n)\ndef app():\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    me.text(\"Default progress bar\", type=\"headline-5\")\n    me.progress_bar()\n</code></pre>"},{"location":"components/progress-bar/#api","title":"API","text":""},{"location":"components/progress-bar/#mesop.components.progress_bar.progress_bar.progress_bar","title":"<code>progress_bar</code>","text":"<p>Creates a Progress bar component.</p> PARAMETER DESCRIPTION <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>color</code> <p>Theme palette color of the progress bar.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn'] | None</code> DEFAULT: <code>None</code> </p> <code>value</code> <p>Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>buffer_value</code> <p>Buffer value of the progress bar. Defaults to zero.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>mode</code> <p>Mode of the progress bar. Input must be one of these values: determinate, indeterminate, buffer, query, defaults to 'determinate'. Mirrored to mode attribute.</p> <p> TYPE: <code>Literal['determinate', 'indeterminate', 'buffer', 'query']</code> DEFAULT: <code>'indeterminate'</code> </p> <code>on_animation_end</code> <p>Event emitted when animation of the primary progress bar completes. This event will not be emitted when animations are disabled, nor will it be emitted for modes with continuous animations (indeterminate and query).</p> <p> TYPE: <code>Callable[[ProgressBarAnimationEndEvent], Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/progress-bar/#mesop.components.progress_bar.progress_bar.ProgressBarAnimationEndEvent","title":"<code>ProgressBarAnimationEndEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Event emitted when the animation of the progress bar ends.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>The value of the progress bar when the animation ends.</p> <p> TYPE: <code>float</code> </p> <code>key</code> <p>Key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/progress-spinner/","title":"Progress spinner","text":""},{"location":"components/progress-spinner/#overview","title":"Overview","text":"<p>Progress Spinner is used to indicate something is in progress and is based on the Angular Material progress spinner component.</p>"},{"location":"components/progress-spinner/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/progress_spinner\",\n)\ndef app():\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    me.progress_spinner()\n</code></pre>"},{"location":"components/progress-spinner/#api","title":"API","text":""},{"location":"components/progress-spinner/#mesop.components.progress_spinner.progress_spinner.progress_spinner","title":"<code>progress_spinner</code>","text":"<p>Creates a Progress spinner component.</p> PARAMETER DESCRIPTION <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>color</code> <p>Theme palette color of the progress spinner.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn'] | None</code> DEFAULT: <code>None</code> </p> <code>diameter</code> <p>The diameter of the progress spinner (will set width and height of svg).</p> <p> TYPE: <code>float</code> DEFAULT: <code>48</code> </p> <code>stroke_width</code> <p>Stroke width of the progress spinner.</p> <p> TYPE: <code>float</code> DEFAULT: <code>4</code> </p>"},{"location":"components/radio/","title":"Radio","text":""},{"location":"components/radio/#overview","title":"Overview","text":"<p>Radio is a single selection form control based on the Angular Material radio component.</p>"},{"location":"components/radio/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.stateclass\nclass State:\n  radio_value: str = \"2\"\n\n\ndef on_change(event: me.RadioChangeEvent):\n  s = me.state(State)\n  s.radio_value = event.value\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/radio\",\n)\ndef app():\n  s = me.state(State)\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    me.text(\"Horizontal radio options\")\n    me.radio(\n      on_change=on_change,\n      options=[\n        me.RadioOption(label=\"Option 1\", value=\"1\"),\n        me.RadioOption(label=\"Option 2\", value=\"2\"),\n      ],\n      value=s.radio_value,\n    )\n    me.text(text=\"Selected radio value: \" + s.radio_value)\n</code></pre>"},{"location":"components/radio/#api","title":"API","text":""},{"location":"components/radio/#mesop.components.radio.radio.radio","title":"<code>radio</code>","text":"<p>Creates a Radio component.</p> PARAMETER DESCRIPTION <code>options</code> <p>List of radio options</p> <p> TYPE: <code>Iterable[RadioOption]</code> DEFAULT: <code>()</code> </p> <code>on_change</code> <p>Event emitted when the group value changes. Change events are only emitted when the value changes due to user interaction with a radio button (the same behavior as <code>&lt;input type-\"radio\"&gt;</code>).</p> <p> TYPE: <code>Callable[[RadioChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>color</code> <p>Theme color for all of the radio buttons in the group.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn'] | None</code> DEFAULT: <code>None</code> </p> <code>label_position</code> <p>Whether the labels should appear after or before the radio-buttons. Defaults to 'after'</p> <p> TYPE: <code>Literal['before', 'after']</code> DEFAULT: <code>'after'</code> </p> <code>value</code> <p>Value for the radio-group. Should equal the value of the selected radio button if there is a corresponding radio button with a matching value.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>disabled</code> <p>Whether the radio group is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>style</code> <p>Style for the component.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/radio/#mesop.components.radio.radio.RadioOption","title":"<code>RadioOption</code>  <code>dataclass</code>","text":"ATTRIBUTE DESCRIPTION <code>label</code> <p>Content to show for the radio option</p> <p> TYPE: <code>str | None</code> </p> <code>value</code> <p>The value of this radio button.</p> <p> TYPE: <code>str | None</code> </p>"},{"location":"components/radio/#mesop.components.radio.radio.RadioChangeEvent","title":"<code>RadioChangeEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Event representing a change in the radio component's value.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>The new value of the radio component after the change.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/select/","title":"Select","text":""},{"location":"components/select/#overview","title":"Overview","text":"<p>Select allows the user to choose from a list of values and is based on the Angular Material select component.</p>"},{"location":"components/select/#examples","title":"Examples","text":"<pre><code>from dataclasses import field\n\nimport mesop as me\n\n\n@me.stateclass\nclass State:\n  selected_values_1: list[str] = field(\n    default_factory=lambda: [\"value1\", \"value2\"]\n  )\n  selected_values_2: str = \"value1\"\n\n\ndef on_selection_change_1(e: me.SelectSelectionChangeEvent):\n  s = me.state(State)\n  s.selected_values_1 = e.values\n\n\ndef on_selection_change_2(e: me.SelectSelectionChangeEvent):\n  s = me.state(State)\n  s.selected_values_2 = e.value\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/select_demo\",\n)\ndef app():\n  state = me.state(State)\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    me.select(\n      label=\"Select multiple\",\n      options=[\n        me.SelectOption(label=\"label 1\", value=\"value1\"),\n        me.SelectOption(label=\"label 2\", value=\"value2\"),\n        me.SelectOption(label=\"label 3\", value=\"value3\"),\n      ],\n      on_selection_change=on_selection_change_1,\n      style=me.Style(width=500),\n      multiple=True,\n      appearance=\"outline\",\n      value=state.selected_values_1,\n    )\n    me.text(\n      text=\"Selected values (multiple): \" + \", \".join(state.selected_values_1)\n    )\n\n    me.select(\n      label=\"Select single\",\n      options=[\n        me.SelectOption(label=\"label 1\", value=\"value1\"),\n        me.SelectOption(label=\"label 2\", value=\"value2\"),\n        me.SelectOption(label=\"label 3\", value=\"value3\"),\n      ],\n      on_selection_change=on_selection_change_2,\n      style=me.Style(width=500, margin=me.Margin(top=40)),\n      multiple=False,\n      appearance=\"outline\",\n      value=state.selected_values_2,\n    )\n    me.text(text=\"Selected values (single): \" + state.selected_values_2)\n</code></pre>"},{"location":"components/select/#api","title":"API","text":""},{"location":"components/select/#mesop.components.select.select.select","title":"<code>select</code>","text":"<p>Creates a Select component.</p> PARAMETER DESCRIPTION <code>options</code> <p>List of select options.</p> <p> TYPE: <code>Iterable[SelectOption]</code> DEFAULT: <code>()</code> </p> <code>on_selection_change</code> <p>Event emitted when the selected value has been changed by the user.</p> <p> TYPE: <code>Callable[[SelectSelectionChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>on_opened_change</code> <p>Event emitted when the select panel has been toggled.</p> <p> TYPE: <code>Callable[[SelectOpenedChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether the select is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disable_ripple</code> <p>Whether ripples in the select are disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>multiple</code> <p>Whether multiple selections are allowed.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tab_index</code> <p>Tab index of the select.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>placeholder</code> <p>Placeholder to be shown if no value has been selected.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>appearance</code> <p>The form field appearance style.</p> <p> TYPE: <code>Literal['fill', 'outline']</code> DEFAULT: <code>'fill'</code> </p> <code>value</code> <p>Value(s) of the select control.</p> <p> TYPE: <code>list[str] | str</code> DEFAULT: <code>''</code> </p> <code>style</code> <p>Style.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/select/#mesop.components.select.select.SelectOption","title":"<code>SelectOption</code>  <code>dataclass</code>","text":"<p>Represents an option within a select component.</p> ATTRIBUTE DESCRIPTION <code>label</code> <p>The content shown for the select option.</p> <p> TYPE: <code>str | None</code> </p> <code>value</code> <p>The value associated with the select option.</p> <p> TYPE: <code>str | None</code> </p>"},{"location":"components/select/#mesop.components.select.select.SelectSelectionChangeEvent","title":"<code>SelectSelectionChangeEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Event representing a change in the select component's value(s).</p> ATTRIBUTE DESCRIPTION <code>values</code> <p>New values of the select component after the change.</p> <p> TYPE: <code>list[str]</code> </p> <code>key</code> <p>Key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/select/#mesop.components.select.select.SelectSelectionChangeEvent.value","title":"<code>value</code>  <code>property</code>","text":"<p>Shortcut for returning a single value.</p>"},{"location":"components/select/#mesop.components.select.select.SelectOpenedChangeEvent","title":"<code>SelectOpenedChangeEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Event representing the opened state change of the select component.</p> ATTRIBUTE DESCRIPTION <code>opened</code> <p>A boolean indicating whether the select component is opened (True) or closed (False).</p> <p> TYPE: <code>bool</code> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/sidenav/","title":"Sidenav","text":""},{"location":"components/sidenav/#overview","title":"Overview","text":"<p>Sidenav is a sidebar typically used for navigation and is based on the Angular Material sidenav component.</p>"},{"location":"components/sidenav/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\nSIDENAV_WIDTH = 200\n\n\n@me.stateclass\nclass State:\n  sidenav_open: bool\n\n\ndef on_click(e: me.ClickEvent):\n  s = me.state(State)\n  s.sidenav_open = not s.sidenav_open\n\n\ndef opened_changed(e: me.SidenavOpenedChangedEvent):\n  s = me.state(State)\n  s.sidenav_open = e.opened\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/sidenav\",\n)\ndef app():\n  state = me.state(State)\n  with me.sidenav(\n    opened=state.sidenav_open,\n    disable_close=False,\n    on_opened_changed=opened_changed,\n    style=me.Style(\n      border_radius=0,\n      width=SIDENAV_WIDTH,\n      background=me.theme_var(\"surface-container-low\"),\n      padding=me.Padding.all(15),\n    ),\n  ):\n    me.text(\"Inside sidenav\")\n\n  with me.box(\n    style=me.Style(\n      margin=me.Margin(left=SIDENAV_WIDTH if state.sidenav_open else 0),\n      padding=me.Padding.all(15),\n    ),\n  ):\n    with me.content_button(on_click=on_click):\n      me.icon(\"menu\")\n    me.markdown(\"Main content\")\n</code></pre>"},{"location":"components/sidenav/#api","title":"API","text":""},{"location":"components/sidenav/#mesop.components.sidenav.sidenav.sidenav","title":"<code>sidenav</code>","text":"<p>This function creates a sidenav.</p> PARAMETER DESCRIPTION <code>opened</code> <p>A flag to determine if the sidenav is open or closed. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>disable_close</code> <p>Whether the drawer can be closed with the escape key.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>position</code> <p>The side that the drawer is attached to.</p> <p> TYPE: <code>Literal['start', 'end']</code> DEFAULT: <code>'start'</code> </p> <code>on_opened_changed</code> <p>Handles event emitted when the drawer open state is changed.</p> <p> TYPE: <code>Callable[[SidenavOpenedChangedEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>style</code> <p>An optional Style object to apply custom styles. Defaults to None.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/slide-toggle/","title":"Slide toggle","text":""},{"location":"components/slide-toggle/#overview","title":"Overview","text":"<p>Slide Toggle allows the user to toggle on and off and is based on the Angular Material slide toggle component.</p>"},{"location":"components/slide-toggle/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.stateclass\nclass State:\n  toggled: bool = False\n\n\ndef on_change(event: me.SlideToggleChangeEvent):\n  s = me.state(State)\n  s.toggled = not s.toggled\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/slide_toggle\",\n)\ndef app():\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    me.slide_toggle(label=\"Slide toggle\", on_change=on_change)\n    s = me.state(State)\n    me.text(text=f\"Toggled: {s.toggled}\")\n</code></pre>"},{"location":"components/slide-toggle/#api","title":"API","text":""},{"location":"components/slide-toggle/#mesop.components.slide_toggle.slide_toggle.slide_toggle","title":"<code>slide_toggle</code>","text":"<p>Creates a simple Slide toggle component with a text label.</p> PARAMETER DESCRIPTION <code>label</code> <p>Text label for slide toggle</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>on_change</code> <p>An event will be dispatched each time the slide-toggle changes its value.</p> <p> TYPE: <code>Callable[[SlideToggleChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>label_position</code> <p>Whether the label should appear after or before the slide-toggle. Defaults to 'after'.</p> <p> TYPE: <code>Literal['before', 'after']</code> DEFAULT: <code>'after'</code> </p> <code>required</code> <p>Whether the slide-toggle is required.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>color</code> <p>Palette color of slide toggle.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn'] | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether the slide toggle is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disable_ripple</code> <p>Whether the slide toggle has a ripple.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tab_index</code> <p>Tabindex of slide toggle.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>checked</code> <p>Whether the slide-toggle element is checked or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>hide_icon</code> <p>Whether to hide the icon inside of the slide toggle.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/slide-toggle/#mesop.components.slide_toggle.slide_toggle.content_slide_toggle","title":"<code>content_slide_toggle</code>","text":"<p>Creates a Slide toggle component which is a composite component. Typically, you would use a text or icon component as a child.</p> <p>Intended for advanced use cases.</p> PARAMETER DESCRIPTION <code>on_change</code> <p>An event will be dispatched each time the slide-toggle changes its value.</p> <p> TYPE: <code>Callable[[SlideToggleChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>label_position</code> <p>Whether the label should appear after or before the slide-toggle. Defaults to 'after'.</p> <p> TYPE: <code>Literal['before', 'after']</code> DEFAULT: <code>'after'</code> </p> <code>required</code> <p>Whether the slide-toggle is required.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>color</code> <p>Palette color of slide toggle.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn'] | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether the slide toggle is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disable_ripple</code> <p>Whether the slide toggle has a ripple.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tab_index</code> <p>Tabindex of slide toggle.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>checked</code> <p>Whether the slide-toggle element is checked or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>hide_icon</code> <p>Whether to hide the icon inside of the slide toggle.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/slide-toggle/#mesop.components.slide_toggle.slide_toggle.SlideToggleChangeEvent","title":"<code>SlideToggleChangeEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Event triggered when the slide toggle state changes.</p> ATTRIBUTE DESCRIPTION <code>key</code> <p>Key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/slider/","title":"Slider","text":""},{"location":"components/slider/#overview","title":"Overview","text":"<p>Slider allows the user to select from a range of values and is based on the Angular Material slider component.</p>"},{"location":"components/slider/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.stateclass\nclass State:\n  initial_input_value: str = \"50.0\"\n  initial_slider_value: float = 50.0\n  slider_value: float = 50.0\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/slider\",\n)\ndef app():\n  state = me.state(State)\n  with me.box(\n    style=me.Style(\n      display=\"flex\", flex_direction=\"column\", margin=me.Margin.all(15)\n    )\n  ):\n    me.input(\n      label=\"Slider value\",\n      appearance=\"outline\",\n      value=state.initial_input_value,\n      on_input=on_input,\n    )\n    me.slider(on_value_change=on_value_change, value=state.initial_slider_value)\n    me.text(text=f\"Value: {me.state(State).slider_value}\")\n\n\ndef on_value_change(event: me.SliderValueChangeEvent):\n  state = me.state(State)\n  state.slider_value = event.value\n  state.initial_input_value = str(state.slider_value)\n\n\ndef on_input(event: me.InputEvent):\n  state = me.state(State)\n  state.initial_slider_value = float(event.value)\n  state.slider_value = state.initial_slider_value\n</code></pre>"},{"location":"components/slider/#api","title":"API","text":""},{"location":"components/slider/#mesop.components.slider.slider.slider","title":"<code>slider</code>","text":"<p>Creates a Slider component.</p> PARAMETER DESCRIPTION <code>on_value_change</code> <p>An event will be dispatched each time the slider changes its value.</p> <p> TYPE: <code>Callable[[SliderValueChangeEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>value</code> <p>Initial value. If updated, the slider will be updated with a new initial value.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>min</code> <p>The minimum value that the slider can have.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>max</code> <p>The maximum value that the slider can have.</p> <p> TYPE: <code>float</code> DEFAULT: <code>100</code> </p> <code>step</code> <p>The values at which the thumb will snap.</p> <p> TYPE: <code>float</code> DEFAULT: <code>1</code> </p> <code>disabled</code> <p>Whether the slider is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>discrete</code> <p>Whether the slider displays a numeric value label upon pressing the thumb.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>show_tick_marks</code> <p>Whether the slider displays tick marks along the slider track.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>color</code> <p>Palette color of the slider.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn']</code> DEFAULT: <code>'primary'</code> </p> <code>disable_ripple</code> <p>Whether ripples are disabled in the slider.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>style</code> <p>Style for the component.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/slider/#mesop.components.slider.slider.SliderValueChangeEvent","title":"<code>SliderValueChangeEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Event triggered when the slider value changes.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>The new value of the slider after the change.</p> <p> TYPE: <code>float</code> </p> <code>key</code> <p>Key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/table/","title":"Table","text":""},{"location":"components/table/#overview","title":"Overview","text":"<p>Table allows the user to render an Angular Material table component from a Pandas data frame.</p>"},{"location":"components/table/#examples","title":"Examples","text":"<pre><code>from datetime import datetime\n\nimport numpy as np\nimport pandas as pd\n\nimport mesop as me\n\n\n@me.stateclass\nclass State:\n  selected_cell: str = \"No cell selected.\"\n\n\ndf = pd.DataFrame(\n  data={\n    \"NA\": [pd.NA, pd.NA, pd.NA],\n    \"Index\": [3, 2, 1],\n    \"Bools\": [True, False, np.bool_(True)],\n    \"Ints\": [101, 90, np.int64(-55)],\n    \"Floats\": [2.3, 4.5, np.float64(-3.000000003)],\n    \"Strings\": [\"Hello\", \"World\", \"!\"],\n    \"Date Times\": [\n      pd.Timestamp(\"20180310\"),\n      pd.Timestamp(\"20230310\"),\n      datetime(2023, 1, 1, 12, 12, 1),\n    ],\n  }\n)\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/table\",\n)\ndef app():\n  state = me.state(State)\n\n  with me.box(style=me.Style(padding=me.Padding.all(10), width=500)):\n    me.table(\n      df,\n      on_click=on_click,\n      header=me.TableHeader(sticky=True),\n      columns={\n        \"NA\": me.TableColumn(sticky=True),\n        \"Index\": me.TableColumn(sticky=True),\n      },\n    )\n\n  with me.box(\n    style=me.Style(\n      background=me.theme_var(\"surface-container-high\"),\n      margin=me.Margin.all(10),\n      padding=me.Padding.all(10),\n    )\n  ):\n    me.text(state.selected_cell)\n\n\ndef on_click(e: me.TableClickEvent):\n  state = me.state(State)\n  state.selected_cell = (\n    f\"Selected cell at col {e.col_index} and row {e.row_index} \"\n    f\"with value {df.iat[e.row_index, e.col_index]!s}\"\n  )\n</code></pre>"},{"location":"components/table/#api","title":"API","text":""},{"location":"components/table/#mesop.components.table.table.table","title":"<code>table</code>","text":"<p>This function creates a table from Pandas data frame</p> PARAMETER DESCRIPTION <code>data_frame</code> <p>Pandas data frame.</p> <p> TYPE: <code>Any</code> </p> <code>on_click</code> <p>Triggered when a table cell is clicked. The click event is a native browser event.</p> <p> TYPE: <code>Callable[[TableClickEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>header</code> <p>Configures table header to be sticky or not.</p> <p> TYPE: <code>TableHeader | None</code> DEFAULT: <code>None</code> </p> <code>columns</code> <p>Configures table columns to be sticky or not. The key is the name of the column.</p> <p> TYPE: <code>dict[str, TableColumn] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/text-to-image/","title":"Text to Image","text":""},{"location":"components/text-to-image/#overview","title":"Overview","text":"<p>Text To Image component is a quick and simple way of getting started with Mesop. Text To Image is part of Mesop Labs.</p>"},{"location":"components/text-to-image/#examples","title":"Examples","text":"<pre><code>import mesop as me\nimport mesop.labs as mel\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/text_to_image\",\n  title=\"Text to Image Example\",\n)\ndef app():\n  mel.text_to_image(\n    generate_image,\n    title=\"Text to Image Example\",\n  )\n\n\ndef generate_image(prompt: str):\n  return \"https://www.google.com/logos/doodles/2024/earth-day-2024-6753651837110453-2xa.gif\"\n</code></pre>"},{"location":"components/text-to-image/#api","title":"API","text":""},{"location":"components/text-to-image/#mesop.labs.text_to_image.text_to_image","title":"<code>text_to_image</code>","text":"<p>Creates a simple UI which takes in a text input and returns an image output.</p> <p>This function creates event handlers for text input and output operations using the provided function <code>transform</code> to process the input and generate the image output.</p> PARAMETER DESCRIPTION <code>transform</code> <p>Function that takes in a string input and returns a URL to an image or a base64 encoded image.</p> <p> TYPE: <code>Callable[[str], str]</code> </p> <code>title</code> <p>Headline text to display at the top of the UI.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/text-to-text/","title":"Text to Text","text":""},{"location":"components/text-to-text/#overview","title":"Overview","text":"<p>Text to text component allows you to take in user inputted text and return a transformed text. This is part of Mesop Labs.</p>"},{"location":"components/text-to-text/#examples","title":"Examples","text":"<pre><code>import mesop as me\nimport mesop.labs as mel\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/text_to_text\",\n  title=\"Text to Text Example\",\n)\ndef app():\n  mel.text_to_text(\n    upper_case_stream,\n    title=\"Text to Text Example\",\n  )\n\n\ndef upper_case_stream(s: str):\n  return \"Echo: \" + s.capitalize()\n</code></pre>"},{"location":"components/text-to-text/#api","title":"API","text":""},{"location":"components/text-to-text/#mesop.labs.text_to_text.text_to_text","title":"<code>text_to_text</code>","text":"<p>Creates a simple UI which takes in a text input and returns a text output.</p> <p>This function creates event handlers for text input and output operations using the provided transform function to process the input and generate the output.</p> PARAMETER DESCRIPTION <code>transform</code> <p>Function that takes in a string input and either returns or yields a string output.</p> <p> TYPE: <code>Callable[[str], Generator[str, None, None] | str]</code> </p> <code>title</code> <p>Headline text to display at the top of the UI</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>transform_mode</code> <p>Specifies how the output should be updated when yielding an output using a generator.             - \"append\": Concatenates each new piece of text to the existing output.             - \"replace\": Replaces the existing output with each new piece of text.</p> <p> TYPE: <code>Literal['append', 'replace']</code> DEFAULT: <code>'append'</code> </p>"},{"location":"components/text/","title":"Text","text":""},{"location":"components/text/#overview","title":"Overview","text":"<p>Text displays text as-is. If you have markdown text, use the Markdown component.</p>"},{"location":"components/text/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/text\",\n)\ndef text():\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    me.text(text=\"headline-1: Hello, world!\", type=\"headline-1\")\n    me.text(text=\"headline-2: Hello, world!\", type=\"headline-2\")\n    me.text(text=\"headline-3: Hello, world!\", type=\"headline-3\")\n    me.text(text=\"headline-4: Hello, world!\", type=\"headline-4\")\n    me.text(text=\"headline-5: Hello, world!\", type=\"headline-5\")\n    me.text(text=\"headline-6: Hello, world!\", type=\"headline-6\")\n    me.text(text=\"subtitle-1: Hello, world!\", type=\"subtitle-1\")\n    me.text(text=\"subtitle-2: Hello, world!\", type=\"subtitle-2\")\n    me.text(text=\"body-1: Hello, world!\", type=\"body-1\")\n    me.text(text=\"body-2: Hello, world!\", type=\"body-2\")\n    me.text(text=\"caption: Hello, world!\", type=\"caption\")\n    me.text(text=\"button: Hello, world!\", type=\"button\")\n</code></pre>"},{"location":"components/text/#api","title":"API","text":""},{"location":"components/text/#mesop.components.text.text.text","title":"<code>text</code>","text":"<p>Create a text component.</p> PARAMETER DESCRIPTION <code>text</code> <p>The text to display.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>type</code> <p>The typography level for the text.</p> <p> TYPE: <code>Literal['headline-1', 'headline-2', 'headline-3', 'headline-4', 'headline-5', 'headline-6', 'subtitle-1', 'subtitle-2', 'body-1', 'body-2', 'caption', 'button'] | None</code> DEFAULT: <code>None</code> </p> <code>style</code> <p>Style to apply to component. Follows HTML Element inline style API.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/textarea/","title":"Textarea","text":""},{"location":"components/textarea/#overview","title":"Overview","text":"<p>Textarea allows the user to type in a value and is based on the Angular Material input component for <code>&lt;textarea&gt;</code>.</p> <p>This is similar to Input, but Textarea is better suited for long text inputs.</p>"},{"location":"components/textarea/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\n@me.stateclass\nclass State:\n  input: str = \"\"\n  output: str = \"\"\n\n\ndef on_blur(e: me.InputBlurEvent):\n  state = me.state(State)\n  state.input = e.value\n  state.output = e.value\n\n\ndef on_newline(e: me.TextareaShortcutEvent):\n  state = me.state(State)\n  state.input = e.value + \"\\n\"\n\n\ndef on_submit(e: me.TextareaShortcutEvent):\n  state = me.state(State)\n  state.input = e.value\n  state.output = e.value\n\n\ndef on_clear(e: me.TextareaShortcutEvent):\n  state = me.state(State)\n  state.input = \"\"\n  state.output = \"\"\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/textarea\",\n)\ndef app():\n  s = me.state(State)\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    me.text(\n      \"Press enter to submit.\",\n      style=me.Style(margin=me.Margin(bottom=15)),\n    )\n    me.text(\n      \"Press shift+enter to create new line.\",\n      style=me.Style(margin=me.Margin(bottom=15)),\n    )\n    me.text(\n      \"Press shift+meta+enter to clear text.\",\n      style=me.Style(margin=me.Margin(bottom=15)),\n    )\n    me.textarea(\n      label=\"Basic input\",\n      value=s.input,\n      on_blur=on_blur,\n      shortcuts={\n        me.Shortcut(key=\"enter\"): on_submit,\n        me.Shortcut(shift=True, key=\"ENTER\"): on_newline,\n        me.Shortcut(shift=True, meta=True, key=\"Enter\"): on_clear,\n      },\n      appearance=\"outline\",\n      style=me.Style(width=\"100%\"),\n    )\n    me.text(text=s.output)\n</code></pre>"},{"location":"components/textarea/#api","title":"API","text":""},{"location":"components/textarea/#mesop.components.input.input.textarea","title":"<code>textarea</code>","text":"<p>Creates a Textarea component.</p> PARAMETER DESCRIPTION <code>label</code> <p>Label for input.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>on_blur</code> <p>blur is fired when the input has lost focus.</p> <p> TYPE: <code>Callable[[InputBlurEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>on_input</code> <p>input is fired whenever the input has changed (e.g. user types). Note: this can cause performance issues. Use <code>on_blur</code> instead.</p> <p> TYPE: <code>Callable[[InputEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>autosize</code> <p>If True, the textarea will automatically adjust its height to fit the content, up to the max_rows limit.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>min_rows</code> <p>The minimum number of rows the textarea will display.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>max_rows</code> <p>The maximum number of rows the textarea will display.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>rows</code> <p>The number of lines to show in the text area.</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>appearance</code> <p>The form field appearance style.</p> <p> TYPE: <code>Literal['fill', 'outline']</code> DEFAULT: <code>'fill'</code> </p> <code>style</code> <p>Style for input.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether it's disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>placeholder</code> <p>Placeholder value</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>required</code> <p>Whether it's required</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>value</code> <p>Initial value.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>readonly</code> <p>Whether the element is readonly.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>hide_required_marker</code> <p>Whether the required marker should be hidden.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>color</code> <p>The color palette for the form field.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn']</code> DEFAULT: <code>'primary'</code> </p> <code>float_label</code> <p>Whether the label should always float or float as the user types.</p> <p> TYPE: <code>Literal['always', 'auto']</code> DEFAULT: <code>'auto'</code> </p> <code>subscript_sizing</code> <p>Whether the form field should reserve space for one line of hint/error text (default) or to have the spacing grow from 0px as needed based on the size of the hint/error content. Note that when using dynamic sizing, layout shifts will occur when hint/error text changes.</p> <p> TYPE: <code>Literal['fixed', 'dynamic']</code> DEFAULT: <code>'fixed'</code> </p> <code>hint_label</code> <p>Text for the form field hint.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>shortcuts</code> <p>Shortcut events to listen for.</p> <p> TYPE: <code>dict[Shortcut, Callable[[TextareaShortcutEvent], Any]] | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/textarea/#mesop.components.input.input.native_textarea","title":"<code>native_textarea</code>","text":"<p>Creates a browser native Textarea component. Intended for advanced use cases with maximum UI control.</p> PARAMETER DESCRIPTION <code>on_blur</code> <p>blur is fired when the input has lost focus.</p> <p> TYPE: <code>Callable[[InputBlurEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>on_input</code> <p>input is fired whenever the input has changed (e.g. user types). Note: this can cause performance issues. Use <code>on_blur</code> instead.</p> <p> TYPE: <code>Callable[[InputEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>autosize</code> <p>If True, the textarea will automatically adjust its height to fit the content, up to the max_rows limit.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>min_rows</code> <p>The minimum number of rows the textarea will display.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>max_rows</code> <p>The maximum number of rows the textarea will display.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>style</code> <p>Style for input.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether it's disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>placeholder</code> <p>Placeholder value</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>value</code> <p>Initial value.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>readonly</code> <p>Whether the element is readonly.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>shortcuts</code> <p>Shortcut events to listen for.</p> <p> TYPE: <code>dict[Shortcut, Callable[[TextareaShortcutEvent], Any]] | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/textarea/#mesop.components.input.input.InputBlurEvent","title":"<code>InputBlurEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Represents an inpur blur event (when a user loses focus of an input).</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>Input value.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/textarea/#mesop.events.InputEvent","title":"<code>InputEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Represents a user input event.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>Input value.</p> <p> TYPE: <code>str</code> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"components/tooltip/","title":"Tooltip","text":""},{"location":"components/tooltip/#overview","title":"Overview","text":"<p>Tooltip is based on the Angular Material tooltip component.</p>"},{"location":"components/tooltip/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/tooltip\",\n)\ndef app():\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    with me.tooltip(message=\"Tooltip message\"):\n      me.text(text=\"Hello, World\")\n</code></pre>"},{"location":"components/tooltip/#api","title":"API","text":""},{"location":"components/tooltip/#mesop.components.tooltip.tooltip.tooltip","title":"<code>tooltip</code>","text":"<p>Creates a Tooltip component. Tooltip is a composite component.</p> PARAMETER DESCRIPTION <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>position</code> <p>Allows the user to define the position of the tooltip relative to the parent element</p> <p> TYPE: <code>Literal['left', 'right', 'above', 'below', 'before', 'after']</code> DEFAULT: <code>'left'</code> </p> <code>position_at_origin</code> <p>Whether tooltip should be relative to the click or touch origin instead of outside the element bounding box.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disabled</code> <p>Disables the display of the tooltip.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>show_delay_ms</code> <p>The default delay in ms before showing the tooltip after show is called</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>hide_delay_ms</code> <p>The default delay in ms before hiding the tooltip after hide is called</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>message</code> <p>The message to be displayed in the tooltip</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p>"},{"location":"components/uploader/","title":"Uploader","text":""},{"location":"components/uploader/#overview","title":"Overview","text":"<p>Uploader is the equivalent of an <code>&lt;input type=\"file&gt;</code> HTML element except it uses a custom UI that better matches the look of Angular Material Components.</p>"},{"location":"components/uploader/#examples","title":"Examples","text":"<pre><code>import base64\n\nimport mesop as me\n\n\n@me.stateclass\nclass State:\n  files: list[me.UploadedFile]\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/uploader\",\n)\ndef app():\n  state = me.state(State)\n  with me.box(style=me.Style(padding=me.Padding.all(15))):\n    with me.box(style=me.Style(display=\"flex\", gap=20)):\n      with me.content_uploader(\n        accepted_file_types=[\"image/jpeg\", \"image/png\"],\n        on_upload=handle_upload,\n        type=\"flat\",\n        color=\"primary\",\n        multiple=True,\n        style=me.Style(font_weight=\"bold\"),\n      ):\n        with me.box(style=me.Style(display=\"flex\", gap=5)):\n          me.icon(\"upload\")\n          me.text(\"Upload Image\", style=me.Style(line_height=\"25px\"))\n\n      with me.content_uploader(\n        accepted_file_types=[\"image/jpeg\", \"image/png\"],\n        on_upload=handle_upload,\n        type=\"flat\",\n        color=\"warn\",\n        multiple=True,\n        style=me.Style(font_weight=\"bold\"),\n      ):\n        me.icon(\"upload\")\n\n      me.uploader(\n        label=\"Upload Image\",\n        accepted_file_types=[\"image/jpeg\", \"image/png\"],\n        on_upload=handle_upload,\n        type=\"flat\",\n        color=\"accent\",\n        multiple=True,\n        style=me.Style(font_weight=\"bold\"),\n      )\n\n      with me.content_uploader(\n        accepted_file_types=[\"image/jpeg\", \"image/png\"],\n        on_upload=handle_upload,\n        type=\"icon\",\n        multiple=True,\n        style=me.Style(font_weight=\"bold\"),\n      ):\n        me.icon(\"upload\")\n\n    if state.files:\n      for file in state.files:\n        with me.box(style=me.Style(margin=me.Margin.all(10))):\n          me.text(f\"File name: {file.name}\")\n          me.text(f\"File size: {file.size}\")\n          me.text(f\"File type: {file.mime_type}\")\n\n          with me.box(style=me.Style(margin=me.Margin.all(10))):\n            me.image(src=_convert_contents_data_url(file))\n\n\ndef handle_upload(event: me.UploadEvent):\n  state = me.state(State)\n  state.files = event.files\n\n\ndef _convert_contents_data_url(file: me.UploadedFile) -&gt; str:\n  return (\n    f\"data:{file.mime_type};base64,{base64.b64encode(file.getvalue()).decode()}\"\n  )\n</code></pre>"},{"location":"components/uploader/#api","title":"API","text":""},{"location":"components/uploader/#mesop.components.uploader.uploader.uploader","title":"<code>uploader</code>","text":"<p>Creates an uploader with a simple text Button component.</p> PARAMETER DESCRIPTION <code>label</code> <p>Uploader button text.</p> <p> TYPE: <code>str</code> </p> <code>accepted_file_types</code> <p>List of accepted file types. See the accept parameter.</p> <p> TYPE: <code>Sequence[str] | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>on_upload</code> <p>File upload event handler.</p> <p> TYPE: <code>Callable[[UploadEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>type</code> <p>Type of button style to use.</p> <p> TYPE: <code>Literal['raised', 'flat', 'stroked'] | None</code> DEFAULT: <code>None</code> </p> <code>color</code> <p>Theme color palette of the button.</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn'] | None</code> DEFAULT: <code>None</code> </p> <code>disable_ripple</code> <p>Whether the ripple effect is disabled or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disabled</code> <p>Whether the button is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>multiple</code> <p>Allow multiple file selection for uploads.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>style</code> <p>Style for the component.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/uploader/#mesop.components.uploader.uploader.content_uploader","title":"<code>content_uploader</code>","text":"<p>Creates an uploader component, which is a composite component. Typically, you would use a text or icon component as a child.</p> <p>Intended for advanced use cases.</p> PARAMETER DESCRIPTION <code>accepted_file_types</code> <p>List of accepted file types. See the accept parameter.</p> <p> TYPE: <code>Sequence[str] | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>The component key.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>on_upload</code> <p>File upload event handler.</p> <p> TYPE: <code>Callable[[UploadEvent], Any] | None</code> DEFAULT: <code>None</code> </p> <code>type</code> <p>Type of button style to use</p> <p> TYPE: <code>Literal['raised', 'flat', 'stroked', 'icon'] | None</code> DEFAULT: <code>None</code> </p> <code>color</code> <p>Theme color palette of the button</p> <p> TYPE: <code>Literal['primary', 'accent', 'warn'] | None</code> DEFAULT: <code>None</code> </p> <code>disable_ripple</code> <p>Whether the ripple effect is disabled or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disabled</code> <p>Whether the button is disabled.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>multiple</code> <p>Allow multiple file selection for uploads.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>style</code> <p>Style for the component.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p>"},{"location":"components/uploader/#mesop.components.uploader.uploader.UploadEvent","title":"<code>UploadEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>Event for file uploads.</p> ATTRIBUTE DESCRIPTION <code>files</code> <p>Upload files</p> <p> TYPE: <code>list[UploadedFile]</code> </p> <code>file</code> <p>The first uploaded file. Convenience property for single uploads</p> <p> </p>"},{"location":"components/uploader/#mesop.components.uploader.uploader.UploadedFile","title":"<code>UploadedFile</code>","text":"<p>               Bases: <code>BytesIO</code></p> <p>Uploaded file contents and metadata.</p>"},{"location":"components/video/","title":"Video","text":""},{"location":"components/video/#overview","title":"Overview","text":"<p>Video is the equivalent of an <code>&lt;video&gt;</code> HTML element. Video displays the browser's native video controls.</p>"},{"location":"components/video/#examples","title":"Examples","text":"<pre><code>import mesop as me\n\n\ndef load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n\n\n@me.page(\n  on_load=load,\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://mesop-dev.github.io\"]\n  ),\n  path=\"/video\",\n)\ndef app():\n  with me.box(style=me.Style(margin=me.Margin.all(15))):\n    me.video(\n      src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm\",\n      style=me.Style(height=300, width=300),\n    )\n</code></pre>"},{"location":"components/video/#api","title":"API","text":""},{"location":"components/video/#mesop.components.video.video.video","title":"<code>video</code>","text":"<p>Creates a video.</p> PARAMETER DESCRIPTION <code>src</code> <p>URL of the video source</p> <p> TYPE: <code>str</code> </p> <code>style</code> <p>The style to apply to the image, such as width and height.</p> <p> TYPE: <code>Style | None</code> DEFAULT: <code>None</code> </p>"},{"location":"getting-started/core-concepts/","title":"Core Concepts","text":"<p>This doc will explain the core concepts of building a Mesop app.</p>"},{"location":"getting-started/core-concepts/#hello-world-app","title":"Hello World app","text":"<p>Let's start by creating a simple Hello World app in Mesop:</p> <pre><code>import mesop as me\n\n\n@me.page(path=\"/hello_world\")\ndef app():\n  me.text(\"Hello World\")\n</code></pre> <p>This simple example demonstrates a few things:</p> <ul> <li>Every Mesop app starts with <code>import mesop as me</code>. This is the only recommended way to import mesop, otherwise your app may break in the future because you may be relying on internal implementation details.</li> <li><code>@me.page</code> is a function decorator which makes a function a root component for a particular path. If you omit the <code>path</code> parameter, this is the equivalent of <code>@me.page(path=\"/\")</code>.</li> <li><code>app</code> is a Python function that we will call a component because it's creating Mesop components in the body.</li> </ul>"},{"location":"getting-started/core-concepts/#components","title":"Components","text":"<p>Components are the building blocks of a Mesop application. A Mesop application is essentially a tree of components.</p> <p>Let's explain the different kinds of components in Mesop:</p> <ul> <li>Mesop comes built-in with native components. These are components implemented using Angular/Javascript. Many of these components wrap Angular Material components.</li> <li>You can also create your own components which are called user-defined components. These are essentially Python functions like <code>app</code> in the previous example.</li> </ul>"},{"location":"getting-started/core-concepts/#counter-app","title":"Counter app","text":"<p>Let's build a more complex app to demonstrate Mesop's interactivity features.</p> <pre><code>import mesop as me\n\n\n@me.stateclass\nclass State:\n  clicks: int\n\n\ndef button_click(event: me.ClickEvent):\n  state = me.state(State)\n  state.clicks += 1\n\n\n@me.page(path=\"/counter\")\ndef main():\n  state = me.state(State)\n  me.text(f\"Clicks: {state.clicks}\")\n  me.button(\"Increment\", on_click=button_click)\n</code></pre> <p>This app allows the user to click on a button and increment a counter, which is shown to the user as \"Clicks: #\".</p> <p>Let's walk through this step-by-step.</p>"},{"location":"getting-started/core-concepts/#state","title":"State","text":"<p>The <code>State</code> class represents the application state for a particular browser session. This means every user session has its own instance of <code>State</code>.</p> <p><code>@me.stateclass</code> is a class decorator which is similar to Python's dataclass but also sets default values based on type hints and allows Mesop to inject the class as shown next.</p> <p>Note: Everything in a state class must be serializable because it's sent between the server and browser.</p>"},{"location":"getting-started/core-concepts/#event-handler","title":"Event handler","text":"<p>The <code>button_click</code> function is an event handler. An event handler has a single parameter, <code>event</code>, which can contain a value (this will be shown in the next example). An event handler is responsible for updating state based on the incoming event.</p> <p><code>me.state(State)</code> retrieves the instance of the state class for the current session.</p>"},{"location":"getting-started/core-concepts/#component","title":"Component","text":"<p>Like the previous example, <code>main</code> is a Mesop component function which is decorated with <code>page</code> to mark it as a root component for a path.</p> <p>Similar to the event handler, we can retrieve the state in a component function by calling <code>me.state(State)</code>.</p> <p>Note: it's not safe to mutate state inside a component function. All mutations must be done in an event handler.</p> <p>Rendering dynamic values in Mesop is simple because you can use standard Python string interpolation use f-strings:</p> <pre><code>me.text(f\"Clicks: {state.clicks}\")\n</code></pre> <p>The button component demonstrates connecting an event handler to a component. Whenever a click event is triggered by the component, the registered event handler function is called:</p> <pre><code>me.button(\"Increment\", on_click=button_click)\n</code></pre> <p>In summary, you've learned how to define a state class, an event handler and wire them together using interactive components.</p>"},{"location":"getting-started/core-concepts/#whats-next","title":"What's next","text":"<p>At this point, you've learned all the basics of building a Mesop app. For a step-by-step guide for building a real-world Mesop application, check out the DuoChat Codelab:</p> <p>     DuoChat Codelab </p>"},{"location":"getting-started/installing/","title":"Installing","text":"<p>If you are familiar with setting up a Python environment, then run the following command in your terminal:</p> <pre><code>pip install mesop\n</code></pre> <p>If you're not familiar with setting up a Python environment, follow one of the options below.</p>"},{"location":"getting-started/installing/#a-colab-recommended-for-beginners","title":"A. Colab (Recommended for beginners)","text":"<p>Colab is a free hosted Jupyter notebook product provided by Google.</p> <p>Try Mesop on Colab: </p>"},{"location":"getting-started/installing/#b-command-line","title":"B. Command-line","text":"<p>If you'd like to run Mesop locally on the command-line, follow these steps.</p> <p>Pre-requisites: Make sure you have Python version 3.10 or later installed by running:</p> <pre><code>python --version\n</code></pre> <p>If you don't, please download Python.</p>"},{"location":"getting-started/installing/#create-a-venv-environment","title":"Create a venv environment","text":"<ol> <li> <p>Open the terminal and navigate to a directory: <code>cd foo</code></p> </li> <li> <p>Create a virtual environment by using venv, which will avoid Python environment issues. Run:</p> </li> </ol> <pre><code>python -m venv .venv\n</code></pre> <ol> <li> <p>Activate your virtual environment:</p> macOS and LinuxWindows command promptWindows PowerShell <pre><code>source .venv/bin/activate\n</code></pre> <pre><code>.venv\\Scripts\\activate.bat\n</code></pre> <pre><code>.venv\\Scripts\\Activate.ps1\n</code></pre> </li> </ol> <p>Once you've activated the virtual environment, you will see \".venv\" at the start of your terminal prompt.</p> <ol> <li>Install mesop:</li> </ol> <pre><code>pip install mesop\n</code></pre>"},{"location":"getting-started/installing/#upgrading","title":"Upgrading","text":"<p>To upgrade Mesop, run the following command:</p> <pre><code>pip install --upgrade mesop\n</code></pre> <p>If you are using <code>requirements.txt</code> or <code>pyproject.toml</code> to manage your dependency versions, then you should update those.</p>"},{"location":"getting-started/installing/#next-steps","title":"Next steps","text":"<p>Follow the quickstart guide to learn how to create and run a Mesop app:</p> <p>     Quickstart </p>"},{"location":"getting-started/quickstart/","title":"Quickstart","text":"<p>Let's build a simple interactive Mesop app.</p>"},{"location":"getting-started/quickstart/#before-you-start","title":"Before you start","text":"<p>Make sure you've installed Mesop, otherwise please follow the Installing Guide.</p>"},{"location":"getting-started/quickstart/#starter-kit","title":"Starter kit","text":"<p>The simplest way to get started with Mesop is to use the starter kit by running <code>mesop init</code>. You can also copy and paste the code.</p> <pre><code>import time\n\nimport mesop as me\n\n\n@me.stateclass\nclass State:\n  input: str\n  output: str\n  in_progress: bool\n\n\n@me.page(path=\"/starter_kit\")\ndef page():\n  with me.box(\n    style=me.Style(\n      background=\"#fff\",\n      min_height=\"calc(100% - 48px)\",\n      padding=me.Padding(bottom=16),\n    )\n  ):\n    with me.box(\n      style=me.Style(\n        width=\"min(720px, 100%)\",\n        margin=me.Margin.symmetric(horizontal=\"auto\"),\n        padding=me.Padding.symmetric(\n          horizontal=16,\n        ),\n      )\n    ):\n      header_text()\n      example_row()\n      chat_input()\n      output()\n  footer()\n\n\ndef header_text():\n  with me.box(\n    style=me.Style(\n      padding=me.Padding(\n        top=64,\n        bottom=36,\n      ),\n    )\n  ):\n    me.text(\n      \"Mesop Starter Kit\",\n      style=me.Style(\n        font_size=36,\n        font_weight=700,\n        background=\"linear-gradient(90deg, #4285F4, #AA5CDB, #DB4437) text\",\n        color=\"transparent\",\n      ),\n    )\n\n\nEXAMPLES = [\n  \"How to tie a shoe\",\n  \"Make a brownie recipe\",\n  \"Write an email asking for a sick day off\",\n]\n\n\ndef example_row():\n  is_mobile = me.viewport_size().width &lt; 640\n  with me.box(\n    style=me.Style(\n      display=\"flex\",\n      flex_direction=\"column\" if is_mobile else \"row\",\n      gap=24,\n      margin=me.Margin(bottom=36),\n    )\n  ):\n    for example in EXAMPLES:\n      example_box(example, is_mobile)\n\n\ndef example_box(example: str, is_mobile: bool):\n  with me.box(\n    style=me.Style(\n      width=\"100%\" if is_mobile else 200,\n      height=140,\n      background=\"#F0F4F9\",\n      padding=me.Padding.all(16),\n      font_weight=500,\n      line_height=\"1.5\",\n      border_radius=16,\n      cursor=\"pointer\",\n    ),\n    key=example,\n    on_click=click_example_box,\n  ):\n    me.text(example)\n\n\ndef click_example_box(e: me.ClickEvent):\n  state = me.state(State)\n  state.input = e.key\n\n\ndef chat_input():\n  state = me.state(State)\n  with me.box(\n    style=me.Style(\n      padding=me.Padding.all(8),\n      background=\"white\",\n      display=\"flex\",\n      width=\"100%\",\n      border=me.Border.all(\n        me.BorderSide(width=0, style=\"solid\", color=\"black\")\n      ),\n      border_radius=12,\n      box_shadow=\"0 10px 20px #0000000a, 0 2px 6px #0000000a, 0 0 1px #0000000a\",\n    )\n  ):\n    with me.box(\n      style=me.Style(\n        flex_grow=1,\n      )\n    ):\n      me.native_textarea(\n        value=state.input,\n        autosize=True,\n        min_rows=4,\n        placeholder=\"Enter your prompt\",\n        style=me.Style(\n          padding=me.Padding(top=16, left=16),\n          background=\"white\",\n          outline=\"none\",\n          width=\"100%\",\n          overflow_y=\"auto\",\n          border=me.Border.all(\n            me.BorderSide(style=\"none\"),\n          ),\n        ),\n        on_blur=textarea_on_blur,\n      )\n    with me.content_button(type=\"icon\", on_click=click_send):\n      me.icon(\"send\")\n\n\ndef textarea_on_blur(e: me.InputBlurEvent):\n  state = me.state(State)\n  state.input = e.value\n\n\ndef click_send(e: me.ClickEvent):\n  state = me.state(State)\n  if not state.input:\n    return\n  state.in_progress = True\n  input = state.input\n  state.input = \"\"\n  yield\n\n  for chunk in call_api(input):\n    state.output += chunk\n    yield\n  state.in_progress = False\n  yield\n\n\ndef call_api(input):\n  # Replace this with an actual API call\n  time.sleep(0.5)\n  yield \"Example of streaming an output\"\n  time.sleep(1)\n  yield \"\\n\\nOutput: \" + input\n\n\ndef output():\n  state = me.state(State)\n  if state.output or state.in_progress:\n    with me.box(\n      style=me.Style(\n        background=\"#F0F4F9\",\n        padding=me.Padding.all(16),\n        border_radius=16,\n        margin=me.Margin(top=36),\n      )\n    ):\n      if state.output:\n        me.markdown(state.output)\n      if state.in_progress:\n        with me.box(style=me.Style(margin=me.Margin(top=16))):\n          me.progress_spinner()\n\n\ndef footer():\n  with me.box(\n    style=me.Style(\n      position=\"sticky\",\n      bottom=0,\n      padding=me.Padding.symmetric(vertical=16, horizontal=16),\n      width=\"100%\",\n      background=\"#F0F4F9\",\n      font_size=14,\n    )\n  ):\n    me.html(\n      \"Made with &lt;a href='https://mesop-dev.github.io/mesop/'&gt;Mesop&lt;/a&gt;\",\n    )\n</code></pre>"},{"location":"getting-started/quickstart/#running-a-mesop-app","title":"Running a Mesop app","text":"<p>Once you've created your Mesop app using the starter kit, you can run the Mesop app by running the following command in your terminal:</p> <pre><code>mesop main.py\n</code></pre> <p>If you've named it something else, replace <code>main.py</code> with the filename of your Python module.</p> <p>Open the URL printed in the terminal (i.e. http://localhost:32123) in the browser to see your Mesop app loaded.</p>"},{"location":"getting-started/quickstart/#hot-reload","title":"Hot reload","text":"<p>If you make changes to the code, the Mesop app should be automatically hot reloaded. This means that you can keep the <code>mesop</code> CLI command running in the background in your terminal and your UI will automatically be updated in the browser.</p>"},{"location":"getting-started/quickstart/#next-steps","title":"Next steps","text":"<p>Learn more about the core concepts of Mesop as you learn how to build your own Mesop app:</p> <p>     Core Concepts </p>"},{"location":"guides/auth/","title":"Auth","text":"<p>To ensure that the users of your Mesop application are authenticated, this guide provides a detailed, step-by-step process on how to integrate Firebase Authentication with Mesop using a web component.</p> <p>Mesop is designed to be auth provider agnostic, allowing you to integrate any auth library you prefer, whether it's on the client-side (JavaScript) or server-side (Python). You can support sign-ins, including social sign-ins like Google's or any others that you prefer. The general approach involves signing in on the client-side first, then transmitting an auth token to the server-side.</p>"},{"location":"guides/auth/#firebase-authentication","title":"Firebase Authentication","text":"<p>This guide will walk you through the process of integrating Firebase Authentication with Mesop using a custom web component.</p> <p>Pre-requisites: You will need to create a Firebase account and project. It's free to get started with Firebase and use Firebase auth for small projects, but refer to the pricing page for the most up-to-date information.</p> <p>We will be using three libraries from Firebase to build an end-to-end auth flow:</p> <ul> <li>Firebase Web SDK: Allows you to call Firebase services from your client-side JavaScript code.</li> <li>FirebaseUI Web: Provides a simple, customizable auth UI integrated with the Firebase Web SDK.</li> <li>Firebase Admin SDK (Python): Provides server-side libraries to integrate Firebase services, including Authentication, into your Python applications.</li> </ul> <p>Let's dive into how we will use each one in our Mesop app.</p>"},{"location":"guides/auth/#web-component","title":"Web component","text":"<p>The Firebase Authentication web component is a custom component built for handling the user authentication process. It's implemented using Lit, a simple library for building lightweight web components.</p>"},{"location":"guides/auth/#js-code","title":"JS code","text":"firebase_auth_component.js<pre><code>import {\n  LitElement,\n  html,\n} from 'https://cdn.jsdelivr.net/gh/lit/dist@3/core/lit-core.min.js';\n\nimport 'https://www.gstatic.com/firebasejs/10.0.0/firebase-app-compat.js';\nimport 'https://www.gstatic.com/firebasejs/10.0.0/firebase-auth-compat.js';\nimport 'https://www.gstatic.com/firebasejs/ui/6.1.0/firebase-ui-auth.js';\n\n// TODO: replace this with your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: 'AIzaSyAQR9T7sk1lElXTEUBYHx7jv7d_Bs2zt-s',\n  authDomain: 'mesop-auth-test.firebaseapp.com',\n  projectId: 'mesop-auth-test',\n  storageBucket: 'mesop-auth-test.appspot.com',\n  messagingSenderId: '565166920272',\n  appId: '1:565166920272:web:4275481621d8e5ba91b755',\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst uiConfig = {\n  // TODO: change this to your Mesop page path.\n  signInSuccessUrl: '/web_component/firebase_auth/firebase_auth_app',\n  signInFlow: 'popup',\n  signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID],\n  // tosUrl and privacyPolicyUrl accept either url string or a callback\n  // function.\n  // Terms of service url/callback.\n  tosUrl: '&lt;your-tos-url&gt;',\n  // Privacy policy url/callback.\n  privacyPolicyUrl: () =&gt; {\n    window.location.assign('&lt;your-privacy-policy-url&gt;');\n  },\n};\n\n// Initialize the FirebaseUI Widget using Firebase.\nconst ui = new firebaseui.auth.AuthUI(firebase.auth());\n\nclass FirebaseAuthComponent extends LitElement {\n  static properties = {\n    isSignedIn: {type: Boolean},\n    authChanged: {type: String},\n  };\n\n  constructor() {\n    super();\n    this.isSignedIn = false;\n  }\n\n  createRenderRoot() {\n    // Render in light DOM so firebase-ui-auth works.\n    return this;\n  }\n\n  firstUpdated() {\n    firebase.auth().onAuthStateChanged(\n      async (user) =&gt; {\n        if (user) {\n          this.isSignedIn = true;\n          const token = await user.getIdToken();\n          this.dispatchEvent(new MesopEvent(this.authChanged, token));\n        } else {\n          this.isSignedIn = false;\n          this.dispatchEvent(new MesopEvent(this.authChanged, ''));\n        }\n      },\n      (error) =&gt; {\n        console.log(error);\n      },\n    );\n\n    ui.start('#firebaseui-auth-container', uiConfig);\n  }\n\n  signOut() {\n    firebase.auth().signOut();\n  }\n\n  render() {\n    return html`\n      &lt;div\n        id=\"firebaseui-auth-container\"\n        style=\"${this.isSignedIn ? 'display: none' : ''}\"\n      &gt;&lt;/div&gt;\n      &lt;div\n        class=\"firebaseui-container firebaseui-page-provider-sign-in firebaseui-id-page-provider-sign-in firebaseui-use-spinner\"\n        style=\"${this.isSignedIn ? '' : 'display: none'}\"\n      &gt;\n        &lt;button\n          style=\"background-color:#ffffff\"\n          class=\"firebaseui-idp-button mdl-button mdl-js-button mdl-button--raised firebaseui-idp-google firebaseui-id-idp-button\"\n          @click=\"${this.signOut}\"\n        &gt;\n          &lt;span class=\"firebaseui-idp-text firebaseui-idp-text-long\"\n            &gt;Sign out&lt;/span\n          &gt;\n        &lt;/button&gt;\n      &lt;/div&gt;\n    `;\n  }\n}\n\ncustomElements.define('firebase-auth-component', FirebaseAuthComponent);\n</code></pre> <p>What you need to do:</p> <ul> <li>Replace <code>firebaseConfig</code> with your Firebase project's config. Read the Firebase docs to learn how to get yours.</li> <li>Replace the URLs <code>signInSuccessUrl</code> with your Mesop page path and <code>tosUrl</code> and <code>privacyPolicyUrl</code> to your terms and services and privacy policy page respectively.</li> </ul> <p>How it works:</p> <ul> <li>This creates a simple and configurable auth UI using FirebaseUI Web.</li> <li>Once the user has signed in, then a sign out button is shown.</li> <li>Whenever the user signs in or out, the web component dispatches an event to the Mesop server with the auth token, or absence of it.</li> <li>See our web component docs for more details.</li> </ul>"},{"location":"guides/auth/#python-code","title":"Python code","text":"firebase_auth_component.py<pre><code>from typing import Any, Callable\n\nimport mesop as me\n\n\n@me.web_component(path=\"./firebase_auth_component.js\")\ndef firebase_auth_component(on_auth_changed: Callable[[me.WebEvent], Any]):\n  return me.insert_web_component(\n    name=\"firebase-auth-component\",\n    events={\n      \"authChanged\": on_auth_changed,\n    },\n  )\n</code></pre> <p>How it works:</p> <ul> <li>Implements the Python side of the Mesop web component. See our web component docs for more details.</li> </ul>"},{"location":"guides/auth/#integrating-into-the-app","title":"Integrating into the app","text":"<p>Let's put it all together:</p> firebase_auth_app.py<pre><code>import firebase_admin\nfrom firebase_admin import auth\n\nimport mesop as me\nfrom mesop.examples.web_component.firebase_auth.firebase_auth_component import (\n  firebase_auth_component,\n)\n\n# Avoid re-initializing firebase app (useful for avoiding warning message because of hot reloads).\nif firebase_admin._DEFAULT_APP_NAME not in firebase_admin._apps:\n  default_app = firebase_admin.initialize_app()\n\n\n@me.page(\n  path=\"/web_component/firebase_auth/firebase_auth_app\",\n  stylesheets=[\n    \"https://www.gstatic.com/firebasejs/ui/6.1.0/firebase-ui-auth.css\"\n  ],\n  # Loosen the security policy so the firebase JS libraries work.\n  security_policy=me.SecurityPolicy(\n    dangerously_disable_trusted_types=True,\n    allowed_connect_srcs=[\"*.googleapis.com\"],\n    allowed_script_srcs=[\n      \"*.google.com\",\n      \"https://www.gstatic.com\",\n      \"https://cdn.jsdelivr.net\",\n    ],\n  ),\n)\ndef page():\n  email = me.state(State).email\n  if email:\n    me.text(\"Signed in email: \" + email)\n  else:\n    me.text(\"Not signed in\")\n  firebase_auth_component(on_auth_changed=on_auth_changed)\n\n\n@me.stateclass\nclass State:\n  email: str\n\n\ndef on_auth_changed(e: me.WebEvent):\n  firebaseAuthToken = e.value\n  if not firebaseAuthToken:\n    me.state(State).email = \"\"\n    return\n\n  decoded_token = auth.verify_id_token(firebaseAuthToken)\n  # You can do an allowlist if needed.\n  # if decoded_token[\"email\"] != \"allowlisted.user@gmail.com\":\n  #   raise me.MesopUserException(\"Invalid user: \" + decoded_token[\"email\"])\n  me.state(State).email = decoded_token[\"email\"]\n</code></pre> <p>Note You must add <code>firebase-admin</code> to your Mesop app's <code>requirements.txt</code> file</p> <p>How it works:</p> <ul> <li>The <code>firebase_auth_app.py</code> module integrates the Firebase Auth web component into the Mesop app. It initializes the Firebase app, defines the page where the Firebase Auth web component will be used, and sets up the state to store the user's email.</li> <li>The <code>on_auth_changed</code> function is triggered whenever the user's authentication state changes. If the user is signed in, it verifies the user's ID token and stores the user's email in the state. If the user is not signed in, it clears the email from the state.</li> </ul>"},{"location":"guides/auth/#next-steps","title":"Next steps","text":"<p>Congrats! You've now built an authenticated app with Mesop from start to finish. Read the Firebase Auth docs to learn how to configure additional sign-in options and much more.</p>"},{"location":"guides/debugging/","title":"Debugging","text":"<p>This guide will show you several ways of debugging your Mesop app:</p> <ul> <li>Debugging with server logs</li> <li>Debugging with Chrome DevTools</li> <li>Debugging with VS Code</li> </ul> <p>You can use the first two methods to debug your Mesop app both locally and in production, and the last one to debug your Mesop app locally.</p>"},{"location":"guides/debugging/#debugging-with-server-logs","title":"Debugging with server logs","text":"<p>If your Mesop app is not working properly, we recommend checking the server logs first.</p> <p>If you're running Mesop locally, you can check the terminal. If you're running Mesop in production, you will need to use your cloud provider's console to check the logs.</p>"},{"location":"guides/debugging/#debugging-with-chrome-devtools","title":"Debugging with Chrome DevTools","text":"<p>Chrome DevTools is a powerful set of web developer tools built directly into the Google Chrome browser. It can be incredibly useful for debugging Mesop applications, especially when it comes to inspecting the client-server interactions.</p> <p>Here's how you can use Chrome DevTools to debug your Mesop app:</p> <ol> <li> <p>Open your Mesop app in Google Chrome.</p> </li> <li> <p>Right-click anywhere on the page and select \"Inspect\" or use the keyboard shortcut to open Chrome DevTools:</p> <ul> <li>Windows/Linux: Ctrl + Shift + I</li> <li>macOS: Cmd + Option + I</li> </ul> </li> <li> <p>To debug general errors:</p> <ul> <li>Go to the Console tab.</li> <li>Look for any console error messages.</li> <li>You can also modify the log levels to display Mesop debug logs by clicking on \"Default levels\" and selecting \"Verbose\".</li> </ul> </li> <li> <p>To debug network issues:</p> <ul> <li>Go to the Network tab.</li> <li>Reload your page to see all network requests.</li> <li>Look for any failed requests (they'll be in red).</li> <li>Click on a request to see detailed information about headers, response, etc.</li> </ul> </li> <li> <p>For JavaScript errors:    - Check the Console tab for any error messages.    - You can set breakpoints in your JavaScript code using the Sources tab.</p> </li> </ol> <p>Remember, while Mesop abstracts away much of the frontend complexity, using these tools can still be valuable for debugging and optimizing your app's performance.</p>"},{"location":"guides/debugging/#debugging-with-vs-code","title":"Debugging with VS Code","text":"<p>VS Code is recommended for debugging your Mesop app, but you can also debug Mesop apps in other IDEs.</p> <p>Pre-requisite: Ensure VS Code is downloaded.</p> <ol> <li> <p>Install the Python Debugger VS Code extension.</p> </li> <li> <p>Include the following in your <code>.vscode/launch.json</code>:</p> </li> </ol> <pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Python: Remote Attach\",\n      \"type\": \"python\",\n      \"request\": \"attach\",\n      \"connect\": { \"host\": \"localhost\", \"port\": 5678 },\n      \"pathMappings\": [\n        { \"localRoot\": \"${workspaceFolder}\", \"remoteRoot\": \".\" }\n      ],\n      \"justMyCode\": true\n    }\n  ]\n}\n</code></pre> <ol> <li>At the top of your Mesop app (e.g. main.py), including the following snippet to start the debug server:</li> </ol> <pre><code>import debugpy\n\ndebugpy.listen(5678)\n</code></pre> <ol> <li>Connect to your debug server by going to the Run &amp; Debug tab in VS Code and selecting \"Python: Remote Attach\".</li> </ol> <p>Congrats you are now debugging your Mesop app!</p> <p>To learn more about Python debugging in VS code, read VS Code's Python debugging guide.</p>"},{"location":"guides/deployment/","title":"Deployment","text":"<p>We recommend Google Cloud Run or Hugging Face Spaces, which both have a free tier.</p> <p>This section describes how to run your Mesop application using the following platforms:</p> <ul> <li>Google Cloud Run</li> <li>Google App Engine</li> <li>Docker</li> <li>Hugging Face Spaces</li> </ul> <p>If you can run your Mesop app on Docker, you should be able to run it on many other cloud platforms, such as Hugging Face Spaces.</p>"},{"location":"guides/deployment/#example-application","title":"Example application","text":"<p>Let's start with an example application which will consist of the following files:</p> <ul> <li>main.py</li> <li>requirements.txt</li> </ul>"},{"location":"guides/deployment/#mainpy","title":"main.py","text":"<p>This file contains your Mesop application code:</p> main.py<pre><code>import mesop as me\n\n@me.page(title=\"Home\")\ndef home():\n  me.text(\"Hello, world\")\n</code></pre>"},{"location":"guides/deployment/#requirementstxt","title":"requirements.txt","text":"<p>This file specifies the Python dependencies needed. You may need to add additional dependencies depending on your use case.</p> requirements.txt<pre><code>mesop\ngunicorn\n</code></pre>"},{"location":"guides/deployment/#cloud-run","title":"Cloud Run","text":"<p>We recommend using Google Cloud Run because it's easy to get started and there's a free tier.</p>"},{"location":"guides/deployment/#pre-requisites","title":"Pre-requisites","text":"<p>You will need to create a Google Cloud account and install the <code>gcloud</code> CLI. See the official documentation for detailed instructions.</p>"},{"location":"guides/deployment/#procfile","title":"Procfile","text":"<p>Create <code>Procfile</code> to configure <code>gunicorn</code> to run Mesop.</p> Procfile<pre><code>web: gunicorn --bind :8080 main:me\n</code></pre> <p>The <code>--bind: 8080</code> will run Mesop on port 8080.</p> <p>The <code>main:me</code> syntax is <code>$(MODULE_NAME):$(VARIABLE_NAME)</code>: (see Gunicorn docs for more details):</p> <ul> <li>Because the Mesop python file is <code>main.py</code>, the module name is <code>main</code>.</li> <li>By convention, we do <code>import mesop as me</code> so the <code>me</code> refers to the main Mesop    library module which is also a callable (e.g. a function) that conforms to WSGI.</li> </ul>"},{"location":"guides/deployment/#deploy-to-google-cloud-run","title":"Deploy to Google Cloud Run","text":"<p>In your terminal, go to the application directory, which has the files listed above.</p> <p>Run the following command:</p> <pre><code>gcloud run deploy\n</code></pre> <p>Follow the instructions and then you should be able to access your deployed app.</p>"},{"location":"guides/deployment/#session-affinity","title":"Session Affinity","text":"<p>If you're running Mesop with MESOP_STATE_SESSION_BACKEND=memory, then you will want to enable session affinity in order to utilize the <code>memory</code> backend efficiently.</p> <p>The command should be:</p> <pre><code>gcloud run services update $YOUR_SERVICE --session-affinity\n</code></pre> <p>By default gunicorn allocates one worker, but you should double check that gunicorn is configured correctly for the <code>memory</code> backend.</p>"},{"location":"guides/deployment/#app-engine","title":"App Engine","text":"<p>This section describes deployment to Google App Engine using their flexible environments feature.</p>"},{"location":"guides/deployment/#pre-requisites_1","title":"Pre-requisites","text":"<p>You will need to create a Google Cloud account and install the <code>gcloud</code> CLI. See the official documentation for detailed instructions.</p> <p>You will also need to run:</p> <pre><code>gcloud app create --project=[YOUR_PROJECT_ID]\ngcloud components install app-engine-python\n</code></pre>"},{"location":"guides/deployment/#appyaml","title":"app.yaml","text":"<p>Create <code>app.yaml</code> to configure App Engine to run Mesop.</p> app.yaml<pre><code>runtime: python\nenv: flex\nentrypoint: gunicorn -b :$PORT main:me\n\nruntime_config:\n  operating_system: ubuntu22\n  runtime_version: \"3.10\"\n\nmanual_scaling:\n  instances: 1\n\nresources:\n  cpu: 1\n  memory_gb: 0.5\n  disk_size_gb: 10\n</code></pre>"},{"location":"guides/deployment/#deploy-to-app-engine","title":"Deploy to App Engine","text":"<p>In your terminal, go to the application directory, which has the files listed above.</p> <p>Run the following command:</p> <pre><code>gcloud app deploy\n</code></pre> <p>Follow the instructions and then you should be able to access your deployed app.</p>"},{"location":"guides/deployment/#docker","title":"Docker","text":"<p>If you can run your Mesop app on Docker, you should be able to run it on many other cloud platforms.</p>"},{"location":"guides/deployment/#pre-requisites_2","title":"Pre-requisites","text":"<p>Make sure Docker and Docker Compose are installed.</p>"},{"location":"guides/deployment/#dockerfile","title":"Dockerfile","text":"Dockerfile<pre><code>FROM python:3.10.15-bullseye\n\nRUN apt-get update &amp;&amp; \\\n  apt-get install -y \\\n  # General dependencies\n  locales \\\n  locales-all &amp;&amp; \\\n  # Clean local repository of package files since they won't be needed anymore.\n  # Make sure this line is called after all apt-get update/install commands have\n  # run.\n  apt-get clean &amp;&amp; \\\n  # Also delete the index files which we also don't need anymore.\n  rm -rf /var/lib/apt/lists/*\n\nENV LC_ALL en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US.UTF-8\n\n# Install dependencies\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\n# Create non-root user\nRUN groupadd -g 900 mesop &amp;&amp; useradd -u 900 -s /bin/bash -g mesop mesop\nUSER mesop\n\n# Add app code here\nCOPY . /srv/mesop-app\nWORKDIR /srv/mesop-app\n\n# Run Mesop through gunicorn. Should be available at localhost:8080\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:8080\", \"main:me\"]\n</code></pre>"},{"location":"guides/deployment/#docker-composeyaml","title":"docker-compose.yaml","text":"docker-compose.yaml<pre><code>services:\n  mesop-app:\n    build: .\n    ports:\n      - \"8080:8080\"\n</code></pre>"},{"location":"guides/deployment/#run-docker-image","title":"Run Docker image","text":"<p>In your terminal, go to the application directory, which has the files listed above.</p> <p>Run the following command:</p> <pre><code>docker-compose up -d\n</code></pre> <p>Alternatively, if you do not want to use Docker Compose, you can run:</p> <pre><code>docker build -t mesop-app . &amp;&amp; docker run -d -p 8080:8080 mesop-app\n</code></pre> <p>You should now be able to view your Mesop app at http://localhost:8080.</p>"},{"location":"guides/deployment/#hugging-face-spaces","title":"Hugging Face Spaces","text":"<p>Hugging Face Spaces has a free tier that gives you 2 vCPU and 16GB RAM, which is plenty for running Mesop applications that leverage generative AI APIs.</p>"},{"location":"guides/deployment/#pre-requisites_3","title":"Pre-requisites","text":"<p>This section assumes you already have a free Hugging Face Space account.</p>"},{"location":"guides/deployment/#create-new-space","title":"Create new Space","text":"<p>Go to https://huggingface.co/spaces and click <code>Create new Space</code>.</p> <p></p>"},{"location":"guides/deployment/#name-your-app-and-use-docker-sdk","title":"Name your app and use Docker SDK","text":"<p>Name the Space <code>mesop-hello-world</code> you want and select the <code>apache-2.0</code> license.</p> <p>Next select the Docker SDK with a blank template.</p> <p></p>"},{"location":"guides/deployment/#cpu-basic-and-create-space","title":"CPU Basic and Create Space","text":"<p>Next make sure that you are using the free <code>CPU Basic</code> plan. Then click <code>Create Space</code>.</p> <p></p>"},{"location":"guides/deployment/#clone-your-hugging-face-space-git-repository","title":"Clone your Hugging Face Space Git Repository","text":"<p>Example command using Git over SSH:</p> <pre><code>git clone git@hf.co:spaces/&lt;user-name&gt;/mesop-hello-world\ncd mesop-hello-world\n</code></pre> <p>Note: You'll need to have an SSH key configured on Hugging Face. See https://huggingface.co/docs/hub/en/security-git-ssh.</p>"},{"location":"guides/deployment/#create-mainpy","title":"Create main.py","text":"<p>This is the same <code>main.py</code> file shown earlier, except we need to allow Hugging Face to iframe our Mesop app.</p> main.py<pre><code>import mesop as me\n\n@me.page(\n  title=\"Home\",\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://huggingface.co\"]\n  ),\n)\ndef home():\n  me.text(\"Hello, world\")\n</code></pre>"},{"location":"guides/deployment/#create-requirementstxt","title":"Create requirements.txt","text":"<p>This file is the same as the generic Docker setup:</p> requirements.txt<pre><code>mesop\ngunicorn\n</code></pre>"},{"location":"guides/deployment/#create-dockerfile","title":"Create Dockerfile","text":"<p>This file is the same as the generic Docker setup:</p> Dockerfile<pre><code>FROM python:3.10.15-bullseye\n\nRUN apt-get update &amp;&amp; \\\n  apt-get install -y \\\n  # General dependencies\n  locales \\\n  locales-all &amp;&amp; \\\n  # Clean local repository of package files since they won't be needed anymore.\n  # Make sure this line is called after all apt-get update/install commands have\n  # run.\n  apt-get clean &amp;&amp; \\\n  # Also delete the index files which we also don't need anymore.\n  rm -rf /var/lib/apt/lists/*\n\nENV LC_ALL en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US.UTF-8\n\n# Install dependencies\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\n# Create non-root user\nRUN groupadd -g 900 mesop &amp;&amp; useradd -u 900 -s /bin/bash -g mesop mesop\nUSER mesop\n\n# Add app code here\nCOPY . /srv/mesop-app\nWORKDIR /srv/mesop-app\n\n# Run Mesop through gunicorn. Should be available at localhost:8080\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:8080\", \"main:me\"]\n</code></pre>"},{"location":"guides/deployment/#add-app_port-in-readmemd","title":"Add app_port in README.md","text":"<p>Next we will need to open port <code>8080</code> which we specified in the Dockerfile. This is done through a config section in the <code>README.md</code>.</p> README.md<pre><code>---\ntitle: Mesop Hello World\nemoji: \ud83d\udc20\ncolorFrom: blue\ncolorTo: purple\nsdk: docker\npinned: false\nlicense: apache-2.0\napp_port: 8080\n---\n\nCheck out the configuration reference at https://huggingface.co/docs/hub/spaces-config-reference\n</code></pre>"},{"location":"guides/deployment/#deploy-to-hugging-face-spaces","title":"Deploy to Hugging Face Spaces","text":"<p>The commands to commit your changes and push to the Hugging Face Spaces git repository are:</p> <pre><code>git add -A\ngit commit -m \"Add hello world Mesop app\"\ngit push origin main\n</code></pre>"},{"location":"guides/deployment/#view-deployed-app","title":"View deployed app","text":"<p>Congratulations! You should now be able to view your app on Hugging Face Spaces.</p> <p>The URL should be something like this:</p> <pre><code>https://huggingface.co/spaces/&lt;user-name&gt;/mesop-hello-world\n</code></pre> <p></p>"},{"location":"guides/event-handlers/","title":"Event Handlers","text":"<p>Event handlers are a core part of Mesop and enables you to handle user interactions by writing Python functions which are called by the Mesop framework when a user event is received.</p>"},{"location":"guides/event-handlers/#how-it-works","title":"How it works","text":"<p>Let's take a look at a simple example of an event handler:</p> Simple event handler<pre><code>def counter():\n    me.button(\"Increment\", on_click=on_click)\n\ndef on_click(event: me.ClickEvent):\n    state = me.state(State)\n    state.count += 1\n\n@me.stateclass\nclass State:\n    count: int = 0\n</code></pre> <p>Although this example looks simple, there's a lot going on under the hood.</p> <p>When the counter function is called, it creates an instance of the button component and binds the <code>on_click</code> event handler to it. Because components (and the entire Mesop UI) is serialized and sent to the client, we need a way of serializing the event handler so that when the button is clicked, the correct event handler is called on the server.</p> <p>We don't actually need to serialize the entire event handler, rather we just need to compute a unique id for the event handler function.</p> <p>Because Mesop has a stateless architecture, we need a way of computing an id for the event handler function that's stable across Python runtimes. For example, the initial page may be rendered by one Python server, but another server may be used to respond to the user event. This stateless architecture allows Mesop apps to be fault-tolerant and enables simple scaling.</p>"},{"location":"guides/event-handlers/#types-of-event-handlers","title":"Types of event handlers","text":""},{"location":"guides/event-handlers/#regular-functions","title":"Regular functions","text":"<p>These are the simplest and most common type of event handlers used. It's essentially a regular Python function which is called by the Mesop framework when a user event is received.</p> Regular function<pre><code>def on_click(event: me.ClickEvent):\n    state = me.state(State)\n    state.count += 1\n</code></pre>"},{"location":"guides/event-handlers/#generator-functions","title":"Generator functions","text":"<p>Python Generator functions are a powerful tool, which allow you to <code>yield</code> multiple times in a single event handler. This allows you to render intermediate UI states.</p> Generator function<pre><code>def on_click(event: me.ClickEvent):\n    state = me.state(State)\n    state.count += 1\n    yield\n    time.sleep(1)\n    state.count += 1\n    yield\n</code></pre> <p>You can learn more about real-world use cases of the generator functions in the Interactivity guide.</p> Always yield at the end of a generator function <p>If you use a <code>yield</code> statement in your event handler, then the event handler will be a generator function. You must have a <code>yield</code> statement at the end of the event handler (or each return point), otherwise not all of your code will be executed.</p>"},{"location":"guides/event-handlers/#async-generator-functions","title":"Async generator functions","text":"<p>Python async generator functions allow you to do concurrent work using Python's <code>async</code> and <code>await</code> language features. If you are using async Python libraries, you can use these types of event handlers.</p> Async generator function<pre><code>async def on_click(event: me.ClickEvent):\n    state = me.state(State)\n    state.count += 1\n    yield\n    await asyncio.sleep(1)\n    state.count += 1\n    yield\n</code></pre> <p>For a more complete example, please refer to the Async section of the Interactivity guide.</p> Always yield at the end of an async generator function <p>Similar to a regular generator function, an async generator function must have a <code>yield</code> statement at the end of the event handler (or each return point), otherwise not all of your code will be executed.</p>"},{"location":"guides/event-handlers/#patterns","title":"Patterns","text":""},{"location":"guides/event-handlers/#reusing-event-handler-logic","title":"Reusing event handler logic","text":"<p>You can share event handler logic by extracting the common logic into a separate function. For example, you will often want to use the same logic for the <code>on_enter</code> event handler for an input component and the <code>on_click</code> event handler for a \"send\" button component.</p> Reusing event handler logic<pre><code>def on_enter(event: me.InputEnterEvent):\n    state = me.state(State)\n    state.value = event.value\n    call_api()\n\ndef on_click(event: me.ClickEvent):\n    # Assumes that state.value has been set by an on_blur event handler\n    call_api()\n\ndef call_api():\n    # Put your common event handler logic here\n    pass\n</code></pre> <p>If you want to reuse event handler logic between generator functions, you can use the <code>yield from</code> syntax. For example, let's say <code>call_api</code> in the above example is a generator function. You can use <code>yield from</code> to reuse the event handler logic:</p> Reusing event handler logic for generator functions<pre><code>def on_enter(event: me.InputEnterEvent):\n    state = me.state(State)\n    state.value = event.value\n    yield from call_api()\n\ndef on_click(event: me.ClickEvent):\n    yield from call_api()\n\ndef call_api():\n    # Do initial work\n    yield\n    # Do more work\n    yield\n</code></pre>"},{"location":"guides/event-handlers/#boilerplate-free-event-handlers","title":"Boilerplate-free event handlers","text":"<p>If you're building a form-like UI, it can be tedious to write a separate event handler for each form field. Instead, you can use this pattern which utilizes the <code>key</code> attribute that's available in most events and uses Python's built-in <code>setattr</code> function to dynamically update the state:</p> Boilerplate-free event handlers<pre><code>def app():\n  me.input(label=\"Name\", key=\"name\", on_blur=update_state)\n  me.input(label=\"Address\", key=\"address\", on_blur=update_state)\n\n@me.stateclass\nclass State:\n  name: str\n  address: str\n\ndef update_state(event: me.InputBlurEvent):\n  state = me.state(State)\n  setattr(state, event.key, event.value)\n</code></pre> <p>The downside of this approach is that you lose type safety. Generally, defining a separate event handler, although more verbose, is easier to maintain.</p>"},{"location":"guides/event-handlers/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/event-handlers/#avoid-using-closure-variables-in-event-handler","title":"Avoid using closure variables in event handler","text":"<p>One subtle mistake when building a reusable component is having the event handler use a closure variable, as shown in the following example:</p> Bad example of using closure variable<pre><code>@me.component\ndef link_component(url: str):\n   def on_click(event: me.ClickEvent):\n     me.navigate(url)\n  return me.button(url, on_click=on_click)\n\ndef app():\n    link_component(\"/1\")\n    link_component(\"/2\")\n</code></pre> <p>The problem with this above example is that Mesop only stores the last event handler. This is because each event handler has the same id which means that Mesop cannot differentiate between the two instances of the same event handler.</p> <p>This means that both instances of the link_component will refer to the last <code>on_click</code> instance which references the same <code>url</code> closure variable set to <code>\"/2\"</code>. This almost always produces the wrong behavior.</p> <p>Instead, you will want to use the pattern of relying on the key in the event handler as demonstrated in the following example:</p> Good example of using key<pre><code>@me.component\ndef link_component(url: str):\n   def on_click(event: me.ClickEvent):\n     me.navigate(event.key)\n  return me.button(url, key=url, on_click=on_click)\n</code></pre> <p>For more info on using component keys, please refer to the Component Key docs.</p>"},{"location":"guides/event-handlers/#next-steps","title":"Next steps","text":"<p>Explore advanced interactivity patterns like streaming and async:</p> <p>     Interactivity </p>"},{"location":"guides/interactivity/","title":"Interactivity","text":"<p>This guide continues from the event handlers guide and explains advanced interactivity patterns for dealing with common use cases such as calling a slow blocking API call or a streaming API call.</p>"},{"location":"guides/interactivity/#intermediate-loading-state","title":"Intermediate loading state","text":"<p>If you are calling a slow blocking API (e.g. several seconds) to provide a better user experience, you may want to introduce a custom loading indicator for a specific event.</p> <p>Note: Mesop has a built-in loading indicator at the top of the page for all events.</p> <pre><code>import time\n\nimport mesop as me\n\n\ndef slow_blocking_api_call():\n  time.sleep(2)\n  return \"foo\"\n\n\n@me.stateclass\nclass State:\n  data: str\n  is_loading: bool\n\n\ndef button_click(event: me.ClickEvent):\n  state = me.state(State)\n  state.is_loading = True\n  yield\n  data = slow_blocking_api_call()\n  state.data = data\n  state.is_loading = False\n  yield\n\n\n@me.page(path=\"/loading\")\ndef main():\n  state = me.state(State)\n  if state.is_loading:\n    me.progress_spinner()\n  me.text(state.data)\n  me.button(\"Call API\", on_click=button_click)\n</code></pre> <p>In this example, our event handler is a Python generator function. Each <code>yield</code> statement yields control back to the Mesop framework and executes a render loop which results in a UI update.</p> <p>Before the first yield statement, we set <code>is_loading</code> to True on state so we can show a spinner while the user is waiting for the slow API call to complete.</p> <p>Before the second (and final) yield statement, we set <code>is_loading</code> to False, so we can hide the spinner and then we add the result of the API call to state so we can display that to the user.</p> <p>Tip: you must have a yield statement as the last line of a generator event handler function. Otherwise, any code after the final yield will not be executed.</p>"},{"location":"guides/interactivity/#streaming","title":"Streaming","text":"<p>This example builds off the previous Loading example and makes our event handler a generator function so we can incrementally update the UI.</p> <pre><code>from time import sleep\n\nimport mesop as me\n\n\ndef generate_str():\n  yield \"foo\"\n  sleep(1)\n  yield \"bar\"\n\n\n@me.stateclass\nclass State:\n  string: str = \"\"\n\n\ndef button_click(action: me.ClickEvent):\n  state = me.state(State)\n  for val in generate_str():\n    state.string += val\n    yield\n\n\n@me.page(path=\"/streaming\")\ndef main():\n  state = me.state(State)\n  me.button(\"click\", on_click=button_click)\n  me.text(text=f\"{state.string}\")\n</code></pre>"},{"location":"guides/interactivity/#async","title":"Async","text":"<p>If you want to do multiple long-running operations concurrently, then we recommend you to use Python's <code>async</code> and <code>await</code>.</p> <pre><code>import asyncio\n\nimport mesop as me\n\n\n@me.page(path=\"/async_await\")\ndef page():\n  s = me.state(State)\n  me.text(\"val1=\" + s.val1)\n  me.text(\"val2=\" + s.val2)\n  me.button(\"async with yield\", on_click=click_async_with_yield)\n  me.button(\"async without yield\", on_click=click_async_no_yield)\n\n\n@me.stateclass\nclass State:\n  val1: str\n  val2: str\n\n\nasync def fetch_dummy_values():\n  # Simulate an asynchronous operation\n  await asyncio.sleep(2)\n  return \"&lt;async_value&gt;\"\n\n\nasync def click_async_with_yield(e: me.ClickEvent):\n  val1_task = asyncio.create_task(fetch_dummy_values())\n  val2_task = asyncio.create_task(fetch_dummy_values())\n\n  me.state(State).val1, me.state(State).val2 = await asyncio.gather(\n    val1_task, val2_task\n  )\n  yield\n\n\nasync def click_async_no_yield(e: me.ClickEvent):\n  val1_task = asyncio.create_task(fetch_dummy_values())\n  val2_task = asyncio.create_task(fetch_dummy_values())\n\n  me.state(State).val1, me.state(State).val2 = await asyncio.gather(\n    val1_task, val2_task\n  )\n</code></pre>"},{"location":"guides/interactivity/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/interactivity/#user-input-race-condition","title":"User input race condition","text":"<p>If you notice a race condition with user input (e.g. input or textarea) where sometimes the last few characters typed by the user is lost, you are probably unnecessarily setting the value of the component.</p> <p>See the following example using this anti-pattern :</p> Bad example: setting the value and using on_input<pre><code>@me.stateclass\nclass State:\n  input_value: str\n\ndef app():\n  state = me.state(State)\n  me.input(value=state.input_value, on_input=on_input)\n\ndef on_input(event: me.InputEvent):\n  state = me.state(State)\n  state.input_value = event.value\n</code></pre> <p>The problem is that the input value now has a race condition because it's being set by two sources:</p> <ol> <li>The server is setting the input value based on state.</li> <li>The client is setting the input value based on what the user is typing.</li> </ol> <p>There's several ways to fix this which are shown below.</p>"},{"location":"guides/interactivity/#option-1-use-on_blur-instead-of-on_input","title":"Option 1: Use <code>on_blur</code> instead of <code>on_input</code>","text":"<p>You can use the <code>on_blur</code> event instead of <code>on_input</code> to only update the input value when the user loses focus on the input field.</p> <p>This is also more performant because it sends much fewer network requests.</p> Good example: setting the value and using on_input<pre><code>@me.stateclass\nclass State:\n  input_value: str\n\ndef app():\n  state = me.state(State)\n  me.input(value=state.input_value, on_input=on_input)\n\ndef on_input(event: me.InputEvent):\n  state = me.state(State)\n  state.input_value = event.value\n</code></pre>"},{"location":"guides/interactivity/#option-2-do-not-set-the-input-value-from-the-server","title":"Option 2: Do not set the input value from the server","text":"<p>If you don't need to set the input value from the server, then you can remove the <code>value</code> attribute from the input component.</p> Good example: not setting the value<pre><code>@me.stateclass\nclass State:\n  input_value: str\n\ndef app():\n  state = me.state(State)\n  me.input(on_input=on_input)\n\ndef on_input(event: me.InputEvent):\n  state = me.state(State)\n  state.input_value = event.value\n</code></pre>"},{"location":"guides/interactivity/#option-3-use-two-separate-variables-for-initial-and-current-input-value","title":"Option 3: Use two separate variables for initial and current input value","text":"<p>If you need set the input value from the server and you need to use <code>on_input</code>, then you can use two separate variables for the initial and current input value.</p> Good example: using two separate variables for initial and current input value<pre><code>@me.stateclass\nclass State:\n  initial_input_value: str = \"initial_value\"\n  current_input_value: str\n\n@me.page()\ndef app():\n  state = me.state(State)\n  me.input(value=state.initial_input_value, on_input=on_input)\n\ndef on_input(event: me.InputEvent):\n  state = me.state(State)\n  state.current_input_value = event.value\n</code></pre>"},{"location":"guides/interactivity/#next-steps","title":"Next steps","text":"<p>Learn about layouts to build a customized UI.</p> <p>     Layouts </p>"},{"location":"guides/labs/","title":"Labs","text":"<p>Mesop Labs is built on top of the core Mesop framework and may evolve in the future.</p>"},{"location":"guides/labs/#using-labs","title":"Using Labs","text":"<p>You will need to add an import statement to use labs:</p> <pre><code>import mesop.labs as mel\n</code></pre> <p>The code inside Mesop Labs is intended to be simple to understand so you can copy and customize it as needed.</p>"},{"location":"guides/layouts/","title":"Layouts","text":"<p>Mesop takes an unopinionated approach to layout. It does not impose a specific layout on your app so you can build custom layouts. The crux of doing layouts in Mesop is the Box component and using the Style API which are Pythonic wrappers around the CSS layout model.</p> <p>For most Mesop apps, you will use some combination of these types of layouts:</p> <ul> <li>Rows and Columns</li> <li>Grids</li> </ul>"},{"location":"guides/layouts/#common-layout-examples","title":"Common layout examples","text":"<p>To interact with the examples below, open the Mesop Layouts Colab: </p>"},{"location":"guides/layouts/#rows-and-columns","title":"Rows and Columns","text":""},{"location":"guides/layouts/#basic-row","title":"Basic Row","text":"Basic Row<pre><code>def row():\n    with me.box(style=me.Style(display=\"flex\", flex_direction=\"row\")):\n        me.text(\"Left\")\n        me.text(\"Right\")\n</code></pre>"},{"location":"guides/layouts/#row-with-spacing","title":"Row with Spacing","text":"Row with Spacing<pre><code>def row():\n    with me.box(style=me.Style(display=\"flex\", flex_direction=\"row\", justify_content=\"space-around\")):\n        me.text(\"Left\")\n        me.text(\"Right\")\n</code></pre>"},{"location":"guides/layouts/#row-with-alignment","title":"Row with Alignment","text":"Row with Alignment<pre><code>def row():\n    with me.box(style=me.Style(display=\"flex\", flex_direction=\"row\", align_items=\"center\")):\n        me.box(style=me.Style(background=\"red\", height=50, width=\"50%\"))\n        me.box(style=me.Style(background=\"blue\", height=100, width=\"50%\"))\n</code></pre>"},{"location":"guides/layouts/#rows-and-columns_1","title":"Rows and Columns","text":"Rows and Columns<pre><code>def app():\n    with me.box(style=me.Style(display=\"flex\", flex_direction=\"row\", gap=16, height=\"100%\")):\n        column(1)\n        column(2)\n        column(3)\n\ndef column(num: int):\n    with me.box(style=me.Style(\n        flex_grow=1,\n        background=\"#e0e0e0\",\n        padding=me.Padding.all(16),\n        display=\"flex\",\n        flex_direction=\"column\",\n    )):\n        me.box(style=me.Style(background=\"red\", height=100))\n        me.box(style=me.Style(background=\"blue\", flex_grow=1))\n</code></pre>"},{"location":"guides/layouts/#grids","title":"Grids","text":""},{"location":"guides/layouts/#side-by-side-grid","title":"Side-by-side Grid","text":"Side-by-side Grid<pre><code>def grid():\n    # 1fr means 1 fraction, so each side is the same size.\n    # Try changing one of the 1fr to 2fr and see what it looks like\n    with me.box(style=me.Style(display=\"grid\", grid_template_columns=\"1fr 1fr\")):\n        me.text(\"A bunch of text\")\n        me.text(\"Some more text\")\n</code></pre>"},{"location":"guides/layouts/#header-body-footer-grid","title":"Header Body Footer Grid","text":"Header Body Footer Grid<pre><code>def app():\n    with me.box(style=me.Style(\n        display=\"grid\",\n        grid_template_rows=\"auto 1fr auto\",\n        height=\"100%\"\n    )):\n        # Header\n        with me.box(style=me.Style(\n            background=\"#f0f0f0\",\n            padding=me.Padding.all(24)\n        )):\n            me.text(\"Header\")\n\n        # Body\n        with me.box(style=me.Style(\n            padding=me.Padding.all(24),\n            overflow_y=\"auto\"\n        )):\n            me.text(\"Body Content\")\n            # Add more body content here\n\n        # Footer\n        with me.box(style=me.Style(\n            background=\"#f0f0f0\",\n            padding=me.Padding.all(24)\n        )):\n            me.text(\"Footer\")\n</code></pre>"},{"location":"guides/layouts/#sidebar-layout","title":"Sidebar Layout","text":"Sidebar Layout<pre><code>def app():\n    with me.box(style=me.Style(\n        display=\"grid\",\n        grid_template_columns=\"250px 1fr\",\n        height=\"100%\"\n    )):\n        # Sidebar\n        with me.box(style=me.Style(\n            background=\"#f0f0f0\",\n            padding=me.Padding.all(24),\n            overflow_y=\"auto\"\n        )):\n            me.text(\"Sidebar\")\n\n        # Main content\n        with me.box(style=me.Style(\n            padding=me.Padding.all(24),\n            overflow_y=\"auto\"\n        )):\n            me.text(\"Main Content\")\n</code></pre>"},{"location":"guides/layouts/#responsive-ui","title":"Responsive UI","text":"<p>This is similar to the Grid Sidebar layout above, except on smaller screens, we will hide the sidebar. Try resizing the browser window and see how the UI changes.</p> <p>Learn more about responsive UI in the viewport size docs.</p> <pre><code>def app():\n    is_desktop = me.viewport_size().width &gt; 640\n    with me.box(style=me.Style(\n        display=\"grid\",\n        grid_template_columns=\"250px 1fr\" if is_desktop else \"1fr\",\n        height=\"100%\"\n    )):\n        if is_desktop:\n          # Sidebar\n          with me.box(style=me.Style(\n              background=\"#f0f0f0\",\n              padding=me.Padding.all(24),\n              overflow_y=\"auto\"\n          )):\n              me.text(\"Sidebar\")\n\n        # Main content\n        with me.box(style=me.Style(\n            padding=me.Padding.all(24),\n            overflow_y=\"auto\"\n        )):\n            me.text(\"Main Content\")\n</code></pre>"},{"location":"guides/layouts/#learn-more","title":"Learn more","text":"<p>For a real-world example of using these types of layouts, check out the Mesop Showcase app:</p> <ul> <li>App</li> <li>Code</li> </ul> <p>To learn more about flexbox layouts (rows and columns), check out:</p> <ul> <li>CSS Tricks Guide to Flexbox Layouts</li> <li>MDN Flexbox guide</li> </ul> <p>To learn more about grid layouts, check out:</p> <ul> <li>CSS Tricks Guide to Grid Layouts</li> <li>MDN Grid guide</li> </ul>"},{"location":"guides/multi-pages/","title":"Multi-Pages","text":"<p>You can define multi-page Mesop applications by using the page feature you learned from Core Concepts.</p>"},{"location":"guides/multi-pages/#multi-page-setup","title":"Multi-page setup","text":"<pre><code>import mesop as me\n\n@me.page(path=\"/1\")\ndef page1():\n    me.text(\"page 1\")\n\n@me.page(path=\"/2\")\ndef page2():\n    me.text(\"page 2\")\n</code></pre> <p>Learn more about page configuration in the page API doc.</p>"},{"location":"guides/multi-pages/#navigation","title":"Navigation","text":"<p>If you have multiple pages, you will typically want to navigate from one page to another when the user clicks a button. You can use <code>me.navigate(\"/to/path\")</code> to navigate to another page.</p> <p>Example:</p> <pre><code>import mesop as me\n\n\ndef on_click(e: me.ClickEvent):\n  state = me.state(State)\n  state.count += 1\n  me.navigate(\"/multi_page_nav/page_2\")\n\n\n@me.page(path=\"/multi_page_nav\")\ndef main_page():\n  me.button(\"Navigate to Page 2\", on_click=on_click)\n\n\n@me.page(path=\"/multi_page_nav/page_2\")\ndef page_2():\n  state = me.state(State)\n  me.text(f\"Page 2 - count: {state.count}\")\n\n\n@me.stateclass\nclass State:\n  count: int\n</code></pre> <p>Note: you can re-use state across pages. See how the above example uses the <code>State#count</code> value across pages.</p>"},{"location":"guides/performance/","title":"Performance","text":"<p>Occasionally, you may run into performance issues with your Mesop app. Here are some tips to help you improve your app's performance.</p>"},{"location":"guides/performance/#determine-the-root-cause","title":"Determine the root cause","text":"<p>The first step in debugging performance issues is to identify the cause of the issue. Follow the Debugging with DevTools guide and use the Console and Network tab to identify the issue.</p>"},{"location":"guides/performance/#common-performance-bottlenecks-and-solutions","title":"Common performance bottlenecks and solutions","text":""},{"location":"guides/performance/#optimizing-state-size","title":"Optimizing state size","text":"<p>If you notice with Chrome DevTools that you're sending very large network payloads between client and server, it's likely that your state is too large.</p> <p>Because the state object is serialized and sent back and forth between the client and server, you should try to keep the state object reasonably sized. For example, if you store a very large string (e.g. base64-encoded image) in state, then it will degrade performance of your Mesop app.</p> <p>The following are recommendations to help you avoid large state payloads:</p>"},{"location":"guides/performance/#store-state-in-memory","title":"Store state in memory","text":"<p>Mesop has a feature that allows you to store state in memory rather than passing the full state on every request. This may help improve performance when dealing with large state objects. The caveat is that, storing state in memory contains its own set of problems that you must carefully consider. See the config section for details on how to use this feature.</p> <p>If you are running Mesop on a single replica or you can enable session affinity, then this is a good option.</p>"},{"location":"guides/performance/#store-state-externally","title":"Store state externally","text":"<p>You can also store state outside of Mesop using a database or a storage service. This is a good option if you have a large amount of state data. For example, rather than storing images in the state, you can store them in a bucket service like Google Cloud Storage and send signed URLs to the client so that it can directly fetch the images without going through the Mesop server.</p>"},{"location":"guides/performance/#handling-high-user-load","title":"Handling high user load","text":"<p>If you notice that your Mesop app is running slowly when you have many concurrent users, you can try to scale your Mesop app.</p>"},{"location":"guides/performance/#increase-the-number-of-replicas","title":"Increase the number of replicas","text":"<p>To handle more concurrent users, you can scale your Mesop app horizontally by increasing the number of replicas (instances) running your application. This can be achieved through various cloud services that offer autoscaling features:</p> <ol> <li> <p>Use a managed service like Google Cloud Run, which automatically scales your app based on traffic. Follow Mesop's Cloud Run deployment guide for details.</p> </li> <li> <p>Manually adjust the number of replicas to a higher number.</p> </li> <li> <p>Tune gunicorn settings. If you're using gunicorn to serve your Mesop app, you can adjust gunicorn settings to increase the number of workers. This can help to increase the number of concurrent users your Mesop app can handle.</p> </li> </ol> <p>Whichever platform you choose, make sure to configure the replica settings to match your app's performance requirements and budget constraints.</p>"},{"location":"guides/server-integration/","title":"Server integration","text":"<p>Mesop allows you to integrate Mesop with other Python web servers like FastAPI or Flask by mounting the Mesop app which is a WSGI app.</p> <p>This enables you to do things like:</p> <ul> <li>Serve local files (e.g. images)</li> <li>Provide API endpoints (which can be called by the web component, etc.)</li> </ul>"},{"location":"guides/server-integration/#api","title":"API","text":"<p>The main API for doing this integration is the <code>create_wsgi_app</code> function.</p>"},{"location":"guides/server-integration/#mesop.server.wsgi_app.create_wsgi_app","title":"<code>create_wsgi_app</code>","text":"<p>Creates a WSGI app that can be used to run Mesop in a WSGI server like gunicorn.</p> PARAMETER DESCRIPTION <code>debug_mode</code> <p>If True, enables debug mode for the Mesop app.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"guides/server-integration/#fastapi-example","title":"FastAPI example","text":"<p>For a working example of using Mesop with FastAPI, please take a look at this repo: https://github.com/wwwillchen/mesop-fastapi</p> <p>Note: you can apply similar steps to use any other web framework that allows you to mount a WSGI app.</p>"},{"location":"guides/state-management/","title":"State Management","text":"<p>State management is a critical element of building interactive apps because it allows you store information about what the user did in a structured way.</p>"},{"location":"guides/state-management/#basic-usage","title":"Basic usage","text":"<p>You can register a class using the class decorator <code>me.stateclass</code> which is like a dataclass with special powers:</p> <pre><code>@me.stateclass\nclass State:\n  val: str\n</code></pre> <p>You can get an instance of the state class inside any of your Mesop component functions by using <code>me.state</code>:</p> <pre><code>@me.page()\ndef page():\n    state = me.state(State)\n    me.text(state.val)\n</code></pre>"},{"location":"guides/state-management/#use-immutable-default-values","title":"Use immutable default values","text":"<p>Similar to regular dataclasses which disallow mutable default values, you need to avoid mutable default values such as list and dict for state classes. Using mutable default values can result in leaking state across sessions which can be a serious privacy issue.</p> <p>You MUST use immutable default values or use dataclasses <code>field</code> initializer or not set a default value.</p> Good: immutable default value <p>Setting a default value to an immutable type like str is OK.</p> <pre><code>@me.stateclass\nclass State:\n  a: str = \"abc\"\n</code></pre> Bad: mutable default value <p>The following will raise an exception because dataclasses prevents you from using mutable collection types like <code>list</code> as the default value because this is a common footgun.</p> <pre><code>@me.stateclass\nclass State:\n  a: list[str] = [\"abc\"]\n</code></pre> <p>If you set a default value to an instance of a custom type, an exception will not be raised, but you will be dangerously sharing the same mutable instance across sessions which could cause a serious privacy issue.</p> <pre><code>@me.stateclass\nclass State:\n  a: MutableClass = MutableClass()\n</code></pre> Good: default factory <p>If you want to set a field to a mutable default value, use default_factory in the <code>field</code>  function from the dataclasses module to create a new instance of the mutable default value for each instance of the state class.</p> <pre><code>from dataclasses import field\n\n@me.stateclass\nclass State:\n  a: list[str] = field(default_factory=lambda: [\"abc\"])\n</code></pre> Good: no default value <p>If you want a default of an empty list, you can just not define a default value and Mesop will automatically define an empty list default value.</p> <p>For example, if you write the following:</p> <pre><code>@me.stateclass\nclass State:\n  a: list[str]\n</code></pre> <p>It's the equivalent of:</p> <pre><code>@me.stateclass\nclass State:\n  a: list[str] = field(default_factory=list)\n</code></pre>"},{"location":"guides/state-management/#how-state-works","title":"How State Works","text":"<p><code>me.stateclass</code> is a class decorator which tells Mesop that this class can be retrieved using the <code>me.state</code> method, which will return the state instance for the current user session.</p> <p>If you are familiar with the dependency injection pattern, Mesop's stateclass and state API is essentially a minimalist dependency injection system which scopes the state object to the lifetime of a user session.</p> <p>Under the hood, Mesop is sending the state back and forth between the server and browser client so everything in a state class must be serializable.</p>"},{"location":"guides/state-management/#multiple-state-classes","title":"Multiple state classes","text":"<p>You can use multiple classes to store state for the current user session.</p> <p>Using different state classes for different pages or components can help make your app easier to maintain and more modular.</p> <pre><code>@me.stateclass\nclass PageAState:\n    ...\n\n@me.stateclass\nclass PageBState:\n    ...\n\n@me.page(path=\"/a\")\ndef page_a():\n    state = me.state(PageAState)\n    ...\n\n@me.page(path=\"/b\")\ndef page_b():\n    state = me.state(PageBState)\n    ...\n</code></pre> <p>Under the hood, Mesop is managing state classes based on the identity (e.g. module name and class name) of the state class, which means that you could have two state classes named \"State\", but if they are in different modules, then they will be treated as separate state, which is what you would expect.</p>"},{"location":"guides/state-management/#nested-state","title":"Nested State","text":"<p>You can also have classes inside of a state class as long as everything is serializable:</p> <pre><code>class NestedState:\n  val: str\n\n@me.stateclass\nclass State:\n  nested: NestedState\n\ndef app():\n  state = me.state(State)\n</code></pre> <p>Note: you only need to decorate the top-level state class with <code>@me.stateclass</code>. All the nested state classes will automatically be wrapped.</p>"},{"location":"guides/state-management/#nested-state-and-dataclass","title":"Nested State and dataclass","text":"<p>Sometimes, you may want to explicitly decorate the nested state class with <code>dataclass</code> because in the previous example, you couldn't directly instantiate <code>NestedState</code>.</p> <p>If you wanted to use NestedState as a general dataclass, you can do the following:</p> <pre><code>@dataclass\nclass NestedState:\n  val: str = \"\"\n\n@me.stateclass\nclass State:\n  nested: NestedState\n\ndef app():\n  state = me.state(State)\n</code></pre> <p>Reminder: because dataclasses do not have default values, you will need to explicitly set default values, otherwise Mesop will not be able to instantiate an empty version of the class.</p> <p>Now, if you have an event handler function, you can do the following:</p> <pre><code>def on_click(e):\n    response = call_api()\n    state = me.state(State)\n    state.nested = NestedState(val=response.text)\n</code></pre> <p>If you didn't explicitly annotate NestedState as a dataclass, then you would get an error instantiating NestedState because there's no initializer defined.</p>"},{"location":"guides/state-management/#tips","title":"Tips","text":""},{"location":"guides/state-management/#state-performance-issues","title":"State performance issues","text":"<p>Take a look at the performance guide to learn how to identify and fix State-related performance issues.</p>"},{"location":"guides/state-management/#next-steps","title":"Next steps","text":"<p>Event handlers complement state management by providing a way to update your state in response to user interactions.</p> <p>     Event handlers </p>"},{"location":"guides/static-assets/","title":"Static Assets","text":"<p>Mesop allows you to specify a folder for storing static assets that will be served by the Mesop server.</p> <p>This feature provides a simple way to serving images, favicons, CSS stylesheets, and other files without having to rely on CDNs, external servers, or mounting Mesop onto FastAPI/Flask.</p>"},{"location":"guides/static-assets/#enable-a-static-folder","title":"Enable a static folder","text":"<p>This feature can be enabled using environment variables.</p> <ul> <li>MESOP_STATIC_FOLDER</li> <li>MESOP_STATIC_URL_PATH</li> </ul> <p>Full descriptions of these two settings can be found on the config page.</p>"},{"location":"guides/static-assets/#enabling-a-static-folder-named-assets","title":"Enabling a static folder named \"assets\"","text":"<p>This will make the files in the <code>assets</code> directory accessible from the Mesop server at <code>/static</code>.</p> <p>Mesop will look for the <code>assets</code> directory relative to your current working directory. In this case, <code>/some/path/mesop-app/assets</code>.</p> <pre><code>cd /some/path/mesop-app\nMESOP_STATIC_FOLDER=assets mesop main.py\n</code></pre> <p>Here is another example:</p> <p>Mesop will look for the <code>assets</code> directory relative to your current working directory. In this case, <code>/some/path/assets</code>.</p> <pre><code>cd /some/path\nMESOP_STATIC_FOLDER=assets mesop mesop-app/main.py\n</code></pre>"},{"location":"guides/static-assets/#enabling-a-static-folder-named-assets-and-url-path-of-assets","title":"Enabling a static folder named \"assets\" and URL path of /assets","text":"<p>This will make the files in the <code>assets</code> directory accessible from the Mesop server at <code>/assets</code>. For example: <code>https://example.com/assets</code>.</p> <pre><code>MESOP_STATIC_FOLDER=assets MESOP_STATIC_URL_PATH=/assets mesop main.py\n</code></pre>"},{"location":"guides/static-assets/#using-a-env-file","title":"Using a .env file","text":"<p>You can also specify the environment variables in a <code>.env</code> file. This file should be placed in the same directory as the <code>main.py</code> file.</p> .env<pre><code>MESOP_STATIC_FOLDER=assets\nMESOP_STATIC_URL_PATH=/assets\n</code></pre> <p>Then you can run the Mesop command like this:</p> <pre><code>mesop main.py\n</code></pre>"},{"location":"guides/static-assets/#example-use-cases","title":"Example use cases","text":"<p>Here are a couple examples that use the static assets feature.</p>"},{"location":"guides/static-assets/#add-a-logo","title":"Add a logo","text":"<p>This example shows you how to load an image to use as a logo for your app.</p> <p>Let's assume you have a directory like this:</p> <ul> <li>static/logo.png</li> <li>main.py</li> <li>requirements.txt</li> </ul> <p>Then you can reference your logo in your Mesop app like this:</p> main.py<pre><code>import mesop as me\n\n@me.page()\ndef foo():\n  me.image(src=\"/static/logo.png\")\n</code></pre>"},{"location":"guides/static-assets/#use-a-custom-favicon","title":"Use a custom favicon","text":"<p>This example shows you how to use a custom favicon in your Mesop app.</p> <p>Let's assume you have a directory like this:</p> <ul> <li>static/favicon.ico</li> <li>main.py</li> <li>requirements.txt</li> </ul> <p>If you have a static folder enabled, Mesop will look for a <code>favicon.ico</code> file in your static folder. If the file exists, Mesop will use your custom favicon instead of the default Mesop favicon.</p>"},{"location":"guides/static-assets/#load-a-tailwind-stylesheet","title":"Load a Tailwind stylesheet","text":"<p>This example shows you how to use Tailwind CSS with Mesop.</p> <p>Let's assume you have a directory like this:</p> <ul> <li>static/tailwind.css</li> <li>tailwind_input.css</li> <li>tailwind.config.js</li> <li>main.py</li> <li>requirements.txt</li> </ul> <p>You can import the CSS into your page using the <code>stylesheets</code> parameter on <code>@me.page</code>.</p> main.py<pre><code>import mesop as me\n\n@me.page(stylesheets=[\"/static/tailwind.css\"])\ndef foo():\n  with me.box(classes=\"bg-gray-800\"):\n    me.text(\"Mesop with Tailwind CSS.\")\n</code></pre> <p>Tailwind is able to extract the CSS properties from your Mesop main.py file. This does not work for all cases. If you are dynamically generating CSS properties using string concatenation/formatting, then Tailwind may not be able to determine which properties to include. In that case, you may need to manually add these classes to the safelist.</p> tailwind.config.js<pre><code>/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"main.py\"],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n  safelist: [],\n};\n</code></pre> <p>This is just the base Tailwind input file.</p> tailwind_input.css<pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre> <p>The command to generate the output Tailwind CSS is:</p> <pre><code># This assumes you have the tailwindcss CLI installed. If not, see\n# https://tailwindcss.com/docs/installation\nnpx tailwindcss -i ./tailwind_input.css -o ./static/tailwind.css\n</code></pre>"},{"location":"guides/testing/","title":"Testing","text":"<p>This guide covers the recommended approach for testing Mesop applications using Playwright, a popular browser automation and testing framework.</p> <p>However, you can use any other testing framework and there's no official testing framework for Mesop.</p>"},{"location":"guides/testing/#testing-philosophy","title":"Testing Philosophy","text":"<p>Because Mesop is a full-stack UI framework we recommend doing integration tests to cover critical app functionality. We also recommend separating core business logic into separate Python modules, which do not depend on Mesop. This way you can easily unit test your business logic as well as reuse the business logic as part of scripts or other binaries besides Mesop.</p>"},{"location":"guides/testing/#playwright-example","title":"Playwright Example","text":"<p>We will walk through mesop-playwright-testing repo which contains a simple Mesop counter app and a Playwright test written in TypeScript (node.js). Although Playwright has a Python flavor, we recommend using the Playwright node.js flavor because it has better testing support. Even if you're not familiar with JavaScript or TypeScript, it's extremely easy to write Playwright tests because you can generate your tests by clicking through the UI.</p> <p>The testing example repo's README.md contains instructions for setting up your environment and running the tests.</p>"},{"location":"guides/testing/#playwright-config","title":"Playwright config","text":"<p>The playwright configuration used is similar to the default one, however we change a few configurations specific for Mesop.</p> <p>For example, in <code>playwright.config.ts</code>, we configure Mesop as the local dev server:</p> <pre><code>  webServer: {\n    command: \"mesop app.py\",\n    url: \"http://127.0.0.1:32123\",\n    reuseExistingServer: !process.env.CI,\n  },\n</code></pre> <p>This will launch the Mesop app server at the start of the tests.</p> <p>We also added the following configurations to make writing and debugging tests easier:</p> <pre><code>  use: {\n    /* Base URL to use in actions like `await page.goto('/')`. */\n    baseURL: \"http://127.0.0.1:32123\",\n\n    /* See https://playwright.dev/docs/trace-viewer */\n    trace: \"retain-on-failure\",\n\n    // Capture screenshot after each test failure.\n    screenshot: \"on\",\n\n    // Retain video on test failure.\n    video: \"retain-on-failure\",\n  },\n</code></pre>"},{"location":"guides/testing/#running-and-debugging-a-test","title":"Running and debugging a test","text":"<p>Try changing the test so that it fails. For example, in <code>app.spec.ts</code> change <code>\"Count=1\"</code> to <code>\"Count=2\"</code> and then run the tests: <code>npx playwright test</code>.</p> <p>The test will fail (as expected) and a new browser page should be opened with the test failure information. You can click on the failing test and view the screenshot, video and trace. This is very helpful in figuring out why a test failed.</p>"},{"location":"guides/testing/#writing-a-test","title":"Writing a test","text":"<p>As mentioned above, it's very easy to write Playwright tests because you can generate your tests by clicking through the UI. Even if you're not familiar with JavaScript/TypeScript, you will be able to generate most of the test code by clicking through the UI and copying the generated test code.</p> Use the Playwright VS Code extension <p>You can use the Playwright VS Code extension to directly generate test code in your file. You can also run and debug tests from VS Code as well.</p>"},{"location":"guides/testing/#learn-more","title":"Learn more","text":"<p>We recommend reading Playwright's docs which are easy to follow and contain much more information on writing browser tests.</p> <p>You can also look at Mesop's own tests written with Playwright.</p>"},{"location":"guides/theming/","title":"Theming","text":"<p>Mesop has early-stage support for theming so you can support light theme and dark theme in a Mesop application.</p>"},{"location":"guides/theming/#dark-theming","title":"Dark Theming","text":"<p>For an actual example of using Mesop's theming API to support light theme and dark theme, we will look at the labs chat component which itself is written all in Python built on top of lower-level Mesop components.</p>"},{"location":"guides/theming/#theme-toggle-button","title":"Theme toggle button","text":"<p>Inside the chat component, we've defined an icon button to toggle the theme so users can switch between light and dark theme:</p> <pre><code>def toggle_theme(e: me.ClickEvent):\n    if me.theme_brightness() == \"light\":\n      me.set_theme_mode(\"dark\")\n    else:\n      me.set_theme_mode(\"light\")\n\nwith me.content_button(\n    type=\"icon\",\n    style=me.Style(position=\"absolute\", right=0),\n    on_click=toggle_theme,\n):\n    me.icon(\"light_mode\" if me.theme_brightness() == \"dark\" else \"dark_mode\")\n</code></pre>"},{"location":"guides/theming/#using-theme-colors","title":"Using theme colors","text":"<p>You could define custom style logic to explicitly set the color based on the theme:</p> <pre><code>def container():\n  me.box(\n    style=me.Style(\n      background=\"white\" if me.theme_brightness() == \"light\" else \"black\"\n    )\n  )\n</code></pre> <p>But this would be pretty tedious, so you can use theme variables like this:</p> <pre><code>def container():\n  me.box(style=me.Style(background=me.theme_var(\"background\")))\n</code></pre> <p>This will use the appropriate background color for light theme and dark theme.</p>"},{"location":"guides/theming/#default-theme-mode","title":"Default theme mode","text":"<p>Finally, we want to use the default theme mode to \"system\" which means we will use the user's preferences for whether they want dark theme or light theme. For many users, their operating systems will automatically switch to dark theme during night time.</p> <p>Note: Mesop currently defaults to light theme mode but will eventually default to system theme mode in the future.</p> <p>On our demo page with the chat component, we have a page on_load event handler defined like this:</p> <pre><code>def on_load(e: me.LoadEvent):\n  me.set_theme_mode(\"system\")\n</code></pre>"},{"location":"guides/theming/#theme-density","title":"Theme Density","text":"<p>You can set the visual density of the Material components. By default, Mesop uses the least visually dense setting, i.e.</p> <pre><code>me.set_theme_density(0) # 0 is the least dense\n</code></pre> <p>You can configure the density as an integer from 0 (least dense) to -4 (most dense). For example, if you want a medium-dense UI, you can do the following:</p> <pre><code>def on_load(e: me.LoadEvent):\n  me.set_theme_density(-2) # -2 is more dense than the default\n\n\n@me.page(on_load=on_load)\ndef page():\n  ...\n</code></pre>"},{"location":"guides/theming/#api","title":"API","text":""},{"location":"guides/theming/#mesop.features.theme.set_theme_density","title":"<code>set_theme_density</code>","text":"<p>Sets the theme density for the Material components in the application. A higher density (more negative value) results in a more compact UI layout.</p> PARAMETER DESCRIPTION <code>density</code> <p>The desired theme density. It can be 0 (least dense),                     -1, -2, -3, or -4 (most dense).</p> <p> TYPE: <code>Literal[0, -1, -2, -3, -4]</code> </p>"},{"location":"guides/theming/#mesop.features.theme.set_theme_mode","title":"<code>set_theme_mode</code>","text":"<p>Sets the theme mode for the application.</p> PARAMETER DESCRIPTION <code>theme_mode</code> <p>The desired theme mode. It can be \"system\", \"light\", or \"dark\".</p> <p> TYPE: <code>ThemeMode</code> </p>"},{"location":"guides/theming/#mesop.features.theme.theme_brightness","title":"<code>theme_brightness</code>","text":"<p>Returns the current theme brightness.</p> <p>This function checks the current theme being used by the application and returns whether it is \"light\" or \"dark\".</p>"},{"location":"guides/theming/#mesop.features.theme.theme_var","title":"<code>theme_var</code>","text":"<p>Returns the CSS variable for a given theme variable.</p> PARAMETER DESCRIPTION <code>var</code> <p>The theme variable name. See the Material Design docs for more information about the colors available.</p> <p> TYPE: <code>ThemeVar</code> </p>"},{"location":"guides/theming/#mesop.features.theme.ThemeVar","title":"<code>ThemeVar = Literal['background', 'error', 'error-container', 'inverse-on-surface', 'inverse-primary', 'inverse-surface', 'on-background', 'on-error', 'on-error-container', 'on-primary', 'on-primary-container', 'on-primary-fixed', 'on-primary-fixed-variant', 'on-secondary', 'on-secondary-container', 'on-secondary-fixed', 'on-secondary-fixed-variant', 'on-surface', 'on-surface-variant', 'on-tertiary', 'on-tertiary-container', 'on-tertiary-fixed', 'on-tertiary-fixed-variant', 'outline', 'outline-variant', 'primary', 'primary-container', 'primary-fixed', 'primary-fixed-dim', 'scrim', 'secondary', 'secondary-container', 'secondary-fixed', 'secondary-fixed-dim', 'shadow', 'surface', 'surface-bright', 'surface-container', 'surface-container-high', 'surface-container-highest', 'surface-container-low', 'surface-container-lowest', 'surface-dim', 'surface-tint', 'surface-variant', 'tertiary', 'tertiary-container', 'tertiary-fixed', 'tertiary-fixed-dim']</code>  <code>module-attribute</code>","text":""},{"location":"guides/web-security/","title":"Web Security","text":""},{"location":"guides/web-security/#static-file-serving","title":"Static file serving","text":"<p>Mesop allows serving JS and CSS files located within the Mesop app's file subtree to support web components.</p> <p>Security Warning: Do not place any sensitive or confidential JS and CSS files in your Mesop project directory. These files may be inadvertently exposed and served by the Mesop web server, potentially compromising your application's security.</p>"},{"location":"guides/web-security/#javascript-security","title":"JavaScript Security","text":"<p>At a high-level, Mesop is built on top of Angular which provides built-in security protections and Mesop configures a strict Content Security Policy.</p> <p>Specifics:</p> <ul> <li>Mesop APIs do not allow arbitrary JavaScript execution in the main execution context. For example, the markdown component sanitizes the markdown content and removes active HTML content like JavaScript.</li> <li>Mesop's default Content Security Policy prevents arbitrary JavaScript code from executing on the page unless it passes Angular's Trusted Types polices.</li> </ul>"},{"location":"guides/web-security/#iframe-security","title":"Iframe Security","text":"<p>To prevent clickjacking, Mesop apps, when running in prod mode (the default mode used when deployed), do not allow sites from any other origins to iframe the Mesop app.</p> <p>Note: pages from the same origin as the Mesop app can always iframe the Mesop app.</p> <p>If you want to allow a trusted site to iframe your Mesop app, you can explicitly allow list the sources which can iframe your app by configuring the security policy for a particular page.</p>"},{"location":"guides/web-security/#example","title":"Example","text":"<pre><code>import mesop as me\n\n\n@me.page(\n  path=\"/allows_iframed\",\n  security_policy=me.SecurityPolicy(\n    allowed_iframe_parents=[\"https://google.com\"],\n  ),\n)\ndef app():\n  me.text(\"Test CSP\")\n</code></pre> <p>You can also use wildcards to allow-list multiple subdomains from the same site, such as: <code>https://*.example.com</code>.</p>"},{"location":"guides/web-security/#cross-origin-opener-policy","title":"Cross Origin Opener Policy","text":"<p>Mesop sets this value to <code>unsafe-none</code>, which is the default value. It is recommended to set this to <code>same-origin</code> to ensure process isolation from random domains. In most cases, your Mesop app should run without any issues.</p> <p>For more information, see MDN and XS Leaks Wiki.</p>"},{"location":"guides/web-security/#api","title":"API","text":"<p>You can configure the security policy at the page level. See SecurityPolicy on the Page API docs.</p>"},{"location":"internal/architecture/","title":"Architecture","text":"<p>This doc is meant to provide an overview of how Mesop is structured as a framework. It's not necessary to know this information as a developer using Mesop, but if you're developing Mesop's codebase, then this is helpful in laying out the lay of the land.</p> <p>At the heart of Mesop is two subsystems:</p> <ul> <li>A Python server, running on top of Flask.</li> <li>A Web client, built on Angular framework, which wraps various Angular components, particularly Angular Material components.</li> </ul>"},{"location":"internal/architecture/#terminology","title":"Terminology","text":"<ul> <li>Downstream - This refers to the synced version of Mesop inside of Google (\"google3 third-party\"). Although almost all the code is shared between the open-source and internal version of Mesop, there's many considerations in maintaining parity between these two versions, particularly with regards to toolchain.</li> <li>Component vs component instance - A component typically refers to the Python factory function that creates a component instance (e.g. <code>me.box()</code>). A component instance refers to a specific component created by a component function and is represented as a <code>Component</code> proto. Other UI frameworks oftentimes give a different name for an instance (i.e. Element) of a component, but for simplicity and explicitness, I will refer to these instances as component instance or component tree (for the entire tree of component instances) in this doc.</li> </ul>"},{"location":"internal/architecture/#life-of-a-mesop-request","title":"Life of a Mesop request","text":""},{"location":"internal/architecture/#initial-page-load","title":"Initial page load","text":"<p>When a user visits a Mesop application, the following happens:</p> <ol> <li>The user visits a path on the Mesop application, e.g. \"/\" (root path), in their browser.</li> <li>The Mesop client-side web application (Angular) is bootstrapped and sends an <code>InitRequest</code> to the server.</li> <li>The Mesop server responds with a <code>RenderEvent</code> which contains a fully instantiated component tree.</li> <li>The Mesop client renders the component tree. Every Mesop component instance corresponds to 1 or more Angular component instance.</li> </ol>"},{"location":"internal/architecture/#user-interactions","title":"User interactions","text":"<p>If the user interacts with the Mesop application (e.g. click a button), the following happens:</p> <ol> <li>The user triggers a <code>UserEvent</code> which is sent to the server. The UserEvent includes: the application state (represented by the <code>States</code> proto), the event handler id to trigger, the key of the component interacted with (if any), and the payload value (e.g. for checkbox, it's a bool value which represents the checked state of the checkbox).</li> <li>The server does the following:<ol> <li>Runs a first render loop in tracing mode (i.e. instantiate the component tree from the root component of the requested path). This discovers any event handler functions. In the future, this trace can also be used to calculate the before component tree so we can calculate the diff of the component tree to minimize the network payload.</li> <li>Updates the state by feeding the user event to the event handler function discovered in the previous step. <p>Note: there's a mapping layer between the UserEvent proto and the granular Python event type. This provides a nicer API for Mesop developers then the internal proto representation.</p> </li> <li>Runs a second render loop to generate the new component tree given the new state. After the first render loop, each render loop results in a RenderEvent sent to the client.</li> <li>In the streaming case, we may run the render loop and flush it down via Server-Sent Events many times.</li> </ol> </li> <li>The client re-renders the Angular application after receiving each RenderEvent.</li> </ol>"},{"location":"internal/architecture/#python-server","title":"Python Server","text":"<p>Flask is a minimalist Python server framework that conforms to WSGI (Web Server Gateway Interface), which is a Python standard that makes it easy for web servers (oftentimes written in other languages like C++) to delegate requests to a Python web framework. This is particularly important in the downstream case because we rely on an internal HTTP server to serve Mesop applications.</p> <p>For development purposes (i.e. using the CLI), we use Werkzeug, which is a WSGI library included with Flask.</p>"},{"location":"internal/architecture/#web-client","title":"Web Client","text":"<p>Mesop's Web client consists of three main parts:</p> <ul> <li>Core: Includes the root Angular component and singleton services like <code>Channel</code>. This part is fairly small and is the critical glue between the rest of the client layer and the server.</li> <li>Mesop Components: Every Mesop component has its own directory under <code>/components</code> <p>Note: this includes both the Python API and the Angular implementation for developer convenience.</p> </li> <li>Dev Tools: Mesop also comes with a basic set of developer tools, namely the components and log panels. The components panel allows Mesop developers to visualize the component tree. The log panel allows Mesop developers to inspect the application state and component tree values.</li> </ul>"},{"location":"internal/architecture/#static-assets","title":"Static assets","text":"<ul> <li>Using the regular CLI, the web client static assets (i.e. JS binary, CSS, images) are served from the Python server. This simplifies deployment of Mesop applications by reducing version skew issues between the client and server.</li> <li>In uncompiled mode (using the dev CLI), the web client is served from the web devserver. This is convenient because it builds faster than the regular/compiled mode and it allows live-reloading when developing the client codebase.</li> </ul>"},{"location":"internal/architecture/#tooling","title":"Tooling","text":"<p>Outside of the <code>mesop/</code> directory are various tools used to build, test and document the Mesop framework. However, anything needed to actually run a Mesop application should be located within <code>mesop/</code>. The three main tools inside the codebase are:</p> <ul> <li>Build tooling - these are in <code>build_defs/</code> which contains various Bazel <code>bzl</code> files and <code>tools</code> which is forked from the Angular codebase. The build toolchain is described in more detail on the toolchain doc.</li> <li>Component generator - inside <code>generator/</code> is a mini-library and CLI tool to generate Mesop components from existing Angular components, specifically Angular Material, although with some modifications it could support more generic Angular components. The generator modifies the codebase so that nothing in <code>generator/</code> is actually needed when running a Mesop applications.</li> <li>Docs - Mesop's doc site is built using Material for Mkdocs and is what you are looking at right now.</li> </ul>"},{"location":"internal/ci/","title":"CI","text":"<p>We use GitHub actions. For all third-party GitHub actions, we must pin it to a specific hash to comply with internal policies.</p>"},{"location":"internal/codespaces/","title":"Development on Github Codespaces","text":"<p>Github Codespaces is a quick way to get started with internal Mesop development. All you need to do is a click a button and a fully configured workspace will be created for you. No need to spend time debugging installation issues.</p> <p>Github Free and Pro plans also provide a free tier, so Codespaces is useful for writing and testing quick patches.</p> <p>If using the free tier, the Codespace setup takes 20-30 minutes due to the limited CPU available.</p>"},{"location":"internal/codespaces/#create-github-codespace","title":"Create Github Codespace","text":"<p>You can create a Github Codespace from the Mesop Github repository page.</p> <p></p>"},{"location":"internal/codespaces/#wait-for-postcreatecommand-to-run","title":"Wait for postCreateCommand to run","text":"<p>The Codespace will not be usable until the <code>postCreateCommand</code> has completed. You can view the CLI output by pressing <code>Cmd/Ctrl + Shift + P</code> and then finding the <code>View Creation Log</code> option.</p> <p></p>"},{"location":"internal/codespaces/#set-the-python-environment-for-the-codespace","title":"Set the Python environment for the Codespace","text":"<p>During the <code>postCreateCommand</code> step, you'll see a pop up asking if you want to set a new environment for the Codespace. Select <code>Yes</code> here to use the virtual env that is created as part of the <code>postCreateCommand</code> set up.</p> <p></p>"},{"location":"internal/codespaces/#run-mesop-for-development","title":"Run Mesop for development","text":"<p>Once the <code>postCreateCommand</code> has finished, you can now start Mesop in the terminal.</p> <pre><code>./scripts/cli.sh\n</code></pre> <p>This step takes some time for the first run.</p> <p>You will see some warning messages, but it is OK to ignore them. You can also ignore the message shown in the screenshot.</p> <p></p>"},{"location":"internal/codespaces/#view-mesop-demos","title":"View Mesop demos","text":"<p>Once <code>./scripts/cli.sh</code> has started the Mesop dev server, you can view the demos from the <code>PORTS</code> tab.</p> <p></p>"},{"location":"internal/contributing/","title":"How-to Contribute","text":"<p>Thanks for looking into contributing to Mesop. There's many ways to contribute to Mesop:</p> <ul> <li>Filing new issues and providing feedback on existing issues</li> <li>Improving our docs</li> <li>Contributing examples</li> <li>Contributing code</li> </ul> <p>All types of contributions are welcome and are a key piece to making Mesop work well as a project.</p>"},{"location":"internal/contributing/#before-you-begin","title":"Before you begin","text":""},{"location":"internal/contributing/#sign-our-contributor-license-agreement","title":"Sign our Contributor License Agreement","text":"<p>Contributions to this project must be accompanied by a Contributor License Agreement (CLA). You (or your employer) retain the copyright to your contribution; this simply gives us permission to use and redistribute your contributions as part of the project.</p> <p>If you or your current employer have already signed the Google CLA (even if it was for a different project), you probably don't need to do it again.</p> <p>Visit https://cla.developers.google.com/ to see your current agreements or to sign a new one.</p>"},{"location":"internal/contributing/#review-our-community-guidelines","title":"Review our community guidelines","text":"<p>This project follows Google's Open Source Community Guidelines.</p>"},{"location":"internal/contributing/#contributing-to-docs","title":"Contributing to docs","text":"<p>If you want to contribute to our docs, please take a look at our docs issues. If you find any of our existing docs confusing or missing key information, please file an issue and we will see how we can improve things. We regularly spend time improving our docs because we know it's a key part of the developer experience.</p>"},{"location":"internal/contributing/#contributing-examples","title":"Contributing examples","text":"<p>One of the best way of helping the Mesop project is to share what you've built! You can either add an example to our demo gallery by adding it to the demo/ directory or you can send us a link to your app running and we will include it in our docs.</p>"},{"location":"internal/contributing/#contributing-code","title":"Contributing code","text":"<p>If you'd like to contribute code, I recommend taking a look at one of our existing \"starter\" issues. These are issues that are good for first-time contributors as they are well-specified.</p> <ul> <li>Setup your dev environment</li> <li>If you're creating a new component, you can follow the new component guide</li> </ul> <p>I recommend reading through the various pages in the contributing section as it will give you a sense of our project's goals.</p> <p>One thing that we focus on is providing an easy-to-understand API with minimal breaking changes so we ask that any API changes are first discussed in an issue. This will help prevent wasted work because we are conservative with changing our APIs.</p>"},{"location":"internal/development/","title":"Development","text":"<p>I recommend following (or at least reading) all the steps in this doc if you plan on actively developing Mesop.</p>"},{"location":"internal/development/#setup","title":"Setup","text":""},{"location":"internal/development/#bazelibazel","title":"Bazel/ibazel","text":"<p>We use Bazel as our build system. Use bazelisk which ensures the right version of Bazel is used for this project.</p> <p>If ibazel breaks, but bazel works, try following these steps</p> <p>TIP: If your build mysteriously fails due to an npm-related error, try running <code>bazel clean --expunge &amp;&amp; rm -rf node_modules</code>. Bazel and Yarn have a cache bug when upgrading npm modules.</p>"},{"location":"internal/development/#uv","title":"uv","text":"<p>We use uv. Follow the instructions here to install uv.</p>"},{"location":"internal/development/#commit-hooks","title":"Commit hooks","text":"<ol> <li>Install pre-commit</li> <li>Install pre-commit hooks for this repo: <code>pre-commit install</code></li> </ol>"},{"location":"internal/development/#run-local-development","title":"Run local development","text":"<p>We recommend using this for most Mesop framework development.</p> <pre><code>./scripts/cli.sh\n</code></pre> <p>NOTE: this automatically serves the angular app.</p>"},{"location":"internal/development/#python","title":"Python","text":""},{"location":"internal/development/#third-party-packages-pip","title":"Third-party packages (PIP)","text":"<p>If you update <code>//build_defs/requirements.txt</code>, run:</p> <pre><code>bazel run //build_defs:pip_requirements.update\n</code></pre>"},{"location":"internal/development/#venv","title":"venv","text":"<p>To support IDE type-checking (Pylance) in VS Code, we use Aspect's rules_py which generates a venv target.</p> <pre><code>bazel run //mesop/cli:cli.venv\n</code></pre> <p>Then, you can activate the venv:</p> <pre><code>source .cli.venv/bin/activate\n</code></pre> <p>You will need to setup a symlink to have Python IDE support for protos:</p> <pre><code>./scripts/setup_proto_py_modules.sh\n</code></pre> <p>Check that you're using venv's python:</p> <pre><code>which python\n</code></pre> <p>Copy the python interpreter path and paste it into VS Code.</p> <p>Finally, install third-party dependencies.</p> <pre><code>pip install -r build_defs/requirements_lock.txt\n</code></pre> <p>NOTE: You may need to run the command with <code>sudo</code> if you get a permission denied error, particularly with \"_distutils_hack\".</p>"},{"location":"internal/development/#commit-hooks_1","title":"Commit hooks","text":"<p>We use pre-commit to automatically format, lint code before committing.</p> <p>Setup:</p> <ol> <li>Install pre-commit.</li> <li>Setup git hook: <code>pre-commit install</code></li> </ol>"},{"location":"internal/development/#docs","title":"Docs","text":"<p>We use Mkdocs Material to generate our docs site.</p> <ol> <li>Activate venv</li> <li><code>mkdocs serve</code></li> </ol>"},{"location":"internal/hot-reload/","title":"Hot Reload","text":"<p>One of Mesop's key benefits is that it provides a fast iteration cycle through hot reload. This means whenever a Mesop developer changes their Mesop app code, their browser window will automaticall reload and execute the new app code while preserving the existing state. This isn't guaranteed to work, for example, if the State class is modified in an incompatible way, but it should work for &gt;90% of the build-edit loops (e.g. tweaking the UI, calling new components).</p>"},{"location":"internal/hot-reload/#how-it-works","title":"How it works","text":"<p>See: https://github.com/mesop-dev/mesop/pull/211</p>"},{"location":"internal/hot-reload/#design-decisions","title":"Design decisions","text":""},{"location":"internal/hot-reload/#what-to-reload","title":"What to reload","text":"<p>Right now we reload all the modules loaded by the Mesop application. However, this results in a lot of unnecessary modules being reloaded and can be quite slow if there's a heavy set of transitive dependencies.</p> <p>Instead, I'm thinking we can use a heuristic where we calculate the existing package based on the file path passed in and only reload modules which are in the current package or a sub-package. Effectively this is only reloading modules within the target file's subtree.</p> <p>This seems like a pretty reasonable heuristic where it reloads all the application modules without reloading the entire dependency graph. Previously I tried reloading only the module passed in via <code>--path</code>, however this was too limiting as it meant shared code (e.g. a navmenu) would not get hot-reloaded.</p>"},{"location":"internal/hot-reload/#when-to-reload","title":"When to reload","text":"<p>With the previous design decision, re-executing a module should be much faster, but we still need to guard against the case where the live reload occurs too quickly in the client side. Options:</p> <ul> <li>Wait a fixed timeout - A simple heuristic could just be to wait 500ms since in theory, all the application code (with the non-application dependnecies cached) should re-execute fairly quickly.</li> <li>Client retry/reload - Another approach could be to retry a client-side reload N times (e.g. 3) if we get an error. The pattern could be: 1. save state to local storage, 2. trigger reload, 3. if reload results in a successful render, we clear the state OR if reload results in an error, we trigger a reload (and persist in local storage which retry attempt this is).</li> <li>Server loop - In the common error case where the server is still re-executing the module and the client reloads, it will hit path not found because the path hasn't been registered yet. One way of mitigating this is to simply do a sleep in debug mode. We can even do an exponential backoff for the sleep (e.g. wait 300ms, 900ms, 2700ms).</li> <li>Preferred appproach - given the trade-offs, I think Server loop is the best option as it's relatively simple to implement, robust and doesn't incur a significant delay in the happy case.</li> </ul>"},{"location":"internal/hot-reload/#abstracting-ibazel-specific-details","title":"Abstracting ibazel-specific details","text":"<p>Since Google's internal equivalent of ibazel doesn't work exactly the same, we should treat HotReloadService as an abstract base class and then extend it for Ibazel (and the internal variant).</p>"},{"location":"internal/modes/","title":"Modes","text":"<p>There are two modes that you can run Mesop in.</p>"},{"location":"internal/modes/#development-mode-aka-debug-mode-or-editor-mode","title":"Development mode (aka debug mode or editor mode)","text":"<p>Recommended for developers using Mesop when they are developing the apps locally. This provides good error messages and hot reloading.</p> <ul> <li>How to run: <code>ibazel run //mesop/cli -- --path=mesop/mesop/example_index.py</code></li> <li>Angular should run in dev mode.</li> <li>Developer Tools and Visual Editor are available.</li> </ul>"},{"location":"internal/modes/#prod-mode","title":"Prod mode","text":"<p>Recommended when developers deploy applications built with Mesop for public serving. This is optimized for performance and provides less-detailed error messages.</p> <ul> <li>Developer tools aren't available.</li> <li>Angular doesn't run in dev mode.</li> <li>How to run: <code>bazel run //mesop/cli -- --path=mesop/mesop/example_index.py --prod</code></li> </ul>"},{"location":"internal/new-component/","title":"New Component","text":""},{"location":"internal/new-component/#how-to","title":"How-to","text":"<pre><code>python scripts/scaffold_component.py $component_name\n</code></pre>"},{"location":"internal/new-component/#api-guidelines","title":"API Guidelines","text":"<ul> <li>Make all arguments keyword only by putting <code>*</code> as the initial argument. Keyword argument is more readable, particularly for UI components which will have increasingly more optional arguments over time.</li> <li>Model after existing APIs. For example, if we are wrapping an existing @angular/material component, we will try to mirror their API (within reason). If we are wrapping a native HTML element, we should try to expose a similar API. In some cases, we will look at other UI frameworks like Flutter for inspiration, even though we are not directly wrapping them.</li> <li>Prefer small components. We should try to provide small native components that can be composed by content components in Python. This enables a wider range of use cases.</li> </ul>"},{"location":"internal/new-component/#new-events","title":"New events","text":"<p>Try to reuse the existing events when possible, but you may need to sometimes create a new event.</p> <ol> <li>Define the event class in <code>//mesop/events/{event_name}.py</code></li> <li>In the same file, define an event mapper and register it: <code>runtime().register_event(EventClass, event_mapper)</code></li> </ol>"},{"location":"internal/new-component/#potential-exploration-areas","title":"Potential exploration areas","text":"<ul> <li>Code-gen <code>component_renderer</code> using a shell/Python script. Initially, just run the script as-needed, but eventually can run it as part of a BUILD rule (a la @angular/components examples)</li> </ul>"},{"location":"internal/publishing/","title":"Publishing","text":"<p>Follow these instructions for releasing a new version of Mesop publicly via PyPI (e.g. <code>pip install mesop</code>).</p>"},{"location":"internal/publishing/#check-main-branch","title":"Check main branch","text":"<p>Before, cutting a release, you'll want to check two things:</p> <ol> <li>The <code>main</code> branch should be healthy (e.g. latest commit is green).</li> <li> <p>Check the snyk dashboard to review security issues:</p> <ul> <li>It only runs weekly so you need to click \"Retest now\". If there's any High security issues for a core Mesop file (e.g. anything in <code>mesop/*</code>), then you should address it before publishing a release.</li> </ul> </li> </ol>"},{"location":"internal/publishing/#update-version-to-rc","title":"Update version to RC","text":"<p>Update <code>mesop/version.py</code> by incrementing the version number. We follow semver.</p> <p>You want to first create an RC (release candidate) to ensure that it works.</p> <p>For example, if the current version is: <code>0.7.0</code>, then you should increment the version to <code>0.8.0rc1</code> which will create an RC, which is treated as a pre-release by PyPI.</p> <p>Merge the PR that bumps the version and then go to the next step to publish a GitHub release which will in turn publish to PyPI.</p>"},{"location":"internal/publishing/#publish-github-release","title":"Publish GitHub release","text":"<p>After you've submitted the PR which bumps the version and then publish a GitHub release.</p> <ol> <li>Click \"Choose a tag\" and type in the version you just released. This will create a new Git tag.</li> <li>Click \"Generate release notes\".</li> <li>If this is a an RC: Click \"Set as a pre-release\", otherwise leave the \"Set as the latest release\" checked.</li> <li>If this is a regular (non-RC) release, click \"Create a discussion for this release\".</li> <li>Click \"Publish release\".</li> </ol>"},{"location":"internal/publishing/#testing-locally","title":"Testing locally","text":"<p>Pre-requisite: you will need to install uv before doing the following steps.</p>"},{"location":"internal/publishing/#dev-cli","title":"Dev CLI","text":"<p>Run the following command but replace <code>1.0.0</code> with the version that you just published:</p> <pre><code>cd scripts/smoketest_app/ &amp;&amp; uvx --refresh mesop==1.0.0 main.py\n</code></pre> <p>This will start the Mesop dev server and you can test that hot reload works. Double-check that the version shown is the version that you just released.</p>"},{"location":"internal/publishing/#gunicorn-integration","title":"Gunicorn integration","text":"<p>Run the following command but replace <code>1.0.0</code> with the version that you just published:</p> <pre><code>cd scripts/smoketest_app/ &amp;&amp; uvx  --refresh --with mesop==1.0.0 gunicorn@latest main:me\n</code></pre> <p>This will launch Mesop under the Gunicorn server so you can make sure it works as expected.</p>"},{"location":"internal/publishing/#test-on-colab","title":"Test on Colab","text":"<p>Because Colab installs from PyPI, you will need to test the RC on Colab after uploading to PyPI.</p> <p>Open our Mesop Colab notebook. You will need to explicitly pip install the RC version as pip will not automatically install a pre-release version, even if it's the newest version. So change the first cell to something like:</p> <pre><code> !pip install mesop==0.X.Yrc1\n</code></pre> <p>Tip: sometimes it takes a minute for the PyPI registry to be updated after upload, so just try again.</p> <p>Then, run all the cells and make sure it works. Usually if something breaks in Colab, it's pretty obvious because the output isn't displayed, etc.</p>"},{"location":"internal/publishing/#change-the-version-from-rc-to-regular-release","title":"Change the version from RC to regular release","text":"<p>If you find an issue, then redo the above steps and create another RC candidate: <code>0.8.0rc1</code> -&gt; <code>0.8.0rc2</code>.</p> <p>If all the testing looks good, then you can update <code>mesop/version.py</code> and change the version from RC to a regular release, for example:</p> <p><code>0.8.0rc1</code> -&gt; <code>0.8.0</code></p> <p>Re-do the steps above to publish and test the release.</p>"},{"location":"internal/testing/","title":"Testing","text":""},{"location":"internal/testing/#unit-tests","title":"Unit tests","text":"<p>You can run our unit tests using Bazel.</p>"},{"location":"internal/testing/#run-tests","title":"Run tests","text":"<pre><code>bazel test //mesop/...\n</code></pre>"},{"location":"internal/testing/#e2e-tests","title":"E2E tests","text":"<p>We use Playwright as our e2e test framework. Unlike most of the stack, this isn't Bazel-ified although we'd like to eventually do this.</p>"},{"location":"internal/testing/#run-tests_1","title":"Run tests","text":"<pre><code>yarn playwright test\n</code></pre>"},{"location":"internal/testing/#debug-tests","title":"Debug tests","text":"<pre><code>yarn playwright test --debug\n</code></pre>"},{"location":"internal/toolchain/","title":"Build / Toolchain","text":""},{"location":"internal/toolchain/#context","title":"Context","text":"<p>Because Mesop is a Google open-source project and we want to provide a good integration with Google's internal codebase, Mesop uses Google's build system Bazel.</p> <p>Although Bazel is similar to the internal tool, there's numerous differences, particularly around the ecosystems, which makes it quite a challenge to maintain Mesop for both open-source and internal builds. Nevertheless, it's important that we do this to serve both communities well.</p>"},{"location":"internal/toolchain/#differences","title":"Differences","text":"<p>We try to isolate as much of the differences between these two environments into the <code>build_defs/</code> directory. Different versions of the same files inside <code>build_defs/</code> are maintained for each environment. In particular, <code>build_defs/defaults.bzl</code> is meant to wrap all external rules/macros used by Mesop so we can swap it between the internal and external variants as needed.</p> <p>Finally, all external dependencies, e.g. Python's <code>requirement('$package')</code> or NPM's <code>@npm//$package</code>, are referenced via an indirection to build_defs/defaults.bzl. This is because Google has a special approach to handling third-party dependencies.</p>"},{"location":"internal/toolchain/#gotchas","title":"Gotchas","text":"<p>Here's a quick list of gotchas to watch out for:</p> <ul> <li>Do not use <code>import * as</code> when importing protos from TS. This prevents tree-shaking downstream.</li> <li>Do not use any external Bazel references (e.g. <code>@</code>) within <code>mesop/</code>. Instead, reference them indirectly using a wrapper in <code>build_defs/</code>.</li> <li>Avoid relying on implicit transitive dependencies, particularly for TS/NG modules.</li> <li>Do not use raw <code>JSON.parse</code>, instead use <code>jsonParse</code> in <code>strict_types.ts</code>.</li> </ul>"},{"location":"internal/toolchain/#angular","title":"Angular","text":"<p>We rely heavily on Angular's toolchain, particularly around Bazel integration. Many of the Web-related Bazel rules, particularly for Angular/TS code was forked from github.com/angular/components.</p>"},{"location":"internal/type-checking/","title":"Type Checking","text":""},{"location":"internal/type-checking/#python-type-checking","title":"Python Type Checking","text":"<p>For our Python code, we use pyright as our static type checker because it has excellent IDE support in VS Code via pylance.</p> <p>To run Python type-checking, run:</p> <pre><code>./scripts/run_py_typecheck.sh\n</code></pre> <p>This will setup the pre-requisites needed for type-checking.</p>"},{"location":"internal/vs-code-remote-container/","title":"VS Code Remote Container","text":"<p>VS Code Remote Containers is a quick way to get started with internal Mesop development if you have VS Code and Docker Desktop installed.</p> <p>This approach will create a fully configured workspace, saving you time from debugging installation issues and allowing you to start development right away.</p>"},{"location":"internal/vs-code-remote-container/#pre-requistes-install-vs-code-and-docker","title":"Pre-requistes: Install VS Code and Docker","text":"<p>In order to use VS Code remote containers, you will need VS Code installed. You will also need Docker Desktop (which will install Docker Engine and Docker Compose) to run the remote containers.</p> <ul> <li>VS Code</li> <li>Docker Desktop</li> </ul>"},{"location":"internal/vs-code-remote-container/#fork-and-clone-the-mesop-repository","title":"Fork and Clone the Mesop repository","text":"<p>It is not recommended to develop locally and on remote containers using the same folder since this may cause unexpected conflicts. Instead you should clone the repository in a separate directory.</p> <p>You can follow the instructions here on how to fork and clone a Github repository.</p>"},{"location":"internal/vs-code-remote-container/#share-git-credentials-with-your-container","title":"Share Git credentials with your container","text":"<p>The VS Code Dev Containers extension provides a few ways to share your local Git credentials with your remote container.</p> <p>If you cloned the Mesop repo using HTTPS, you can use a Github CLI or Git Credential Manager.</p> <p>If you used SSH, then your local ssh agent will automatically be forwarded into your remote container. All you need do is run the <code>ssh-add</code> command to add the ssh key you've configured for GitHub access.</p> <p>See the Sharing Git credentials with your container page for full details.</p>"},{"location":"internal/vs-code-remote-container/#open-folder-in-container","title":"Open folder in container","text":"<p>Open VS Code, press <code>Cmd/Ctrl + Shift + P</code>, and select the <code>Dev Containers: Open Folder in Container...</code> option. This will create a new workspace inside a remote container.</p> <p></p>"},{"location":"internal/vs-code-remote-container/#wait-for-postcreatecommand-to-run","title":"Wait for postCreateCommand to run","text":"<p>The workspace will not be usable until the <code>postCreateCommand</code> has completed.</p> <p></p>"},{"location":"internal/vs-code-remote-container/#run-mesop-for-development","title":"Run Mesop for development","text":"<p>Once the <code>postCreateCommand</code> has finished, you can now start Mesop in the terminal.</p> <pre><code>./scripts/cli.sh\n</code></pre> <p>You will see some warning messages, but it is OK to ignore them.</p> <p>You should see this message once the Mesop server is ready.</p> <p></p>"},{"location":"internal/vs-code-remote-container/#view-mesop-demos","title":"View Mesop demos","text":"<p>Once <code>./scripts/cli.sh</code> has started the Mesop dev server, you can view the demos at http://localhost:32123.</p>"},{"location":"web-components/","title":"Web Components","text":"<p>Note: Web components are a new experimental feature released under labs and may have breaking changes.</p> <p>Mesop allows you to define custom components with web components which is a set of web standards that allows you to use JavaScript and CSS to define custom HTML elements.</p>"},{"location":"web-components/#use-cases","title":"Use cases","text":"<ul> <li> <p>Custom JavaScript - You can execute custom JavaScript and have simple bi-directional communication between the JavaScript code running in the browser and the Python code running the server.</p> </li> <li> <p>JavaScript libraries - If you want to use a JavaScript library, you can wrap them with a web component.</p> </li> <li> <p>Rich-client side interactivity - You can use web components to deliver stateful client-side interactions without a network roundtrip.</p> </li> </ul>"},{"location":"web-components/#anatomy-of-a-web-component","title":"Anatomy of a web component","text":"<p>Mesop web component consists of two parts:</p> <ul> <li>Python module - defines a Python API so that your Mesop app can use the web component seamlessly.</li> <li>JavaScript module - implements the web component.</li> </ul>"},{"location":"web-components/#next-steps","title":"Next steps","text":"<p>Learn how to build your first web component in the quickstart page.</p>"},{"location":"web-components/api/","title":"Web Components API","text":"<p>Note: Web components were previously launched under the labs namespace (i.e. <code>import mesop.lab as mel</code>). As part of the v1 release, all of the web component APIs are now exposed in the main mesop namespace (i.e. <code>import mesop as me</code>). You can continue to use the labs namespace for the web components API until v2 (which will happen much later).</p> <p>Example usage:</p> <pre><code>import mesop as me\n\n@me.web_component(...)\ndef a_web_component():\n    me.insert_web_component(...)\n</code></pre>"},{"location":"web-components/api/#api","title":"API","text":""},{"location":"web-components/api/#mesop.component_helpers.web_component.web_component","title":"<code>web_component</code>","text":"<p>A decorator for defining a web component.</p> <p>This decorator is used to define a web component. It takes a path to the JavaScript file of the web component and an optional parameter to skip validation. It then registers the JavaScript file in the runtime.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the JavaScript file of the web component.</p> <p> TYPE: <code>str</code> </p> <code>skip_validation</code> <p>If set to True, skips validation. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"web-components/api/#mesop.insert_web_component","title":"<code>insert_web_component</code>","text":"<p>Inserts a web component into the current component tree.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the web component. This should match the custom element name defined in JavaScript.</p> <p> TYPE: <code>str</code> </p> <code>events</code> <p>A dictionary where the key is the event name, which must match a web component property name defined in JavaScript.       The value is the event handler (callback) function.       Keys must not be \"src\", \"srcdoc\", or start with \"on\" to avoid web security risks.</p> <p> TYPE: <code>dict[str, Callable[[WebEvent], Any] | None] | None</code> DEFAULT: <code>None</code> </p> <code>properties</code> <p>A dictionary where the key is the web component property name that's defined in JavaScript and the value is the            property value which is plumbed to the JavaScript component.            Keys must not be \"src\", \"srcdoc\", or start with \"on\" to avoid web security risks.</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>key</code> <p>A unique identifier for the web component. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"web-components/api/#mesop.WebEvent","title":"<code>WebEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>MesopEvent</code></p> <p>An event emitted by a web component.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>The value associated with the web event.</p> <p> TYPE: <code>Any</code> </p> <code>key</code> <p>key of the component that emitted this event.</p> <p> TYPE: <code>str</code> </p>"},{"location":"web-components/api/#mesop.slot","title":"<code>slot</code>","text":"<p>This function is used when defining a content component to mark a place in the component tree where content can be provided by a child component.</p> PARAMETER DESCRIPTION <code>name</code> <p>A name can be specified for named slots. Multiple named slots in a composite component must use unique names.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p>"},{"location":"web-components/quickstart/","title":"Quickstart","text":"<p>Note: Web components are a new experimental feature released under labs and may have breaking changes.</p> <p>You will learn how to build your first web component step-by-step, a counter component.</p> <p>Although it's a simple example, it will show you the core APIs of defining your own web component and how to support bi-directional communication between the Python code running on the server and JavaScript code running on the browser.</p>"},{"location":"web-components/quickstart/#python-module","title":"Python module","text":"<p>Let's first take a look at the Python module which defines the interface so that the rest of your Mesop app can call the web component in a Pythonic way.</p> counter_component.py<pre><code>from typing import Any, Callable\n\nimport mesop as me\n\n\n@me.web_component(path=\"./counter_component.js\")\ndef counter_component(\n  *,\n  value: int,\n  on_decrement: Callable[[me.WebEvent], Any],\n  key: str | None = None,\n):\n  return me.insert_web_component(\n    name=\"quickstart-counter-component\",\n    key=key,\n    events={\n      \"decrementEvent\": on_decrement,\n    },\n    properties={\n      \"value\": value,\n    },\n  )\n</code></pre> <p>The first part you will notice is the decorator: <code>@me.web_component</code>. This annotates a function as a web component and specifies where the corresponding JavaScript module is located, relative to the location of this Python module.</p> <p>We've defined the function parameters just like a regular Python function.</p> <p>Tip: We recommend annotating your parameter with types because Mesop will do runtime validation which will catch type issues earlier.</p> <p>Finally, we call the function <code>me.insert_web_component</code> with the following arguments:</p> <ul> <li><code>name</code> - This is the web component name and must match the name defined in the JavaScript module.</li> <li><code>key</code> - Like all components, web components accept a key which is a unique identifier. See the component key docs for more info.</li> <li><code>events</code> - A dictionary where the key is the event name. This must match a property name, defined in JavaScript. The value is the event handler (callback) function.</li> <li><code>properties</code> - A dictionary where the key is the property name that's defined in JavaScript and the value is the property value which is plumbed to the JavaScript component.</li> </ul> <p>Note: Keys for events and properties must not be \"src\", \"srcdoc\", or start with \"on\" to avoid web security risks.</p> <p>In summary, when you see a string literal, it should match something on the JavaScript side which is explained next.</p>"},{"location":"web-components/quickstart/#javascript-module","title":"JavaScript module","text":"<p>Let's now take a look at how we implement in the web component in JavaScript:</p> counter_component.js<pre><code>import {\n  LitElement,\n  html,\n} from 'https://cdn.jsdelivr.net/gh/lit/dist@3/core/lit-core.min.js';\n\nclass CounterComponent extends LitElement {\n  static properties = {\n    value: {type: Number},\n    decrementEvent: {type: String},\n  };\n\n  constructor() {\n    super();\n    this.value = 0;\n    this.decrementEvent = '';\n  }\n\n  render() {\n    return html`\n      &lt;div class=\"container\"&gt;\n        &lt;span&gt;Value: ${this.value}&lt;/span&gt;\n        &lt;button id=\"decrement-btn\" @click=\"${this._onDecrement}\"&gt;\n          Decrement\n        &lt;/button&gt;\n      &lt;/div&gt;\n    `;\n  }\n\n  _onDecrement() {\n    this.dispatchEvent(\n      new MesopEvent(this.decrementEvent, {\n        value: this.value - 1,\n      }),\n    );\n  }\n}\n\ncustomElements.define('quickstart-counter-component', CounterComponent);\n</code></pre> <p>In this example, we have used Lit which is a small library built on top of web standards in a simple, secure and declarative manner.</p> <p>Note: you can write your web components using any web technologies (e.g. TypeScript) or frameworks as long as they conform to the interface defined by your Python module.</p>"},{"location":"web-components/quickstart/#properties","title":"Properties","text":"<p>The static property named <code>properties</code> defines two kinds of properties:</p> <ul> <li>Regular properties - these were defined in the <code>properties</code> argument of <code>insert_web_component</code>. The property name in JS must match one of the <code>properties</code> dictionary key. You also should make sure the Python and JS types are compatible to avoid issues.</li> <li>Event properties - these were defined in the <code>events</code> argument of <code>insert_web_component</code>. The property name in JS must match one of the <code>events</code> dictionary key. Event properties are always type <code>String</code> because the value is a handler id which identifies the Python event handler function.</li> </ul>"},{"location":"web-components/quickstart/#triggering-an-event","title":"Triggering an event","text":"<p>To trigger an event in your component, let's look at the <code>_onDecrement</code> method implementation:</p> <pre><code>this.dispatchEvent(\n  new MesopEvent(this.decrementEvent, {\n    value: this.value - 1,\n  }),\n);\n</code></pre> <p><code>this.dispatchEvent</code> is a standard web API where a DOM element can emit an event. For Mesop web components, we will always emit a <code>MesopEvent</code> which is a class provided on the global object (<code>window</code>). The first argument is the event handler id so Mesop knows which Python function to call as the event handler and the second argument is the payload which is a JSON-serializable value (oftentimes an object) that the Python event handler can access.</p>"},{"location":"web-components/quickstart/#learn-more-about-lit","title":"Learn more about Lit","text":"<p>I didn't cover the <code>render</code> function which is a standard Lit method. I recommend reading through Lit's docs which are excellent ahd have interactive tutorials.</p>"},{"location":"web-components/quickstart/#using-the-component","title":"Using the component","text":"<p>Finally, let's use the web component we defined. When you click on the decrement button, the value will decrease from 10 to 9 and so on.</p> counter_component_app.py<pre><code>from pydantic import BaseModel\n\nimport mesop as me\nfrom mesop.examples.web_component.quickstart.counter_component import (\n  counter_component,\n)\n\n\n@me.page(\n  path=\"/web_component/quickstart/counter_component_app\",\n  security_policy=me.SecurityPolicy(\n    allowed_script_srcs=[\n      \"https://cdn.jsdelivr.net\",\n    ]\n  ),\n)\ndef page():\n  counter_component(\n    value=me.state(State).value,\n    on_decrement=on_decrement,\n  )\n\n\n@me.stateclass\nclass State:\n  value: int = 10\n\n\nclass ChangeValue(BaseModel):\n  value: int\n\n\ndef on_decrement(e: me.WebEvent):\n  # Creating a Pydantic model from the JSON value of the WebEvent\n  # to enforce type safety.\n  decrement = ChangeValue(**e.value)\n  me.state(State).value = decrement.value\n</code></pre> <p>Even though this was a toy example, you've learned how to build a web component from scratch which does bi-directional communication between the Python server and JavaScript client.</p>"},{"location":"web-components/quickstart/#next-steps","title":"Next steps","text":"<p>To learn more, read the API docs or look at the examples.</p>"},{"location":"web-components/troubleshooting/","title":"Web Components Troubleshooting","text":""},{"location":"web-components/troubleshooting/#security-policy","title":"Security policy","text":"<p>One of the most common issues when using web components is that you will need to relax the stringent security policy Mesop uses by default.</p> <p>If you use the <code>mesop</code> command-line tool to run your app, you will see a detailed error message printed like this that will tell you how to fix the error:</p> <p></p> <p>If you are using Colab or another tool to run your Mesop app, and you can't see the terminal messages, then you can use your browser developer tools to view the console error messages.</p>"},{"location":"web-components/troubleshooting/#content-security-policy-error-messages","title":"Content security policy error messages","text":"<p>In your browser developer tools, you may see the following console error messages (the exact wording may differ):</p>"},{"location":"web-components/troubleshooting/#script-src-error","title":"script-src Error","text":"script-src Console Error <p>Refused to load the script 'https://cdn.jsdelivr.net/gh/lit/dist@3/core/lit-core.min.js' because it violates the following Content Security Policy directive: \"script-src 'self' 'nonce-X-_ZR64fycojGBCDQbjpLA'\". Note that 'script-src-elem' was not explicitly set, so 'script-src' is used as a fallback.</p> <p>If you see this error message, then you will need to update your page's Security Policy <code>allowed_script_srcs</code> property. In this example, because the \"script-src\" directive was violated, you will need to add the script's URL to the Security Policy like this:</p> <pre><code>@me.page(\n    security_policy=me.SecurityPolicy(\n        allowed_script_srcs=[\"https://cdn.jsdelivr.net\"]\n    )\n)\n</code></pre> Allow-listing sites <p>You can allow-list the full URL including the path, but it's usually more convenient  to allow-list the entire site. This depends on how trustworthy the site is.</p>"},{"location":"web-components/troubleshooting/#connect-src-error","title":"connect-src Error","text":"connect-src Console Error <p>zone.umd.js:2767 Refused to connect to 'https://identitytoolkit.googleapis.com/v1/projects' because it violates the following Content Security Policy directive: \"default-src 'self'\". Note that 'connect-src' was not explicitly set, so 'default-src' is used as a fallback.</p> <p>If you see this error message, then you will need to update your page's Security Policy <code>allowed_connect_srcs</code> property. In this example, because the \"connect-src\" directive was violated, you will need to add the URL you are trying to connect to (e.g. XHR, fetch) to the Security Policy like this:</p> <pre><code>@me.page(\n    security_policy=me.SecurityPolicy(\n        allowed_connect_srcs=[\"https://*.googleapis.com\"]\n    )\n)\n</code></pre> Allow-listing domains using wildcard <p>You can wildcard all the subdomains for a site by using the wildcard character <code>*</code>.</p>"},{"location":"web-components/troubleshooting/#trusted-types-error","title":"Trusted Types Error","text":"<p>Trusted Types errors can come in various forms. If you see a console error message that contains TrustedHTML, TrustedScriptURL or some other variation, then you are likely hitting a trusted types error. Trusted Types is a powerful web security feature which prevents untrusted code from using sensitive browser APIs.</p> <p>Unfortunately, many third-party libraries are incompatible with trusted types which means you need to disable this web security defense protection for the Mesop page which uses these libraries via web components.</p> TrustedHTML Console Error <p>TypeError: Failed to set the 'innerHTML' property on 'Element': This document requires 'TrustedHTML' assignment.</p> <p>You can fix this Trusted Types error by disabling Trusted Types in the security policy like this:</p> <pre><code>@me.page(\n    security_policy=me.SecurityPolicy(\n        dangerously_disable_trusted_types=True\n    )\n)\n</code></pre>"},{"location":"web-components/troubleshooting/#colab","title":"Colab","text":""},{"location":"web-components/troubleshooting/#site-level-user-permissions","title":"Site level user permissions","text":"<p>Some APIs like <code>navigator.mediaDevices.getUserMedia()</code> require that users grant permission through a browser prompt. Colab attempts to detect if a code cell requires user permission, but this detection does not work for Mesop apps running in Colab using <code>me.colab_run()</code>.</p> <p>As a workaround, use the IPython <code>%%javascript</code> cell magic to trigger a user permission prompt. Once permission is granted, it applies to all cells in the notebook. For example, to request the <code>microphone</code> permission, create a new code cell and run the following code:</p> <pre><code>%%javascript\nnavigator.mediaDevices.getUserMedia({audio: true, video: false});\n</code></pre>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""}]}